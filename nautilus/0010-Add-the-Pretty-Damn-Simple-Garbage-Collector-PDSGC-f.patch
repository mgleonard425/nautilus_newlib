From d2e22d0b002ed6bbe50a28f45588ae4e98a7e1c4 Mon Sep 17 00:00:00 2001
From: Peter Dinda <pdinda@northwestern.edu>
Date: Fri, 21 Jul 2017 18:39:36 -0500
Subject: [PATCH 10/10] Add the Pretty Damn Simple Garbage Collector (PDSGC)
 for optional use

- PDSGC is a conservative garbage collector directly integrated
  with kmem's allocator.  It can be enabled for implicit GC use
  (failing malloc triggers GC, free does nothing) or explicit
  GC use (mallocs/frees act as normal, GC or leak detection
  can be invoked when desired)

- Shell extensions to test PDSGC, and to use it for explicit
  GC or leak detection

WARNING: Garbage collection and PDSGC are highly experimental features.
         If you don't know if you need them, you do not
---
 Kconfig                        |  28 +-
 src/arch/x64/init.c            |  18 +-
 src/gc/Makefile                |   1 +
 src/gc/pdsgc/Makefile          |   1 +
 src/gc/pdsgc/pdsgc.c           | 683 +++++++++++++++++++++++++++++++++++++++++
 src/gc/pdsgc/pdsgc_low_level.S |  88 ++++++
 src/nautilus/shell.c           |  59 +++-
 7 files changed, 867 insertions(+), 11 deletions(-)
 create mode 100644 src/gc/pdsgc/Makefile
 create mode 100644 src/gc/pdsgc/pdsgc.c
 create mode 100644 src/gc/pdsgc/pdsgc_low_level.S

diff --git a/Kconfig b/Kconfig
index 5dbb121..a762298 100644
--- a/Kconfig
+++ b/Kconfig
@@ -421,7 +421,7 @@ menu "Garbage Collection Options"
    choice 
     prompt "Select Garbage Collector"
     depends on GARBAGE_COLLECTION
-    default ENABLE_BDWGC
+    default ENABLE_PDSGC
 
      config ENABLE_BDWGC
       bool "BDWGC"
@@ -432,6 +432,15 @@ menu "Garbage Collection Options"
         WARNING: BDWGC integration in Nautilus is a highly experimental feature.   If you
         don't know if you need this, you do not.
 
+     config ENABLE_PDSGC
+      bool "PDSGC"
+      default n
+      depends on GARBAGE_COLLECTION
+      help
+        If enabled, the home-grown PDSGC garbage colector is used.
+        WARNING: PDSGC integration in Nautilus is a highly experimental feature.   If you
+        don't know if you need this, you do not.
+
    endchoice
  
    config ALIGN_BDWGC
@@ -441,6 +450,7 @@ menu "Garbage Collection Options"
        help
          If enabled, BDWGC allocations will be aligned to their own size, as in the buddy system allocator
 
+
    config DEBUG_BDWGC
        bool "Debug the BDWGC garbage collector"
        default n
@@ -448,6 +458,22 @@ menu "Garbage Collection Options"
        help
          If enabled, print debugging output from BDWGC
 
+   config EXPLICIT_ONLY_PDSGC
+       bool "Only use PDSGC explictly"
+       default n
+       depends on ENABLE_PDSGC
+       help
+         If enabled failing mallocs do *not* trigger gc and frees do
+         deallocation.  PDSGC can then be used to explicitly leak check
+         or explicitly do garbage collection of leaked data
+
+   config DEBUG_PDSGC
+       bool "Debug the PDSGC garbage collector"
+       default n
+       depends on ENABLE_PDSGC
+       help
+         If enabled, print debugging output from PDSGC
+
   config TEST_BDWGC 
    bool "Include the BDWGC garbage collection test suite"
    default n
diff --git a/src/arch/x64/init.c b/src/arch/x64/init.c
index bb7d124..e97e181 100644
--- a/src/arch/x64/init.c
+++ b/src/arch/x64/init.c
@@ -97,6 +97,10 @@
 #include <gc/bdwgc/bdwgc.h>
 #endif
 
+#ifdef NAUT_CONFIG_ENABLE_PDSGC
+#include <gc/pdsgc/pdsgc.h>
+#endif
+
 extern spinlock_t printk_lock;
 
 
@@ -270,11 +274,6 @@ init (unsigned long mbd,
     nk_block_dev_init();
     nk_net_dev_init();
 
-    nk_dev_init();
-    nk_char_dev_init();
-    nk_block_dev_init();
-    nk_net_dev_init();
-
     nk_vc_print(NAUT_WELCOME);
 
     
@@ -311,10 +310,15 @@ init (unsigned long mbd,
     mm_boot_kmem_init();
 
 #ifdef NAUT_CONFIG_ENABLE_BDWGC
-    // Bring up the garbage collector if enabled
+    // Bring up the BDWGC garbage collector if enabled
     nk_gc_bdwgc_init();
 #endif
 
+#ifdef NAUT_CONFIG_ENABLE_PDSGC
+    // Bring up the PDSGC garbage collector if enabled
+    nk_gc_pdsgc_init();
+#endif
+
     disable_8259pic();
 
     i8254_init(naut);
@@ -322,7 +326,7 @@ init (unsigned long mbd,
     /* from this point on, we can use percpu macros (even if the APs aren't up) */
 
     sysinfo_init(&(naut->sys));
-
+   
     ioapic_init(&(naut->sys));
 
     nk_timer_init();
diff --git a/src/gc/Makefile b/src/gc/Makefile
index a2ba0f0..3c2648c 100644
--- a/src/gc/Makefile
+++ b/src/gc/Makefile
@@ -1 +1,2 @@
 obj-$(NAUT_CONFIG_ENABLE_BDWGC) += bdwgc/
+obj-$(NAUT_CONFIG_ENABLE_PDSGC) += pdsgc/
diff --git a/src/gc/pdsgc/Makefile b/src/gc/pdsgc/Makefile
new file mode 100644
index 0000000..5b18786
--- /dev/null
+++ b/src/gc/pdsgc/Makefile
@@ -0,0 +1 @@
+obj-y += pdsgc.o pdsgc_low_level.o
diff --git a/src/gc/pdsgc/pdsgc.c b/src/gc/pdsgc/pdsgc.c
new file mode 100644
index 0000000..c141a87
--- /dev/null
+++ b/src/gc/pdsgc/pdsgc.c
@@ -0,0 +1,683 @@
+/* 
+ * This file is part of the Nautilus AeroKernel developed
+ * by the Hobbes and V3VEE Projects with funding from the 
+ * United States National  Science Foundation and the Department of Energy.  
+ *
+ * The V3VEE Project is a joint project between Northwestern University
+ * and the University of New Mexico.  The Hobbes Project is a collaboration
+ * led by Sandia National Laboratories that includes several national 
+ * laboratories and universities. You can find out more at:
+ * http://www.v3vee.org  and
+ * http://xstack.sandia.gov/hobbes
+ *
+ * Copyright (c) 2017, Peter Dinda <pdinda@northwestern.edu>
+ * Copyright (c) 2017, The V3VEE Project  <http://www.v3vee.org> 
+ *                     The Hobbes Project <http://xstack.sandia.gov/hobbes>
+ * All rights reserved.
+ *
+ * Authors:  Peter Dinda <pdinda@northwestern.edu>
+ *
+ * This is free software.  You are permitted to use,
+ * redistribute, and modify it as specified in the file "LICENSE.txt".
+ */
+
+// This is an implementation of conservative garbage collection that
+// is specific to the Nautilus kernel internals and is tightly bound
+// to how to internal allocator (kmem/buddy) works.
+
+#include <nautilus/nautilus.h>
+#include <nautilus/mm.h>
+#include <nautilus/thread.h>
+#include <nautilus/scheduler.h>
+#include <nautilus/backtrace.h>
+#include <gc/pdsgc/pdsgc.h>
+
+#define VISITED 0x1
+
+#define GC_STACK_SIZE (4*1024*1024)
+#define GC_MAX_THREADS (NAUT_CONFIG_MAX_THREADS*16)
+
+#ifndef NAUT_CONFIG_DEBUG_PDSGC
+#define DEBUG(fmt, args...)
+#else
+#define DEBUG(fmt, args...) DEBUG_PRINT("pdsgc: " fmt,  ##args)
+#endif
+
+#define INFO(fmt, args...) INFO_PRINT("pdsgc: " fmt, ##args)
+#define WARN(fmt, args...) WARN_PRINT("pdsgc: " fmt,  ##args)
+#define ERROR(fmt, args...) ERROR_PRINT("pdsgc: " fmt, ##args)
+
+#define PDSGC_SPECIFIC_STACK_TOPMOST(t) ((t) ? ((void*)((uint64_t)(t)->stack)) : 0 )
+#define PDSGC_STACK_TOPMOST() (PDSGC_SPECIFIC_STACK_TOPMOST(get_cur_thread()))
+
+#define PDSGC_SPECIFIC_STACK_TOP(t) ((t) ? ((void*)((uint64_t)(t)->rsp)) : 0 )
+#define PDSGC_STACK_TOP() (PDSGC_SPECIFIC_STACK_TOP(get_cur_thread()))
+
+#define PDSGC_SPECIFIC_STACK_BOTTOM(t) ((t) ? ((void*)((uint64_t)(t)->stack + (t)->stack_size - 0)) : 0)
+#define PDSGC_STACK_BOTTOM() (PDSGC_SPECIFIC_STACK_BOTTOM(get_cur_thread()))
+
+static void *gc_stack=0;
+
+static uint64_t num_thread_stack_limits;
+
+static struct thread_stack_limits {
+    void *start;
+    void *end;
+    void *top;
+} *gc_thread_stack_limits = 0;
+
+static void *kmem_internal_start, *kmem_internal_end;
+
+int  nk_gc_pdsgc_init()
+{
+    gc_stack = kmem_malloc(GC_STACK_SIZE);
+    if (!gc_stack) {
+	ERROR("Failed to allocate GC stack\n");
+	return -1;
+    } 
+    gc_thread_stack_limits = kmem_malloc(sizeof(struct thread_stack_limits)*GC_MAX_THREADS);
+    if (!gc_thread_stack_limits) {
+	ERROR("Failed to allocate GC thread stack limits array\n");
+	return -1;
+    } 
+    INFO("init\n");
+    return 0;
+}
+
+void nk_gc_bdsgc_deinit()
+{
+    kmem_free(gc_stack);
+    kmem_free(gc_thread_stack_limits);
+    INFO("deinit\n");
+}
+
+void *nk_gc_pdsgc_malloc(uint64_t size)
+{
+    DEBUG("Allocate %lu bytes\n",size);
+
+    // We want a block that has had any old pointers stored
+    // in it nuked, hence the mallocz
+    void *block = kmem_mallocz(size);
+
+    if (block) { 
+	DEBUG("Success - returning %p\n",block);
+        //BACKTRACE(DEBUG,4);
+	return block;
+    } else {
+#ifdef NAUT_CONFIG_EXPLICIT_ONLY_PDSGC
+	DEBUG("Failed - returning NULL\n");
+	return 0;
+#else
+	DEBUG("Failed - running garbage collection\n");
+	if (nk_gc_pdsgc_collect(0)) {
+	    ERROR("Garbage collection failed!\n");
+	    return 0;
+	} else {
+	    DEBUG("Garbage collection succeeded, trying again\n");
+	    block = kmem_mallocz(size);
+	    if (block) { 
+		DEBUG("Success after garbage  collection - returning %p\n", block);
+		//BACKTRACE(DEBUG,4);
+		return block;
+	    } else {
+		DEBUG("Failed even after garbage collection\n");
+		return block;
+	    }
+	}
+#endif
+    } 
+}
+
+// Of course, this linear scan data structure will not scale...
+
+static inline struct thread_stack_limits *is_in_thread_stack(void *addr)
+{
+    uint64_t i;
+
+    for (i=0;i<num_thread_stack_limits;i++) { 
+	if (((addr_t)addr >= (addr_t)gc_thread_stack_limits[i].start) &&
+	    ((addr_t)addr < (addr_t)gc_thread_stack_limits[i].end)) {
+	    return &(gc_thread_stack_limits[i]);
+	}
+    }
+    return 0;
+}
+
+static inline struct thread_stack_limits *is_thread_stack(void *start, void *end)
+{
+    uint64_t i;
+
+    // too small
+    // if we get this wrong, we will simply visit the whole thread stack
+    // and hence have overkill in terms of visits
+    if ((end-start)<PAGE_SIZE_4KB) { 
+	return 0;
+    }
+
+    for (i=0;i<num_thread_stack_limits;i++) { 
+	if ((start == gc_thread_stack_limits[i].start) &&
+	    (end == gc_thread_stack_limits[i].end)) {
+	    return &(gc_thread_stack_limits[i]);
+	}
+    }
+    return 0;
+}
+
+
+static void handle_thread_stack_limit(nk_thread_t *t, void *state)
+{
+    void *start = PDSGC_SPECIFIC_STACK_TOPMOST(t);
+    void *top = PDSGC_SPECIFIC_STACK_TOP(t);
+    void *end = PDSGC_SPECIFIC_STACK_BOTTOM(t);
+
+    if (num_thread_stack_limits >= GC_MAX_THREADS) { 
+	ERROR("Out of room for storing stack limits...\n");
+	*(int*)state |= -1;
+    } else {
+	DEBUG("Thread %lu (%s) has stack limits %p-%p (top %p)\n",
+	      t->tid,t->is_idle ? "(*idle*)" : !t->name[0] ? "*unnamed*" : t->name,start,end,top);
+	gc_thread_stack_limits[num_thread_stack_limits].start = start;
+	gc_thread_stack_limits[num_thread_stack_limits].end = end;
+	gc_thread_stack_limits[num_thread_stack_limits].top = top;
+	num_thread_stack_limits++;
+    }
+}
+
+static int capture_thread_stack_limits()
+{
+    int rc = 0;
+
+    DEBUG("***Handling thread stack limit capture\n");
+
+    num_thread_stack_limits = 0;
+
+    nk_sched_map_threads(-1,handle_thread_stack_limit,&rc);
+
+    if (rc) { 
+	ERROR("***Failed to handle some thread stack limit rc=%d!\n",rc);
+	return -1;
+    } else {
+	return 0;
+    }
+}
+
+static inline int handle_block(void *start, void *end);
+
+static inline int handle_address(void *start)
+{
+    void *block_addr;
+    uint64_t block_size, flags;
+    void *approx_rsp = &approx_rsp;
+
+    // short circuit 0 
+    if (!start) { 
+	return 0;
+    }
+
+    if ((addr_t)approx_rsp < (addr_t)(gc_stack+4096)) { 
+	ERROR("Ran out of room in the GC stack!\n");
+	return -1;
+    }
+
+    if (kmem_find_block(start,&block_addr,&block_size,&flags)) { 
+	//DEBUG("Skipping address %p as it is non-heap\n",start);
+	// not a valid block - skip
+	return 0;
+    }
+
+    if (flags & VISITED) { 
+	DEBUG("Skipping address %p (block %p) as it is already marked\n", start, block_addr);
+	return 0;
+    }
+
+    if (kmem_set_block_flags(block_addr, flags | VISITED)) {
+	ERROR("Failed to set visited on block %p\n", block_addr);
+	return -1;
+    }
+
+    DEBUG("Visited block %p via address %p - now visiting its children\n", block_addr, start);
+
+    return handle_block(block_addr,block_addr+block_size);
+}
+    
+
+static inline int handle_block(void *start, void *end)
+{
+    void *cur;
+
+    DEBUG("Handling block %p-%p\n", start,end);
+    
+    struct thread_stack_limits *t = is_thread_stack(start,end);
+
+    if (t) { 
+	// if it's a thread stack, then consider only the range
+	// that is relevant.   Anything past the top of stack is 
+	// not to be visited...
+	DEBUG("Block %p-%p is thread stack - revising to %p-%p\n", start,end,t->top,end);
+	start = t->top;
+    }
+
+    if ((addr_t)start%8 || (addr_t)end%8) { 
+	ERROR("Block %p-%p is not aligned to a pointer\n");
+	return -1;
+    }
+    
+    // If we contain the kmem internal range, we must not scan this
+    // since it has pointers to all allocated blocks
+
+    // do we contain the kmem internal range?
+    if (((addr_t)kmem_internal_start>=(addr_t)start) &&
+	((addr_t)kmem_internal_end<=(addr_t)end)) { 
+	
+	DEBUG("block %p-%p contains kmem range %p-%p - skipping that range\n",
+	      start,end,kmem_internal_start,kmem_internal_end);
+	
+	for (cur=start;cur<kmem_internal_start;cur+=sizeof(addr_t)) { 
+	    if (handle_address(*(void**)cur)) { 
+		ERROR("Failed to handle address %p - failing block\n", cur);
+		return -1;
+	    }
+	}
+	
+	for (cur=kmem_internal_end;cur<end;cur+=sizeof(addr_t)) { 
+	    if (handle_address(*(void**)cur)) { 
+		ERROR("Failed to handle address %p - failing block\n", cur);
+		return -1;
+	    }
+	}
+	
+    } else {
+	
+	for (cur=start;cur<end;cur+=sizeof(addr_t)) { 
+	    if (handle_address(*(void**)cur)) { 
+		ERROR("Failed to handle address %p - failing block\n", cur);
+		return -1;
+	    }
+	}
+    }
+	
+    return 0;
+}
+
+static int mark_gc_state()
+{
+    void *block_addr;
+    uint64_t block_size, flags;
+
+    if (kmem_find_block(gc_stack,&block_addr,&block_size,&flags)) { 
+	ERROR("Could not find GC stack?!\n");
+	return -1;
+    }
+
+    if (kmem_set_block_flags(block_addr, flags | VISITED)) {
+	ERROR("Failed to set visited on GC stack\n");
+	return -1;
+    }
+
+    if (kmem_find_block(gc_thread_stack_limits,&block_addr,&block_size,&flags)) { 
+	ERROR("Could not find GC thread stack limits?!\n");
+	return -1;
+    }
+
+    if (kmem_set_block_flags(block_addr, flags | VISITED)) {
+	ERROR("Failed to set visited on GC thread stack limits\n");
+	return -1;
+    }
+
+    return 0;
+}
+
+extern int _data_start, _data_end;
+
+static int handle_data_roots()
+{
+    DEBUG("***Handling data roots %p-%p\n",&_data_start,&_data_end);
+    int rc = handle_block(&_data_start, &_data_end);
+    if (rc) {
+	ERROR("***Handling data roots failed\n");
+    }
+    return rc;
+}
+
+// we need to handle our thread stack separately
+static void handle_thread_stack(nk_thread_t *t, void *state)
+{
+    void *start = PDSGC_SPECIFIC_STACK_TOP(t);
+    void *end = PDSGC_SPECIFIC_STACK_BOTTOM(t);
+  
+    DEBUG("***Handling thread stack for thread %lu (%s) - %p-%p\n",
+	  t->tid,t->is_idle ? "(*idle*)" : !t->name[0] ? "*unnamed*" : t->name,start,end);
+
+    int rc =  handle_block(start,end);
+
+    if (rc) { 
+	ERROR("***Handling thread stack failed\n");
+    }
+
+    *(int *)state |= rc;
+}
+
+static int handle_thread_stack_roots()
+{
+    int rc = 0;
+
+    DEBUG("***Handling thread stacks\n");
+
+    nk_sched_map_threads(-1,handle_thread_stack,&rc);
+
+    if (rc) { 
+	ERROR("***Failed to handle some thread stack rc=%d!\n",rc);
+	return -1;
+    } else {
+	return 0;
+    }
+}
+
+static uint64_t num_gc=0;
+static uint64_t blocks_freed=0;
+static struct nk_gc_pdsgc_stats *stats=0;
+
+static int dealloc(void *block, void *state)
+{
+    void *block_addr;
+    uint64_t block_size, flags;
+
+    // sanity check
+    if (kmem_find_block(block,&block_addr,&block_size,&flags)) { 
+	ERROR("Unable to find block %p on free\n",block);
+	return -1;
+    }
+
+    DEBUG("Freeing garbage block %p - in block %p (%lu bytes, flags=0x%lx)\n",block,block_addr,block_size,flags);
+    
+    if (block_addr!=block) {
+	ERROR("Deallocation is not using the enclosing block (dealloc %p but enclosing block is %p (%lu bytes)\n", block, block_addr, block_size);
+	return -1;
+    }
+
+    kmem_free(block);
+    blocks_freed++;
+
+    if (stats) { 
+	stats->num_blocks++;
+	stats->total_bytes += block_size;
+	if (block_size < stats->min_block) { stats->min_block=block_size; }
+	if (block_size > stats->max_block) { stats->max_block=block_size; }
+    }
+
+    return 0;
+}
+
+
+static int leak(void *block, void *state)
+{
+    void *block_addr;
+    uint64_t block_size, flags;
+
+    // sanity check
+    if (kmem_find_block(block,&block_addr,&block_size,&flags)) { 
+	ERROR("Unable to find block %p on leak detection\n",block);
+	return -1;
+    }
+
+    if (block_addr!=block) {
+	ERROR("Leak detector is not using the enclosing block (leak %p but enclosing block is %p (%lu bytes)\n", block, block_addr, block_size);
+	return -1;
+    }
+
+
+    INFO("leaked block %p (%lu bytes, flags=0x%lx)\n",block_addr,block_size,flags);
+    blocks_freed++;
+
+    if (stats) { 
+	stats->num_blocks++;
+	stats->total_bytes += block_size;
+	if (block_size < stats->min_block) { stats->min_block=block_size; }
+	if (block_size > stats->max_block) { stats->max_block=block_size; }
+    }
+
+    return 0;
+}
+
+static int  _nk_gc_pdsgc_handle(int (*handle_unvisited)(void *block, void *state), void *state)
+{
+    nk_sched_stop_world();
+
+    blocks_freed=0;
+
+    kmem_get_internal_pointer_range(&kmem_internal_start,&kmem_internal_end);
+
+    DEBUG("kmem internal range is %p-%p\n",kmem_internal_start, kmem_internal_end);
+
+    if (kmem_mask_all_blocks_flags(~VISITED,0)) { 
+	ERROR("Failed to clear visit flags...\n");
+	goto out_bad;
+    }
+    
+    // Do not revisit the GC's own state
+    if (mark_gc_state()) { 
+	ERROR("Failed to mark GC stack....\n");
+	return -1;
+    }
+
+    if (capture_thread_stack_limits()) { 
+	ERROR("Cannot capture thread stack limits\n");
+	return -1;
+    }
+    
+    if (handle_data_roots()) {
+	ERROR("Failed to handle data segment roots\n");
+	goto out_bad;
+    }
+
+    if (handle_thread_stack_roots()) { 
+	ERROR("Failed to handle thread stack roots\n");
+	goto out_bad;
+    }
+
+    DEBUG("Now applying dealloc or leak to unvisited blocks\n");
+    if (kmem_apply_to_matching_blocks(VISITED,0,handle_unvisited,state)) { 
+	ERROR("Failed to complete applying dealloc/leak function\n");
+	goto out_bad;
+    }
+
+// out_good:
+    DEBUG("Pass succeeded - pass %lu freed/detected %lu blocks\n", num_gc, blocks_freed);
+    num_gc++;
+    nk_sched_start_world();
+    return 0;
+
+ out_bad:
+    ERROR("Pass failed\n");
+    num_gc++;
+    nk_sched_start_world();
+    return -1;
+}
+
+
+int  _nk_gc_pdsgc_collect()
+{
+    return _nk_gc_pdsgc_handle(dealloc,0);
+}
+
+int  _nk_gc_pdsgc_leak_detect()
+{
+    return _nk_gc_pdsgc_handle(leak,0);
+}
+
+
+extern int _nk_gc_pdsgc_stack_wrap(void *new_stack_bottom, void *old_stack_bottom_save_loc, int (*func)());
+
+int  nk_gc_pdsgc_collect(struct nk_gc_pdsgc_stats *s)
+{
+    struct nk_thread *t;
+    int rc;
+
+    if (!(t=get_cur_thread())) { 
+	ERROR("No current thread\n");
+	return -1;
+    }
+
+    INFO("Performing garbage collection\n");
+
+    stats = s;
+    if (stats) { 
+	memset(stats,0,sizeof(*stats));
+	stats->min_block = -1;
+    }
+
+    rc = _nk_gc_pdsgc_stack_wrap(gc_stack+GC_STACK_SIZE,&t->rsp,_nk_gc_pdsgc_collect);
+
+    if (stats && !stats->num_blocks) { 
+	stats->min_block=0;
+    }
+    
+    return rc;
+}
+
+int  nk_gc_pdsgc_leak_detect(struct nk_gc_pdsgc_stats *s)
+{
+    struct nk_thread *t;
+    int rc;
+
+    if (!(t=get_cur_thread())) { 
+	ERROR("No current thread\n");
+	return -1;
+    }
+
+    INFO("Performing leak detection\n");
+
+    stats = s;
+    if (stats) { 
+	memset(stats,0,sizeof(*stats));
+	stats->min_block = -1;
+    }
+	   
+    rc = _nk_gc_pdsgc_stack_wrap(gc_stack+GC_STACK_SIZE,&t->rsp,_nk_gc_pdsgc_leak_detect);
+
+    if (stats && !stats->num_blocks) { 
+	stats->min_block=0;
+    }
+    
+    return rc;
+}
+
+#define NUM_ALLOCS 8
+
+static uint64_t num_bytes_alloced = 0;
+
+int _nk_gc_pdsgc_test_inner()
+{
+    int i;
+    void *p;
+
+    num_bytes_alloced = 0;
+
+    for (i=0;i<NUM_ALLOCS;i++) { 
+	// pointer must be in rax
+	p = malloc(0x1UL<<(i+8));
+	if (p) { 
+	    nk_vc_printf("Allocated %lu bytes at %p\n",0x1UL<<(i+8), p);
+	    num_bytes_alloced += 0x1UL<<(i+8);
+	} else {
+	    nk_vc_printf("ALLOCATION FAILURE\n");
+	    return -1;
+	}
+    }
+
+    // clear rax
+    return 0; 
+    
+}
+
+
+int  nk_gc_pdsgc_test()
+{
+    int rc;
+    struct nk_gc_pdsgc_stats before, leak, collect, after;
+
+    nk_vc_printf("Testing PDSGC - this can take some time!\n");
+    
+    nk_vc_printf("Doing initial leak analysis\n");
+    rc = nk_gc_pdsgc_leak_detect(&before);
+    if (rc) { 
+	nk_vc_printf("Leak detection failed\n");
+	return -1;
+    }
+    nk_vc_printf("%lu blocks / %lu bytes are already leaked\n",
+		 before.num_blocks, before.total_bytes);
+    nk_vc_printf("smallest leaked block: %lu bytes, largest leaked block: %lu bytes\n",
+		 before.min_block, before.max_block);
+    
+    nk_vc_printf("Doing leaking allocations\n");
+
+
+    // Make sure that our call to the allocator does
+    // not leave a footprint in registers - calling convention
+    // will handle rsp and rbp
+    __asm__ __volatile__ ("call _nk_gc_pdsgc_test_inner" : : : 
+			  "cc", "memory", "rax", "rbx", "rcx", "rdx",
+			  "rsi","rdi","r8","r9","r10","r11", "r12",
+			  "r13", "r14", "r15");
+
+    nk_vc_printf("Doing leak analysis after leaking allocations\n");
+
+    rc = nk_gc_pdsgc_leak_detect(&leak);
+    if (rc) { 
+	nk_vc_printf("Leak detection failed\n");
+	return -1;
+    }
+    nk_vc_printf("%lu blocks / %lu bytes are now leaked\n",
+		 leak.num_blocks, leak.total_bytes);
+    nk_vc_printf("smallest leaked block: %lu bytes, largest leaked block: %lu bytes\n",
+		 leak.min_block, leak.max_block);
+
+
+    nk_vc_printf("Doing garbage collection\n");
+
+    rc = nk_gc_pdsgc_collect(&collect);
+    if (rc) { 
+	nk_vc_printf("Colleciion failed\n");
+	return -1;
+    }
+    nk_vc_printf("%lu blocks / %lu bytes were collected\n",
+		 collect.num_blocks, collect.total_bytes);
+    nk_vc_printf("smallest collected block: %lu bytes, largest collected block: %lu bytes\n",
+		 collect.min_block, collect.max_block);
+    
+    nk_vc_printf("Doing leak analysis after collection\n");
+
+    rc = nk_gc_pdsgc_leak_detect(&after);
+    if (rc) { 
+	nk_vc_printf("Leak detection failed\n");
+	return -1;
+    }
+    nk_vc_printf("%lu blocks / %lu bytes are now leaked\n",
+		 after.num_blocks, after.total_bytes);
+    nk_vc_printf("smallest leaked block: %lu bytes, largest leaked block: %lu bytes\n",
+		 after.min_block, after.max_block);
+
+    rc = 0;
+
+    if ((leak.num_blocks - before.num_blocks) != NUM_ALLOCS) { 
+	nk_vc_printf("Error: intentionally leaked %lu blocks, but %lu blocks were detected\n", NUM_ALLOCS, leak.num_blocks-before.num_blocks);
+	rc = -1;
+    }
+
+    if ((leak.total_bytes - before.total_bytes) != num_bytes_alloced) {
+	nk_vc_printf("Error: intentionally leaked %lu bytes, but %lu bytes were detected\n", num_bytes_alloced, leak.total_bytes-before.total_bytes);
+	rc = -1;
+    }
+
+    if (before.num_blocks != after.num_blocks) { 
+	nk_vc_printf("Before/after numblocks do not match\n");
+	rc = -1;
+    }
+
+    if (before.total_bytes != after.total_bytes) { 
+	nk_vc_printf("Before/after byte totals do not match\n");
+	rc = -1;
+    }
+
+    return rc;
+}
diff --git a/src/gc/pdsgc/pdsgc_low_level.S b/src/gc/pdsgc/pdsgc_low_level.S
new file mode 100644
index 0000000..d159f7f
--- /dev/null
+++ b/src/gc/pdsgc/pdsgc_low_level.S
@@ -0,0 +1,88 @@
+/* 
+ * This file is part of the Nautilus AeroKernel developed
+ * by the Hobbes and V3VEE Projects with funding from the 
+ * United States National  Science Foundation and the Department of Energy.  
+ *
+ * The V3VEE Project is a joint project between Northwestern University
+ * and the University of New Mexico.  The Hobbes Project is a collaboration
+ * led by Sandia National Laboratories that includes several national 
+ * laboratories and universities. You can find out more at:
+ * http://www.v3vee.org  and
+ * http://xstack.sandia.gov/hobbes
+ *
+ * Copyright (c) 2017, Peter Dinda <pdinda@northwestern.edu>
+ * Copyright (c) 2017, The V3VEE Project  <http://www.v3vee.org> 
+ *                     The Hobbes Project <http://xstack.sandia.gov/hobbes>
+ * All rights reserved.
+ *
+ * Authors:  Peter Dinda <pdinda@northwestern.edu>
+ *
+ * This is free software.  You are permitted to use,
+ * redistribute, and modify it as specified in the file "LICENSE.txt".
+ */
+
+// wrapper code so that we can use a private stack for the GC process
+
+#define GPR_SAVE()                              \
+pushq %rax      ;                               \
+pushq %rbx      ;                               \
+pushq %rcx      ;                               \
+pushq %rdx      ;                               \
+pushq %rsi      ;                               \
+pushq %rdi      ;                               \
+pushq %rbp  ;               \
+pushq %r8       ;                               \
+pushq %r9       ;                               \
+pushq %r10      ;                               \
+pushq %r11      ;                               \
+pushq %r12      ;                               \
+pushq %r13      ;                               \
+pushq %r14      ;                               \
+pushq %r15      ;                               \
+pushfq          ;
+
+#define GPR_LOAD_NO_RAX()                       \
+popfq           ;                               \
+popq %r15       ;                               \
+popq %r14       ;                               \
+popq %r13       ;                               \
+popq %r12       ;                               \
+popq %r11       ;                               \
+popq %r10       ;                               \
+popq %r9        ;                               \
+popq %r8        ;                               \
+popq %rbp   ;               \
+popq %rdi       ;                               \
+popq %rsi       ;                               \
+popq %rdx       ;                               \
+popq %rcx       ;                               \
+popq %rbx       ;                               \
+
+#define GPR_LOAD()                              \
+GPR_LOAD_NO_RAX()                                \
+popq %rax       ;
+
+#define GPR_LOAD_SKIP_RAX()                     \
+GPR_LOAD_NO_RAX()                                \
+leaq 8(%rsp), %rsp ;                            // This instruction must not affect CCs
+
+
+	
+// input:  rdi = stack bottom to switch to
+//         rsi = t->rsp to update
+//         rdx = function to invoke
+//	   rsp = stack bottom to swtich from/return to
+.global _nk_gc_pdsgc_stack_wrap
+_nk_gc_pdsgc_stack_wrap:
+	GPR_SAVE()              // make sure any in-register pointer
+	                        // is now on our stack
+	movq %rsp, (%rsi)       // update t->rsp so GC can find them
+	movq %rsp, -8(%rdi)     // stash old rsp on new stack so we can restore it
+	leaq -8(%rdi), %rsp     // switch to the GC stack
+	call *%rdx              // invoke gc function
+	popq %rsp               // restore to the thread stack
+	GPR_LOAD_SKIP_RAX()     // restore our GPRs
+	retq
+
+	
+	
diff --git a/src/nautilus/shell.c b/src/nautilus/shell.c
index 08bd0ee..293ef56 100644
--- a/src/nautilus/shell.c
+++ b/src/nautilus/shell.c
@@ -48,10 +48,14 @@
 #include <nautilus/isocore.h>
 #endif
 
-#ifdef NAUT_CONFIG_TEST_BDWGC
+#ifdef NAUT_CONFIG_ENABLE_BDWGC
 #include <gc/bdwgc/bdwgc.h>
 #endif
 
+#ifdef NAUT_CONFIG_ENABLE_PDSGC
+#include <gc/pdsgc/pdsgc.h>
+#endif
+
 #define MAX_CMD 80
 
 struct burner_args {
@@ -518,9 +522,44 @@ static int handle_collect(char *buf)
     nk_vc_printf("BDWGC global garbage collection done result: %d\n",rc);
     return 0;
 #else
+#ifdef NAUT_CONFIG_ENABLE_PDSGC
+    nk_vc_printf("Doing PDSGC global garbage collection\n");
+    struct nk_gc_pdsgc_stats s;
+    int rc = nk_gc_pdsgc_collect(&s);
+    nk_vc_printf("PDSGC global garbage collection done result: %d\n",rc);
+    nk_vc_printf("%lu blocks / %lu bytes freed\n",
+		 s.num_blocks, s.total_bytes);
+    nk_vc_printf("smallest freed block: %lu bytes, largest freed block: %lu bytes\n",
+		 s.min_block, s.max_block);
+    return 0;
+#else 
     nk_vc_printf("No garbage collector is enabled...\n");
     return 0;
 #endif
+#endif
+}
+
+static int handle_leaks(char *buf)
+{
+#ifdef NAUT_CONFIG_ENABLE_BDWGC
+    nk_vc_printf("Leak detection not available for BDWGC\n");
+    return 0;
+#else
+#ifdef NAUT_CONFIG_ENABLE_PDSGC
+    nk_vc_printf("Doing PDSGC global leak detection\n");
+    struct nk_gc_pdsgc_stats s;
+    int rc = nk_gc_pdsgc_leak_detect(&s);
+    nk_vc_printf("PDSGC global leak detection done result: %d\n",rc);
+    nk_vc_printf("%lu blocks / %lu bytes have leaked\n",
+		 s.num_blocks, s.total_bytes);
+    nk_vc_printf("smallest leaked block: %lu bytes, largest leaked block: %lu bytes\n",
+		 s.min_block, s.max_block);
+    return 0;
+#else 
+    nk_vc_printf("No garbage collector is enabled...\n");
+    return 0;
+#endif
+#endif
 }
 #endif
 
@@ -554,6 +593,13 @@ static int handle_test(char *buf)
     }
 #endif
 
+#ifdef NAUT_CONFIG_ENABLE_PDSGC
+    if (!strncasecmp(what,"pdsgc",5)) { 
+	nk_vc_printf("Testing PDSGC garbage collector\n");
+	return nk_gc_pdsgc_test();
+    }
+#endif
+
  dunno:
     nk_vc_printf("Unknown test request\n");
     return -1;
@@ -711,7 +757,7 @@ static int handle_cmd(char *buf, int n)
     nk_vc_printf("meminfo [detail]\n");
     nk_vc_printf("reap\n");
 #ifdef NAUT_CONFIG_GARBAGE_COLLECTION
-    nk_vc_printf("collect\n");
+    nk_vc_printf("collect | leaks\n");
 #endif
     nk_vc_printf("burn a name size_ms tpr priority\n");
     nk_vc_printf("burn s name size_ms tpr phase size deadline priority\n");
@@ -721,7 +767,7 @@ static int handle_cmd(char *buf, int n)
     nk_vc_printf("bench\n");
     nk_vc_printf("blktest dev r|w start count\n");
     nk_vc_printf("blktest dev r|w start count\n");
-    nk_vc_printf("test threads|stop|iso|bdwgc|...\n");
+    nk_vc_printf("test threads|stop|iso|bdwgc|pdsgc|...\n");
     nk_vc_printf("vm name [embedded image]\n");
     nk_vc_printf("run path\n");
     return 0;
@@ -795,6 +841,13 @@ static int handle_cmd(char *buf, int n)
   }
 #endif
 
+#ifdef NAUT_CONFIG_GARBAGE_COLLECTION
+  if (!strncasecmp(buf,"leak",4)) { 
+      handle_leaks(buf); 
+      return 0;
+  }
+#endif
+
   if (sscanf(buf,"regs %lu",&tid)==1) { 
       nk_thread_t *t = nk_find_thread_by_tid(tid);
       if (!t) {
-- 
1.9.1

