cscope 15 $HOME/nautilus/src/nautilus               0000389488
	@acpi.c

29 
	~<«utûus/«utûus.h
>

30 
	~<«utûus/¥ötk.h
>

31 
	~<«utûus/«ut_ty≥s.h
>

32 
	~<«utûus/a˝i.h
>

33 
	~<«utûus/numa.h
>

34 
	~<«utûus/smp.h
>

36 
uöt32_t
 
	ga˝i_rsdt_f‹˚d
;

37 
	ga˝i_dißbÀd
;

39 
	#BAD_MADT_ENTRY
(
íåy
, 
íd
) ( \

40 (!
íåy
Ë|| (Î¡ry + (*íåyË> 
íd
 || \

41 ((
a˝i_subèbÀ_hódî
 *)
íåy
)->
Àngth
 < (*íåy))

	)

43 
	#PREFIX
 "ACPI BOOT: "

	)

45 
	ga˝i_noúq
;

46 
	ga˝i_pci_dißbÀd
;

48 
	ga˝i_œpic
;

49 
	ga˝i_iﬂpic
;

50 
	ga˝i_°ri˘
;

52 
uöt8_t
 
	ga˝i_sci_Êags
 ;

53 
	ga˝i_sci_ovîride_gsi
 ;

54 
	ga˝i_skù_timî_ovîride
 ;

55 
	ga˝i_u£_timî_ovîride
 ;

56 
	ga˝i_fix_pö2_pﬁ¨ôy
 ;

58 #ifde‡
CONFIG_X86_LOCAL_APIC


59 
uöt64_t
 
	ga˝i_œpic_addr
 = 
APIC_DEFAULT_PHYS_BASE
;

87 
	$nk_a˝i_öô
 ()

89 i‡(
a˝i_dißbÀd
) {

90 
	`ERROR_PRINT
(
PREFIX
 "ACPI is disabled, cannot initialize.\n");

95 i‡(
	`a˝i_èbÀ_öô
()) {

96 
	`ERROR_PRINT
(
PREFIX
 "ACPI initialization failed, disabling ACPI.\n");

97 
	`dißbÀ_a˝i
();

100 
	}
}

	@backtrace.c

23 
	~<«utûus/öåösics.h
>

24 
	~<«utûus/«utûus.h
>

25 
	~<«utûus/˝u.h
>

26 
	~<«utûus/thªad.h
>

28 
¥ötk
 (c⁄° * 
fmt
, ...);

31 
__©åibuã__
((
noölöe
))

32 
	$__do_backåa˚
 (** 
Â
, 
dïth
)

34 i‡(!
Â
 || f∞>(**)
	`nk_gë_«utûus_öfo
()->
sys
.
mem
.
phys_mem_avaû
) {

38 
	`¥ötk
("[%2u] RIP: %∞RBP: %p\n", 
dïth
, *(
Â
+1), *fp);

40 
	`__do_backåa˚
(*
Â
, 
dïth
+1);

41 
	}
}

48 
	$nk_dump_mem
 (c⁄° * 
addr
, 
ul⁄g_t
 
n
)

50 
i
, 
j
;

51 
ul⁄g_t
 
√w
 = (
n
 % 16 == 0) ?Ç : ((n+16) & ~0xf);

53 
i
 = 0; i < 
√w
/((*)); i+=2) {

54 
	`¥ötk
("%p: %08∞ %08∞ ", ((**)
addr
 + 
i
), *((**)addr + i), *((**)addr + i + 1));

55 
j
 = 0; j < 16; j++) {

56 
tmp
 = *((*)
addr
 + 
j
);

57 
	`¥ötk
("%c", (
tmp
 < 0x7f &&Åmp > 0x1f) ?Åmp : '.');

60 
	`¥ötk
("\n");

62 
	}
}

66 
	$nk_°ack_dump
 (
ul⁄g_t
 
n
)

68 * 
r•
 = 
NULL
;

70 
asm
 vﬁ©ûê("movq %%r•, %[_r]" : [
_r
] "Ù" (
r•
));

72 i‡(!
r•
) {

76 
	`¥ötk
("Stack Dump:\n");

78 
	`nk_dump_mem
(
r•
, 
n
);

79 
	}
}

83 
	$nk_¥öt_ªgs
 (
nk_ªgs
 * 
r
)

85 
i
 = 0;

86 
ul⁄g_t
 
¸0
 = 0ul;

87 
ul⁄g_t
 
¸2
 = 0ul;

88 
ul⁄g_t
 
¸3
 = 0ul;

89 
ul⁄g_t
 
¸4
 = 0ul;

90 
ul⁄g_t
 
fs
 = 0ul;

91 
ul⁄g_t
 
gs
 = 0ul;

92 
ul⁄g_t
 
sgs
 = 0ul;

93 
uöt_t
 
fsi
;

94 
uöt_t
 
gsi
;

95 
uöt_t
 
cs
;

96 
uöt_t
 
ds
;

97 
uöt_t
 
es
;

99 
	`¥ötk
("Current Thread=0x%x (%p) \"%s\"\n",

100 
	`gë_cur_thªad
(Ë? gë_cur_thªad()->
tid
 : -1,

101 
	`gë_cur_thªad
(Ë? (*)gë_cur_thªad(Ë: 
NULL
,

102 !
	`gë_cur_thªad
(Ë? "NONE" : gë_cur_thªad()->
is_idÀ
 ? "*idÀ*" : gë_cur_thªad()->
«me
);

105 
	`¥ötk
("[-------------- Register Contents --------------]\n");

106 
	`¥ötk
("RIP: %04lx:%016lx\n", 
r
->
cs
,Ñ->
rù
);

107 
	`¥ötk
("RSP: %04lx:%016lx RFLAGS: %08lx Vector: %08lx Error: %08lx\n",

108 
r
->
ss
,Ñ->
r•
,Ñ->
rÊags
,Ñ->
ve˘‹
,Ñ->
îr_code
);

109 
	`¥ötk
("RAX: %016lx RBX: %016lx RCX: %016lx\n", 
r
->
øx
,Ñ->
rbx
,Ñ->
rcx
);

110 
	`¥ötk
("RDX: %016lx RDI: %016lx RSI: %016lx\n", 
r
->
rdx
,Ñ->
rdi
,Ñ->
rsi
);

111 
	`¥ötk
("RBP: %016lx R08: %016lx R09: %016lx\n", 
r
->
rbp
,Ñ->
r8
,Ñ->
r9
);

112 
	`¥ötk
("R10: %016lx R11: %016lx R12: %016lx\n", 
r
->
r10
,Ñ->
r11
,Ñ->
r12
);

113 
	`¥ötk
("R13: %016lx R14: %016lx R15: %016lx\n", 
r
->
r13
,Ñ->
r14
,Ñ->
r15
);

115 
asm
 vﬁ©ûe("mov»%%cs, %0": "Ù" (
cs
));

116 
asm
 vﬁ©ûe("mov»%%ds, %0": "Ù" (
ds
));

117 
asm
 vﬁ©ûe("mov»%%es, %0": "Ù" (
es
));

118 
asm
 vﬁ©ûe("mov»%%fs, %0": "Ù" (
fsi
));

119 
asm
 vﬁ©ûe("mov»%%gs, %0": "Ù" (
gsi
));

121 
gs
 = 
	`m§_ªad
(
MSR_GS_BASE
);

122 
fs
 = 
	`m§_ªad
(
MSR_FS_BASE
);

123 
gsi
 = 
	`m§_ªad
(
MSR_KERNEL_GS_BASE
);

125 
asm
 vﬁ©ûe("movq %%¸0, %0": "Ù" (
¸0
));

126 
asm
 vﬁ©ûe("movq %%¸2, %0": "Ù" (
¸2
));

127 
asm
 vﬁ©ûe("movq %%¸3, %0": "Ù" (
¸3
));

128 
asm
 vﬁ©ûe("movq %%¸4, %0": "Ù" (
¸4
));

130 
	`¥ötk
("FS: %016lx(%04x) GS: %016lx(%04x) knlGS: %016lx\n",

131 
fs
, 
fsi
, 
gs
, 
gsi
, 
sgs
);

132 
	`¥ötk
("CS: %04x DS: %04x ES: %04x CR0: %016lx\n",

133 
cs
, 
ds
, 
es
, 
¸0
);

134 
	`¥ötk
("CR2: %016lx CR3: %016lx CR4: %016lx\n",

135 
¸2
, 
¸3
, 
¸4
);

137 
	`¥ötk
("[-----------------------------------------------]\n");

138 
	}
}

	@barrier.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/b¨rõr.h
>

25 
	~<«utûus/˝u.h
>

26 
	~<«utûus/©omic.h
>

27 
	~<«utûus/î∫o.h
>

28 
	~<«utûus/öåösics.h
>

29 
	~<«utûus/thªad.h
>

30 
	~<«utûus/mm.h
>

33 #i‚de‡
NAUT_CONFIG_DEBUG_BARRIER


34 #unde‡
DEBUG_PRINT


35 
	#DEBUG_PRINT
(
fmt
, 
¨gs
...)

	)

38 
ölöe
 

39 
	$b•ö_lock
 (vﬁ©ûê* 
lock
)

41 
	`__sync_lock_ã°_™d_£t
(
lock
, 1));

42 
	}
}

44 
ölöe
 

45 
	$b•ö_u∆ock
 (vﬁ©ûê* 
lock
)

47 
	`__sync_lock_ªÀa£
(
lock
);

48 
	}
}

57 
	$b¨rõr_xˇŒ_h™dÀr
 (* 
¨g
)

59 
	`nk_c‹e_b¨rõr_¨rive
();

60 
	}
}

76 
	$nk_b¨rõr_öô
 (
nk_b¨rõr_t
 * 
b¨rõr
, 
uöt32_t
 
cou¡
)

78 
ªt
 = 0;

79 
	`mem£t
(
b¨rõr
, 0, (
nk_b¨rõr_t
));

80 
b¨rõr
->
lock
 = 0;

82 i‡(
	`u∆ikñy
(
cou¡
 == 0)) {

83 
	`ERROR_PRINT
("Barrier count must be greaterÅhan 0\n");

84  -
EINVAL
;

88 
	`DEBUG_PRINT
("Inôülizög b¨õr, b¨rõ∏© %p, cou¡=%u\n", (*)
b¨rõr
, 
cou¡
);

89 
b¨rõr
->
öô_cou¡
 = 
cou¡
;

90 
b¨rõr
->
ªmaöög
 = 
cou¡
;

93 
	}
}

107 
	$nk_b¨rõr_de°roy
 (
nk_b¨rõr_t
 * 
b¨rõr
)

109 
ªs
;

111 i‡(!
b¨rõr
) {

112  -
EINVAL
;

115 
	`DEBUG_PRINT
("De°royög b¨rõ∏(%p)\n", (*)
b¨rõr
);

117 
	`b•ö_lock
(&
b¨rõr
->
lock
);

119 i‡(
	`likñy
(
b¨rõr
->
ªmaöög
 =b¨rõr->
öô_cou¡
)) {

120 
ªs
 = 0;

123 
	`ERROR_PRINT
("Someone still waitingát barrier, cannot destroy\n");

124 
ªs
 = -
EINVAL
;

126 
	`b•ö_u∆ock
(&
b¨rõr
->
lock
);

128  
ªs
;

129 
	}
}

146 
	$nk_b¨rõr_waô
 (
nk_b¨rõr_t
 * 
b¨rõr
)

148 
ªs
 = 0;

150 
	`DEBUG_PRINT
("Thªad (%pËíãrög b¨rõ∏(%p)\n", (*)
	`gë_cur_thªad
(), (*)
b¨rõr
);

152 
	`b•ö_lock
(&
b¨rõr
->
lock
);

154 i‡(--
b¨rõr
->
ªmaöög
 == 0) {

155 
ªs
 = 
NK_BARRIER_LAST
;

156 
	`©omic_cmpsw≠
(
b¨rõr
->
nŸify
, 0, 1);

158 
	`b•ö_u∆ock
(&
b¨rõr
->
lock
);

159 
	`BARRIER_WHILE
(
b¨rõr
->
nŸify
 != 1);

162 
	`DEBUG_PRINT
("Thªad (%pËexôög b¨rõ∏(%p)\n", (*)
	`gë_cur_thªad
(), (*)
b¨rõr
);

164 
öô_cou¡
 = 
b¨rõr
->init_count;

166 i‡(
	`©omic_öc_vÆ
(
b¨rõr
->
ªmaöög
Ë=
öô_cou¡
) {

167 
	`b•ö_u∆ock
(&
b¨rõr
->
lock
);

170  
ªs
;

171 
	}
}

201 
	$nk_c‹e_b¨rõr_øi£
 ()

203 
nk_b¨rõr_t
 * 
b¨rõr
 = 
	`≥r_˝u_gë
(
sy°em
)->
c‹e_b¨rõr
;

204 
uöt8_t
 
iownô
 = 0;

205 
uöt8_t
 
Êags
;

206 
i
;

207 
ªs
 = 0;

209 
	`DEBUG_PRINT
("C‹ê%uÑaisög c‹êb¨rõr\n", 
	`my_˝u_id
());

211 
Êags
 = 
	`•ö_lock_úq_ßve
(&
b¨rõr
->
lock
);

213 i‡(
b¨rõr
->
a˘ive
 == 0) {

214 
b¨rõr
->
a˘ive
 = 1;

215 
b¨rõr
->
nŸify
 = 0;

216 
b¨rõr
->
ªmaöög
 = b¨rõr->
öô_cou¡
;

217 
iownô
 = 1;

220 
	`•ö_u∆ock_úq_ª°‹e
(&
b¨rõr
->
lock
, 
Êags
);

222 i‡(
iownô
) {

226 
	`©omic_dec
(
b¨rõr
->
ªmaöög
);

228 
˝u_id_t
 
me
 = 
	`my_˝u_id
();

231 
i
 = 0; i < 
	`≥r_˝u_gë
(
sy°em
)->
num_˝us
; i++) {

233 i‡(
i
 =
me
) {

237 i‡(
	`smp_xˇŒ
(
i
,

238 
b¨rõr_xˇŒ_h™dÀr
,

239 
NULL
,

242 
	`ERROR_PRINT
("CouldÇŸ f‹˚ cpu %uÅÿwaôáàb¨rõr\n", 
i
);

243  -
EINVAL
;

253 
	`nk_c‹e_b¨rõr_¨rive
();

254 
ªs
 = -
EINVAL
;

258  
ªs
;

259 
	}
}

272 
	$nk_c‹e_b¨rõr_lowî
 ()

274 
nk_b¨rõr_t
 * 
b¨rõr
 = 
	`≥r_˝u_gë
(
sy°em
)->
c‹e_b¨rõr
;

276 
	`DEBUG_PRINT
("C‹ê%uÜowîög b¨rõr\n", 
	`my_˝u_id
());

278 i‡(!
b¨rõr
->
a˘ive
) {

279  -
EINVAL
;

282 
	`©omic_cmpsw≠
(
b¨rõr
->
nŸify
, 0, 1) == 0);

283 
b¨rõr
->
a˘ive
 = 0;

286 
	}
}

299 
	$nk_c‹e_b¨rõr_waô
 ()

301 
nk_b¨rõr_t
 * 
b¨rõr
 = 
	`≥r_˝u_gë
(
sy°em
)->
c‹e_b¨rõr
;

303 
	`DEBUG_PRINT
("C‹ê%u waôög o¿Ÿhî c‹e†tÿ¨rivê© c‹êb¨rõr\n", 
	`my_˝u_id
());

305 i‡(!
b¨rõr
->
a˘ive
) {

306  -
EINVAL
;

309 
b¨rõr
->
ªmaöög
 != 0) {

310 
	`nk_yõld
();

314 
	}
}

330 
	$nk_c‹e_b¨rõr_¨rive
 ()

332 
nk_b¨rõr_t
 * 
b¨rõr
 = 
	`≥r_˝u_gë
(
sy°em
)->
c‹e_b¨rõr
;

334 i‡(!
b¨rõr
->
a˘ive
) {

335  -
EINVAL
;

338 
	`DEBUG_PRINT
("C‹ê%uáºivögáàc‹êb¨rõr\n", 
	`my_˝u_id
());

340 
	`©omic_dec
(
b¨rõr
->
ªmaöög
);

342 
b¨rõr
->
nŸify
 != 1) {

343 
	`nk_yõld
();

347 
	}
}

352 
	$b¨rõr_func1
 (* 
ö
, ** 
out
)

354 
nk_b¨rõr_t
 * 
b
 = (nk_b¨rõr_à*)
ö
;

355 
	`nk_b¨rõr_waô
(
b
);

356 
	}
}

360 
	$b¨rõr_func2
 (* 
ö
, ** 
out
)

362 
uöt64_t
 
n
 = 100;

363 
nk_b¨rõr_t
 * 
b
 = (nk_b¨rõr_à*)
ö
;

364 --
n
) {

365 
	`io_dñay
();

368 
	`nk_b¨rõr_waô
(
b
);

369 
	}
}

378 
	$nk_b¨rõr_ã°
()

380 
nk_b¨rõr_t
 * 
b
;

381 
b
 = 
	`mÆloc
((
nk_b¨rõr_t
));

382 i‡(!
b
) {

383 
	`ERROR_PRINT
("couldÇotállocate barrier\n");

387 
	`nk_b¨rõr_öô
(
b
, 3);

388 
	`nk_thªad_°¨t
(
b¨rõr_func1
, 
b
, 
NULL
, 1, 
TSTACK_DEFAULT
, NULL, 1);

389 
	`nk_thªad_°¨t
(
b¨rõr_func2
, 
b
, 
NULL
, 1, 
TSTACK_DEFAULT
, NULL, 2);

391 
	`nk_b¨rõr_waô
(
b
);

393 
	`¥ötk
("BarrierÅest successful\n");

394 
	`nk_b¨rõr_de°roy
(
b
);

395 
	`‰ì
(
b
);

396 
	}
}

	@blkdev.c

24 
	~<«utûus/«utûus.h
>

25 
	~<«utûus/dev.h
>

26 
	~<«utûus/blkdev.h
>

28 #i‚de‡
NAUT_CONFIG_DEBUG_BLKDEV


29 #unde‡
DEBUG_PRINT


30 
	#DEBUG_PRINT
(
fmt
, 
¨gs
...)

	)

33 
	#ERROR
(
fmt
, 
¨gs
...Ë
	`ERROR_PRINT
("blkdev: " fmt, ##¨gs)

	)

34 
	#DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("blkdev: " fmt, ##¨gs)

	)

35 
	#INFO
(
fmt
, 
¨gs
...Ë
	`INFO_PRINT
("blkdev: " fmt, ##¨gs)

	)

38 
•ölock_t
 
	g°©e_lock
;

40 
	#STATE_LOCK_CONF
 
uöt8_t
 
_°©e_lock_Êags


	)

41 
	#STATE_LOCK
(Ë
_°©e_lock_Êags
 = 
	`•ö_lock_úq_ßve
(&
°©e_lock
)

	)

42 
	#STATE_UNLOCK
(Ë
	`•ö_u∆ock_úq_ª°‹e
(&
°©e_lock
, 
_°©e_lock_Êags
);

	)

46 
	$nk_block_dev_öô
()

48 
	`INFO
("init\n");

50 
	}
}

52 
	$nk_block_dev_deöô
()

54 
	`INFO
("deinit\n");

56 
	}
}

59 
nk_block_dev
 * 
	$nk_block_dev_ªgi°î
(*
«me
, 
uöt64_t
 
Êags
, 
nk_block_dev_öt
 *
öãr
, *
°©e
)

61 
	`INFO
("ªgi°î devi˚ %s\n",
«me
);

62  (
nk_block_dev
 *Ë
	`nk_dev_ªgi°î
(
«me
,
NK_DEV_BLK
,
Êags
,(
nk_dev_öt
 *)
öãr
,
°©e
);

63 
	}
}

65 
	$nk_block_dev_uƒegi°î
(
nk_block_dev
 *
d
)

67 
	`INFO
("uƒegi°î devi˚ %s\n", 
d
->
dev
.
«me
);

68  
	`nk_dev_uƒegi°î
((
nk_dev
 *)
d
);

69 
	}
}

71 
nk_block_dev
 * 
	$nk_block_dev_föd
(*
«me
)

73 
	`DEBUG
("föd %s\n",
«me
);

74 
nk_dev
 *
d
 = 
	`nk_dev_föd
(
«me
);

75 i‡(
d
->
ty≥
!=
NK_DEV_BLK
) {

76 
	`DEBUG
("%†nŸ found\n",
«me
);

79 
	`DEBUG
("%†found\n",
«me
);

80  (
nk_block_dev
*Ë
d
;

82 
	}
}

84 
	$nk_block_dev_gë_ch¨a˘îi°ics
(
nk_block_dev
 *
dev
, 
nk_block_dev_ch¨a˘îi°ics
 *
c
)

86 
nk_dev
 *
d
 = (nk_dev *)(&(
dev
->dev));

87 
nk_block_dev_öt
 *
di
 = (nk_block_dev_öà*)(
d
->
öãrÁ˚
);

89 
	`DEBUG
("gë ch¨a˘îi°ic†o‡%s\n",
d
->
«me
);

90  
di
->
	`gë_ch¨a˘îi°ics
(
d
->
°©e
,
c
);

91 
	}
}

93 
	$gíîic_ˇŒback
(*
c⁄ãxt
)

95 *(vﬁ©ûê
uöt64_t
 *)
c⁄ãxt
 = 1;

96 
	}
}

99 
nk_block_dev_ªad
(
nk_block_dev
 *
dev
,

100 
uöt64_t
 
blocknum
,

101 
uöt64_t
 
cou¡
,

102 *
de°
,

103 
nk_dev_ªque°_ty≥_t
 
ty≥
,

104 (*
ˇŒback
)(*
°©e
),

105 *
°©e
)

107 
nk_dev
 *
d
 = (nk_dev *)(&(
dev
->dev));

108 
nk_block_dev_öt
 *
di
 = (nk_block_dev_öà*)(
d
->
öãrÁ˚
);

109 
	`DEBUG
("ªad %†(°¨t=%lu, cou¡=%lu,Åy≥=%lx)\n", 
d
->
«me
,
blocknum
,
cou¡
,
ty≥
);

110 
ty≥
) {

111 
NK_DEV_REQ_CALLBACK
:

112 i‡(!
di
->
ªad_blocks
) {

113 
	`DEBUG
("readblocksÇotÖossible\n");

116  
di
->
	`ªad_blocks
(
d
->
°©e
,
blocknum
,
cou¡
,
de°
,
ˇŒback
,state);

119 
NK_DEV_REQ_BLOCKING
:

120 
NK_DEV_REQ_NONBLOCKING
: {

121 i‡(!
di
->
ªad_blocks
) {

122 
	`DEBUG
("readblocks isÇotÖossible\n");

125 vﬁ©ûê
uöt64_t
 
com∂ëi⁄
 = 0;

127 i‡(
ty≥
==
NK_DEV_REQ_NONBLOCKING
) {

128 i‡(
di
->
	`ªad_blocks
(
d
->
°©e
,
blocknum
,
cou¡
,
de°
,0,0)) {

129 
	`ERROR
("failedÅo start upÑeadblocks\n");

132 
	`DEBUG
("readblocks started\n");

136 i‡(
di
->
	`ªad_blocks
(
d
->
°©e
,
blocknum
,
cou¡
,
de°
,
gíîic_ˇŒback
,(*)&
com∂ëi⁄
)) {

137 
	`ERROR
("failedÅo start upÑeadblocks\n");

140 
	`DEBUG
("readblocks started, waiting for completion\n");

141 !
com∂ëi⁄
) {

142 
	`nk_dev_waô
((
nk_dev
 *)
d
);

153 
	}
}

156 
nk_block_dev_wrôe
(
nk_block_dev
 *
dev
,

157 
uöt64_t
 
blocknum
,

158 
uöt64_t
 
cou¡
,

159 *
§c
,

160 
nk_dev_ªque°_ty≥_t
 
ty≥
,

161 (*
ˇŒback
)(*
°©e
),

162 *
°©e
)

164 
nk_dev
 *
d
 = (nk_dev *)(&(
dev
->dev));

165 
nk_block_dev_öt
 *
di
 = (nk_block_dev_öà*)(
d
->
öãrÁ˚
);

166 
	`DEBUG
("wrôê%†(°¨t=%lu, cou¡=%lu,Åy≥=%lx\n", 
d
->
«me
,
blocknum
,
cou¡
,
ty≥
);

167 
ty≥
) {

168 
NK_DEV_REQ_CALLBACK
:

169 i‡(!
di
->
wrôe_blocks
) {

170 
	`DEBUG
("writeblocksÇotÖossible\n");

173  
di
->
	`wrôe_blocks
(
d
->
°©e
,
blocknum
,
cou¡
,
§c
,
ˇŒback
,state);

176 
NK_DEV_REQ_BLOCKING
:

177 
NK_DEV_REQ_NONBLOCKING
: {

178 i‡(!
di
->
wrôe_blocks
) {

179 
	`DEBUG
("writeblocks isÇotÖossible\n");

182 vﬁ©ûê
uöt64_t
 
com∂ëi⁄
 = 0;

184 i‡(
ty≥
==
NK_DEV_REQ_NONBLOCKING
) {

185 i‡(
di
->
	`wrôe_blocks
(
d
->
°©e
,
blocknum
,
cou¡
,
§c
,0,0)) {

186 
	`ERROR
("failedÅo start up writeblocks\n");

189 
	`DEBUG
("readblocks started\n");

193 i‡(
di
->
	`wrôe_blocks
(
d
->
°©e
,
blocknum
,
cou¡
,
§c
,
gíîic_ˇŒback
,(*)&
com∂ëi⁄
)) {

194 
	`ERROR
("failedÅo start up writeblocks\n");

197 
	`DEBUG
("writeblocks started, waiting for completion\n");

198 !
com∂ëi⁄
) {

199 
	`nk_dev_waô
((
nk_dev
 *)
d
);

211 
	}
}

	@chardev.c

24 
	~<«utûus/«utûus.h
>

25 
	~<«utûus/dev.h
>

26 
	~<«utûus/ch¨dev.h
>

28 #i‚de‡
NAUT_CONFIG_DEBUG_CHARDEV


29 #unde‡
DEBUG_PRINT


30 
	#DEBUG_PRINT
(
fmt
, 
¨gs
...)

	)

33 
	#ERROR
(
fmt
, 
¨gs
...Ë
	`ERROR_PRINT
("ch¨dev: " fmt, ##¨gs)

	)

34 
	#DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("ch¨dev: " fmt, ##¨gs)

	)

35 
	#INFO
(
fmt
, 
¨gs
...Ë
	`INFO_PRINT
("ch¨dev: " fmt, ##¨gs)

	)

38 
•ölock_t
 
	g°©e_lock
;

40 
	#STATE_LOCK_CONF
 
uöt8_t
 
_°©e_lock_Êags


	)

41 
	#STATE_LOCK
(Ë
_°©e_lock_Êags
 = 
	`•ö_lock_úq_ßve
(&
°©e_lock
)

	)

42 
	#STATE_UNLOCK
(Ë
	`•ö_u∆ock_úq_ª°‹e
(&
°©e_lock
, 
_°©e_lock_Êags
);

	)

46 
	$nk_ch¨_dev_öô
()

48 
	`INFO
("init\n");

50 
	}
}

52 
	$nk_ch¨_dev_deöô
()

54 
	`INFO
("deinit\n");

56 
	}
}

59 
nk_ch¨_dev
 * 
	$nk_ch¨_dev_ªgi°î
(*
«me
, 
uöt64_t
 
Êags
, 
nk_ch¨_dev_öt
 *
öãr
, *
°©e
)

61 
	`INFO
("ªgi°î devi˚ %s\n",
«me
);

62  (
nk_ch¨_dev
 *Ë
	`nk_dev_ªgi°î
(
«me
,
NK_DEV_CHAR
,
Êags
,(
nk_dev_öt
 *)
öãr
,
°©e
);

63 
	}
}

65 
	$nk_ch¨_dev_uƒegi°î
(
nk_ch¨_dev
 *
d
)

67 
	`INFO
("uƒegi°î devi˚ %s\n", 
d
->
dev
.
«me
);

68  
	`nk_dev_uƒegi°î
((
nk_dev
 *)
d
);

69 
	}
}

71 
nk_ch¨_dev
 * 
	$nk_ch¨_dev_föd
(*
«me
)

73 
	`DEBUG
("föd %s\n",
«me
);

74 
nk_dev
 *
d
 = 
	`nk_dev_föd
(
«me
);

75 i‡(
d
->
ty≥
!=
NK_DEV_CHAR
) {

76 
	`DEBUG
("%†nŸ found\n",
«me
);

79 
	`DEBUG
("%†found\n",
«me
);

80  (
nk_ch¨_dev
*Ë
d
;

82 
	}
}

84 
	$nk_ch¨_dev_gë_ch¨a˘îi°ics
(
nk_ch¨_dev
 *
dev
, 
nk_ch¨_dev_ch¨a˘îi°ics
 *
c
)

86 
nk_dev
 *
d
 = (nk_dev *)(&(
dev
->dev));

87 
nk_ch¨_dev_öt
 *
di
 = (nk_ch¨_dev_öà*)(
d
->
öãrÁ˚
);

89 
	`DEBUG
("gë ch¨a˘îi°ic†o‡%s\n",
d
->
«me
);

90  
di
->
	`gë_ch¨a˘îi°ics
(
d
->
°©e
,
c
);

91 
	}
}

94 
uöt64_t
 
	$nk_ch¨_dev_ªad
(
nk_ch¨_dev
 *
dev
,

95 
uöt64_t
 
cou¡
,

96 
uöt8_t
 *
de°
,

97 
nk_dev_ªque°_ty≥_t
 
ty≥
)

99 
nk_dev
 *
d
 = (nk_dev *)(&(
dev
->dev));

100 
nk_ch¨_dev_öt
 *
di
 = (nk_ch¨_dev_öà*)(
d
->
öãrÁ˚
);

101 
	`DEBUG
("ªad %†(cou¡=%lu,Åy≥=%lx)\n", 
d
->
«me
,
cou¡
,
ty≥
);

103 
ty≥
) {

104 
NK_DEV_REQ_BLOCKING
:

105 
NK_DEV_REQ_NONBLOCKING
:

106 i‡(!
di
->
ªad
) {

107 
	`DEBUG
("readÇotÖossible\n");

110 
uöt64_t
 
num
=0;

111 
îr
;

112 
num
<
cou¡
) {

113 
îr
 = 
di
->
	`ªad
(
d
->
°©e
,
de°
);

114 i‡(
îr
 < 0) {

116 } i‡(
îr
==0) {

117 i‡(
ty≥
==
NK_DEV_REQ_NONBLOCKING
) {

118  
num
;

120 
	`nk_dev_waô
((
nk_dev
 *)
dev
);

123 
num
++;

124 
de°
++;

127  
num
;

133 
	}
}

136 
uöt64_t
 
	$nk_ch¨_dev_wrôe
(
nk_ch¨_dev
 *
dev
,

137 
uöt64_t
 
cou¡
,

138 
uöt8_t
 *
§c
,

139 
nk_dev_ªque°_ty≥_t
 
ty≥
)

141 
nk_dev
 *
d
 = (nk_dev *)(&(
dev
->dev));

142 
nk_ch¨_dev_öt
 *
di
 = (nk_ch¨_dev_öà*)(
d
->
öãrÁ˚
);

143 
	`DEBUG
("wrôê%†(cou¡=%lu,Åy≥=%lx)\n", 
d
->
«me
,
cou¡
,
ty≥
);

144 
ty≥
) {

145 
NK_DEV_REQ_BLOCKING
:

146 
NK_DEV_REQ_NONBLOCKING
:

147 i‡(!
di
->
wrôe
) {

148 
	`DEBUG
("writeÇotÖossible\n");

151 
uöt64_t
 
num
=0;

152 
îr
;

153 
num
<
cou¡
) {

154 
îr
 = 
di
->
	`wrôe
(
d
->
°©e
,
§c
);

155 i‡(
îr
 < 0) {

157 } i‡(
îr
==0) {

158 i‡(
ty≥
==
NK_DEV_REQ_NONBLOCKING
) {

159  
num
;

161 
	`nk_dev_waô
((
nk_dev
 *)
dev
);

164 
num
++;

165 
§c
++;

168  
num
;

174 
	}
}

	@condvar.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/c⁄dv¨.h
>

25 
	~<«utûus/queue.h
>

26 
	~<«utûus/thªad.h
>

27 
	~<«utûus/î∫o.h
>

28 
	~<«utûus/úq.h
>

29 
	~<«utûus/˝u.h
>

30 
	~<«utûus/©omic.h
>

31 
	~<«utûus/mm.h
>

33 
	~<dev/≠ic.h
>

35 #i‚de‡
NAUT_CONFIG_DEBUG_SYNCH


36 #unde‡
DEBUG_PRINT


37 
	#DEBUG_PRINT
(
fmt
, 
¨gs
...)

	)

41 
	$nk_c⁄dv¨_öô
 (
nk_c⁄dv¨_t
 * 
c
)

43 
	`DEBUG_PRINT
("Condvar init\n");

45 
	`mem£t
(
c
, 0, (
nk_c⁄dv¨_t
));

47 
c
->
waô_queue
 = 
	`nk_thªad_queue_¸óã
();

48 i‡(!
c
->
waô_queue
) {

49 
	`ERROR_PRINT
("CouldÇot create wait queue for cond var\n");

50  -
EINVAL
;

53 
	`NK_LOCK_INIT
(&
c
->
lock
);

56 
	}
}

60 
	$nk_c⁄dv¨_de°roy
 (
nk_c⁄dv¨_t
 * 
c
)

62 
	`DEBUG_PRINT
("De°royög c⁄dv¨ (%p)\n", (*)
c
);

64 
	`NK_LOCK
(&
c
->
lock
);

65 i‡(
c
->
nwaôîs
 != 0) {

66 
	`NK_UNLOCK
(&
c
->
lock
);

67  -
EINVAL
;

70 
	`nk_thªad_queue_de°roy
(
c
->
waô_queue
);

71 
	`NK_UNLOCK
(&
c
->
lock
);

72 
	`mem£t
(
c
, 0, (
nk_c⁄dv¨_t
));

74 
	}
}

77 
uöt8_t


78 
	$nk_c⁄dv¨_waô
 (
nk_c⁄dv¨_t
 * 
c
, 
NK_LOCK_T
 * 
l
)

80 
	`NK_PROFILE_ENTRY
();

82 
	`DEBUG_PRINT
("C⁄dv¨ waô o¿(%pËmuãx=%p\n", (*)
c
, (*)
l
);

84 
	`NK_LOCK
(&
c
->
lock
);

87 
	`NK_UNLOCK
(
l
);

89 ++
c
->
nwaôîs
;

90 ++
c
->
maö_£q
;

92 
vÆ
;

93 
£q
;

94 
bc
 = *(vﬁ©ûê*)&(
c
->
bˇ°_£q
);

95 
vÆ
 = 
£q
 = 
c
->
wakeup_£q
;

99 
	`NK_UNLOCK
(&
c
->
lock
);

100 
	`nk_thªad_queue_¶ìp
(
c
->
waô_queue
);

101 
	`NK_LOCK
(&
c
->
lock
);

103 i‡(
bc
 !*(vﬁ©ûê*)&(
c
->
bˇ°_£q
)) {

104 
bcout
;

107 
vÆ
 = *(vﬁ©ûê*)&(
c
->
wakeup_£q
);

109 } 
vÆ
 =
£q
 || vÆ =*(vﬁ©ûê*)&(
c
->
wokí_£q
));

111 ++
c
->
wokí_£q
;

113 
bcout
:

115 --
c
->
nwaôîs
;

117 
	`NK_UNLOCK
(&
c
->
lock
);

120 
	`NK_LOCK
(
l
);

122 
	`NK_PROFILE_EXIT
();

125 
	}
}

129 
	$nk_c⁄dv¨_sig«l
 (
nk_c⁄dv¨_t
 * 
c
)

131 
	`NK_PROFILE_ENTRY
();

133 
	`NK_LOCK
(&
c
->
lock
);

136 i‡(
c
->
maö_£q
 > c->
wakeup_£q
) {

138 ++
c
->
wakeup_£q
;

140 
	`DEBUG_PRINT
("C⁄dv¨ sig«lög o¿(%p)\n", (*)
c
);

142 
	`nk_thªad_queue_wake_⁄e
(
c
->
waô_queue
);

146 
	`NK_UNLOCK
(&
c
->
lock
);

147 
	`NK_PROFILE_EXIT
();

149 
	}
}

153 
	$nk_c⁄dv¨_bˇ°
 (
nk_c⁄dv¨_t
 * 
c
)

155 
	`NK_PROFILE_ENTRY
();

157 
	`NK_LOCK
(&
c
->
lock
);

160 i‡(
c
->
maö_£q
 > c->
wakeup_£q
) {

162 
c
->
wokí_£q
 = c->
maö_£q
;

163 
c
->
wakeup_£q
 = c->
maö_£q
;

164 ++
c
->
bˇ°_£q
;

166 
	`NK_UNLOCK
(&
c
->
lock
);

168 
	`DEBUG_PRINT
("C⁄dv¨ brﬂdˇ°ög o¿(%pË(c‹e=%u)\n", (*)
c
, 
	`my_˝u_id
());

169 
	`nk_thªad_queue_wake_Æl
(
c
->
waô_queue
);

174 
	`NK_UNLOCK
(&
c
->
lock
);

175 
	`NK_PROFILE_EXIT
();

177 
	}
}

181 
	$ã°1
 (* 
ö
, ** 
out
)

183 
nk_c⁄dv¨_t
 * 
c
 = (nk_c⁄dv¨_t*)
ö
;

184 
NK_LOCK_T
 
lock
;

185 
	`NK_LOCK_INIT
(&
lock
);

186 
	`¥ötk
("test 1 is startingÅo wait on condvar\n");

187 
	`NK_LOCK
(&
lock
);

189 
	`nk_c⁄dv¨_waô
(
c
, &
lock
);

191 
	`NK_UNLOCK
(&
lock
);

193 
	`¥ötk
("test one is out of wait on condvar\n");

194 
	}
}

197 
	$ã°2
 (* 
ö
, ** 
out
)

199 
nk_c⁄dv¨_t
 * 
c
 = (nk_c⁄dv¨_t*)
ö
;

200 
NK_LOCK_T
 
lock
;

201 
	`NK_LOCK_INIT
(&
lock
);

202 
	`¥ötk
("test 2 is startingÅo wait on condvar\n");

203 
	`NK_LOCK
(&
lock
);

205 
	`nk_c⁄dv¨_waô
(
c
, &
lock
);

207 
	`NK_UNLOCK
(&
lock
);

209 
	`¥ötk
("test 2 is out of wait on condvar\n");

210 
	}
}

213 
	$ã°3
 (* 
ö
, ** 
out
)

215 
n
 = 1024*1024*100;

216 
nk_c⁄dv¨_t
 * 
c
 = (nk_c⁄dv¨_t*)
ö
;

217 
	`¥ötk
("test 3 signalling cond var\n");

218 
	`nk_c⁄dv¨_sig«l
(
c
);

219 
	`¥ötk
("test 3 signalled firstÅime\n");

221 --
n
){

222 
	`io_dñay
();

225 
	`¥ötk
("test 3 signalling 2ndÅime\n");

226 
	`nk_c⁄dv¨_sig«l
(
c
);

228 
	`nk_c⁄dv¨_de°roy
(
c
) < 0) {

229 
	`nk_yõld
();

231 
	`‰ì
(
c
);

232 
	}
}

236 
	$nk_c⁄dv¨_ã°
 ()

239 
nk_c⁄dv¨_t
 * 
c
 = 
	`mÆloc
((nk_condvar_t));

240 i‡(!
c
) {

241 
	`ERROR_PRINT
("CouldÇotállocate condvar\n");

245 
	`nk_c⁄dv¨_öô
(
c
);

247 
	`nk_thªad_°¨t
(
ã°1
, 
c
, 
NULL
, 1, 
TSTACK_DEFAULT
, NULL, 1);

248 
	`nk_thªad_°¨t
(
ã°2
, 
c
, 
NULL
, 1, 
TSTACK_DEFAULT
, NULL, 2);

249 
	`nk_thªad_°¨t
(
ã°3
, 
c
, 
NULL
, 1, 
TSTACK_DEFAULT
, NULL, 3);

251 
	}
}

	@cpu.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/˝u.h
>

25 
	~<«utûus/˝uid.h
>

26 
	~<«utûus/≥r˝u.h
>

27 
	~<«utûus/«ut_ty≥s.h
>

28 
	~<«utûus/«ut_°rög.h
>

29 
	~<«utûus/úq.h
>

30 
	~<dev/i8254.h
>

34 
	$gë_víd‹_°rög
 (
«me
[13])

36 
˝uid_ªt_t
 
ªt
;

37 
	`˝uid
(0, &
ªt
);

38 ((
uöt32_t
*)
«me
)[0] = 
ªt
.
b
;

39 ((
uöt32_t
*)
«me
)[1] = 
ªt
.
d
;

40 ((
uöt32_t
*)
«me
)[2] = 
ªt
.
c
;

41 
«me
[12] = '\0';

42  
ªt
.
a
;

43 
	}
}

46 
uöt8_t


47 
	$nk_is_amd
 ()

49 
«me
[13];

50 
	`gë_víd‹_°rög
(
«me
);

51  !
	`°∫cmp
(
«me
, "AuthenticAMD", 13);

52 
	}
}

54 
uöt8_t


55 
	$nk_is_öãl
 ()

57 
«me
[13];

58 
	`gë_víd‹_°rög
(
«me
);

59  !
	`°∫cmp
(
«me
, "GenuineIntel", 13);

60 
	}
}

70 
ul⁄g_t


71 
	$nk_dëe˘_˝u_‰eq
 (
uöt32_t
 
˝u
)

73 
uöt8_t
 
Êags
 = 
	`úq_dißbÀ_ßve
();

74 
ul⁄g_t
 
khz
 = 
	`i8254_ˇlib_tsc
();

75 i‡(
khz
 =
ULONG_MAX
) {

76 
	`ERROR_PRINT
("UnableÅo detect CPU frequency\n");

77 
out_îr
;

80 
	`úq_íabÀ_ª°‹e
(
Êags
);

81  
khz
;

83 
out_îr
:

84 
	`úq_íabÀ_ª°‹e
(
Êags
);

86 
	}
}

	@cpuid.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/˝uid.h
>

25 
	~<«utûus/«ut_°rög.h
>

28 
uöt8_t


29 
	$˝uid_gë_Ámûy
 ()

31 
uöt8_t
 
ba£_Ám
;

32 
uöt8_t
 
ext_Ám
;

33 
˝uid_ªt_t
 
ªt
;

34 
	`˝uid
(
CPUID_FEATURE_INFO
, &
ªt
);

35 
ba£_Ám
 = 
	`CPUID_GET_BASE_FAM
(
ªt
.
a
);

37 i‡(
ba£_Ám
 < 0xfu) {

38  
ba£_Ám
;

41 
ext_Ám
 = 
	`CPUID_GET_EXT_FAM
(
ªt
.
a
);

43  
ba£_Ám
 + 
ext_Ám
;

44 
	}
}

47 
uöt8_t


48 
	$˝uid_gë_modñ
 ()

50 
uöt8_t
 
ba£_Ám
;

51 
uöt8_t
 
ba£_mod
;

52 
uöt8_t
 
ext_mod
;

53 
˝uid_ªt_t
 
ªt
;

54 
	`˝uid
(
CPUID_FEATURE_INFO
, &
ªt
);

55 
ba£_Ám
 = 
	`CPUID_GET_BASE_FAM
(
ªt
.
a
);

56 
ba£_mod
 = 
	`CPUID_GET_BASE_MOD
(
ªt
.
a
);

58 i‡(
ba£_Ám
 < 0xfu) {

59  
ba£_mod
;

62 
ext_mod
 = 
	`CPUID_GET_EXT_MOD
(
ªt
.
a
);

64  
ext_mod
 << 4 | 
ba£_mod
;

65 
	}
}

68 
uöt8_t


69 
	$˝uid_gë_°ï
 ()

71 
˝uid_ªt_t
 
ªt
;

72 
	`˝uid
(
CPUID_FEATURE_INFO
, &
ªt
);

73  
	`CPUID_GET_PROC_STEP
(
ªt
.
a
);

74 
	}
}

77 
uöt8_t


78 
	$˝uid_Àaf_max
 ()

80 
˝uid_ªt_t
 
ªt
;

81 
	`˝uid
(0, &
ªt
);

82  
ªt
.
a
 & 0xff;

83 
	}
}

87 
	$dëe˘_˝u
 ()

89 
˝uid_ªt_t
 
id
;

90 
bøndög
[16];

92 
	`˝uid
(
CPUID_LEAF_BASIC_INFO0
, &
id
);

94 
	`mem˝y
(&
bøndög
[0], &
id
.
b
, 4);

95 
	`mem˝y
(&
bøndög
[4], &
id
.
d
, 4);

96 
	`mem˝y
(&
bøndög
[8], &
id
.
c
, 4);

97 
	`mem£t
(&
bøndög
[12], 0, 4);

99 
	`¥ötk
("Dëe˘ed %†Pro˚ss‹\n", 
bøndög
);

100 
	}
}

	@dev.c

24 
	~<«utûus/«utûus.h
>

25 
	~<«utûus/•ölock.h
>

26 
	~<«utûus/dev.h
>

27 
	~<«utûus/thªad.h
>

29 #i‚de‡
NAUT_CONFIG_DEBUG_DEV


30 #unde‡
DEBUG_PRINT


31 
	#DEBUG_PRINT
(
fmt
, 
¨gs
...)

	)

34 
	#ERROR
(
fmt
, 
¨gs
...Ë
	`ERROR_PRINT
("dev: " fmt, ##¨gs)

	)

35 
	#DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("dev: " fmt, ##¨gs)

	)

36 
	#INFO
(
fmt
, 
¨gs
...Ë
	`INFO_PRINT
("dev: " fmt, ##¨gs)

	)

38 
•ölock_t
 
	g°©e_lock
;

40 
	#STATE_LOCK_CONF
 
uöt8_t
 
_°©e_lock_Êags


	)

41 
	#STATE_LOCK
(Ë
_°©e_lock_Êags
 = 
	`•ö_lock_úq_ßve
(&
°©e_lock
)

	)

42 
	#STATE_UNLOCK
(Ë
	`•ö_u∆ock_úq_ª°‹e
(&
°©e_lock
, 
_°©e_lock_Êags
);

	)

44 
li°_hód
 
	gdev_li°
;

47 
	$nk_dev_öô
()

49 
	`INIT_LIST_HEAD
(&
dev_li°
);

50 
	`•ölock_öô
(&
°©e_lock
);

51 
	`INFO
("devices inited\n");

53 
	}
}

55 
	$nk_dev_deöô
()

57 i‡(!
	`li°_em±y
(&
dev_li°
)) {

58 
	`ERROR
("Extant devices on deinit\n");

61 
	`•ölock_deöô
(&
°©e_lock
);

62 
	`INFO
("device deinit\n");

64 
	}
}

67 
nk_dev
 *
	$nk_dev_ªgi°î
(*
«me
, 
nk_dev_ty≥_t
 
ty≥
, 
uöt64_t
 
Êags
, 
nk_dev_öt
 *
öãr
, *
°©e
)

69 
STATE_LOCK_CONF
;

70 
nk_dev
 *
d
 = 
	`mÆloc
((*d));

72 i‡(!
d
) {

73 
	`ERROR
("FailedÅoállocate device\n");

77 
	`mem£t
(
d
,0,(*d));

79 
d
->
waôög_thªads
 = 
	`nk_thªad_queue_¸óã
();

81 i‡(!
d
->
waôög_thªads
) {

82 
	`ERROR
("FailedÅoállocate wait queue\n");

83 
	`‰ì
(
d
);

87 
	`°∫˝y
(
d
->
«me
,«me,
DEV_NAME_LEN
);

88 
d
->
ty≥
 =Åype;

89 
d
->
Êags
 = flags;

90 
d
->
°©e
 = state;

91 
d
->
öãrÁ˚
 = 
öãr
;

93 
	`STATE_LOCK
();

94 
	`li°_add
(&
d
->
dev_li°_node
,&
dev_li°
);

95 
	`STATE_UNLOCK
();

97 
	`INFO
("Added devi˚ wôhÇamê%s,Åy≥ %lu, fœg†0x%lx\n", 
d
->
«me
, d->
ty≥
,d->
Êags
);

99  
d
;

100 
	}
}

102 
	$nk_dev_uƒegi°î
(
nk_dev
 *
d
)

104 
STATE_LOCK_CONF
;

106 
	`STATE_LOCK
();

107 
	`li°_dñ
(&
d
->
dev_li°_node
);

108 
	`STATE_UNLOCK
();

110 
	`nk_thªad_queue_wake_Æl
(
d
->
waôög_thªads
);

111 
	`nk_thªad_queue_de°roy
(
d
->
waôög_thªads
);

112 
	`INFO
("Uƒegi°îed devi˚ %s\n",
d
->
«me
);

113 
	`‰ì
(
d
);

115 
	}
}

117 
nk_dev
 *
	$nk_dev_föd
(*
«me
)

119 
li°_hód
 *
cur
;

120 
nk_dev
 *
èrgë
=0;

121 
STATE_LOCK_CONF
;

122 
	`STATE_LOCK
();

123 
	`li°_f‹_óch
(
cur
,&
dev_li°
) {

124 i‡(!
	`°∫ˇ£cmp
(
	`li°_íåy
(
cur
,
nk_dev
,
dev_li°_node
)->
«me
,«me,
DEV_NAME_LEN
)) {

125 
èrgë
 = 
	`li°_íåy
(
cur
,
nk_dev
, 
dev_li°_node
);

129 
	`STATE_UNLOCK
();

130  
èrgë
;

131 
	}
}

134 
	$nk_dev_waô
(
nk_dev
 *
d
)

136 i‡(
	`gë_˝u
()->
öãºu±_√°ög_Àvñ
) {

143 
	`nk_thªad_queue_¶ìp_exãnded
(
d
->
waôög_thªads
, 0, 0);

145 
	}
}

147 
	$nk_dev_sig«l
(
nk_dev
 *
d
)

149 
	`nk_thªad_queue_wake_Æl
(
d
->
waôög_thªads
);

150 
	}
}

152 
	$nk_dev_dump_devi˚s
()

154 
li°_hód
 *
cur
;

155 
STATE_LOCK_CONF
;

156 
	`STATE_LOCK
();

157 
	`li°_f‹_óch
(
cur
,&
dev_li°
) {

158 
nk_dev
 *
d
 = 
	`li°_íåy
(
cur
,nk_dev, 
dev_li°_node
);

159 
	`nk_vc_¥ötf
("%s: %s flags=0x%lx interface=%p state=%p\n",

160 
d
->
«me
,

161 
d
->
ty≥
==
NK_DEV_GENERIC
 ? "generic" :

162 
d
->
ty≥
==
NK_DEV_BUS
 ? "bus" :

163 
d
->
ty≥
==
NK_DEV_TIMER
 ? "timer" :

164 
d
->
ty≥
==
NK_DEV_INTR
 ? "interrupt" :

165 
d
->
ty≥
==
NK_DEV_CHAR
 ? "char" :

166 
d
->
ty≥
==
NK_DEV_BLK
 ? "block" :

167 
d
->
ty≥
==
NK_DEV_NET
 ? "net" : "unknown",

168 
d
->
Êags
,

169 
d
->
öãrÁ˚
,

170 
d
->
°©e
);

173 
	`STATE_UNLOCK
();

174 
	}
}

	@doprnt.c

29 
	~<°d¨g.h
>

30 
	~<«utûus/«ut_°rög.h
>

31 
	~<«utûus/«ut_ty≥s.h
>

32 
	~<«utûus/d›∫t.h
>

144 
	#Ctod
(
c
Ë((cË- '0')

	)

146 
	#MAXBUF
 ((Ë* 8Ë

	)

148 
	gdigs
[] = "0123456789abcdef";

151 
¥öäum
(
u
,

152 
ba£
,

153 (*
putc
)(* 
¨g
, 
c
),

154 * 
putc_¨g
)

156 
buf
[
MAXBUF
];

157 * 
p
 = &
buf
[
MAXBUF
-1];

160 *
p
-- = 
digs
[
u
 % 
ba£
];

161 
u
 /
ba£
;

162 } 
u
 != 0);

164 ++
p
 !&
buf
[
MAXBUF
])

165 (*
putc
)(
putc_¨g
, *
p
);

166 
	}
}

169 
¥öäum_16
 (
u
,

170 (*
putc
)(* 
¨g
, 
c
),

171 * 
putc_¨g
)

173 
buf
[8];

174 * 
p
 = &
buf
[7];

175 
i
;

177 
i
=0; i<8;i++){

178 *
p
-- = 
digs
[
u
 & 0x0f];

179 
u
 >>= 4;

182 
i
=0;i<8;i++){

183 (*
putc
)(
putc_¨g
, 
buf
[
i
]);

185 
	}
}

187 
boﬁ_t
 
	g_d›∫t_åunˇãs
 = 
FALSE
;

189 
_d›∫t
 (c⁄° * 
fmt
,

190 
va_li°
 
¨gs
,

191 
ødix
,

192 (*
putc
)(* 
¨g
, 
c
),

193 * 
putc_¨g
)

195 
Àngth
;

196 
¥ec
;

197 
boﬁ_t
 
œdju°
;

198 
∑dc
;

199 
n
, 
m
;

200 
u
;

201 
∂us_sign
;

202 
sign_ch¨
;

203 
boﬁ_t
 
Ætfmt
, 
åunˇã
;

204 
ba£
;

205 
c
;

206 
l⁄g›t
;

208 *
fmt
 != '\0') {

209 i‡(*
fmt
 != '%') {

210 (*
putc
)(
putc_¨g
, *
fmt
++);

214 
fmt
++;

216 
Àngth
 = 0;

217 
¥ec
 = -1;

218 
œdju°
 = 
FALSE
;

219 
∑dc
 = ' ';

220 
∂us_sign
 = 0;

221 
sign_ch¨
 = 0;

222 
Ætfmt
 = 
FALSE
;

223 
l⁄g›t
 = 0;

225 
TRUE
) {

226 i‡(*
fmt
 == '#') {

227 
Ætfmt
 = 
TRUE
;

228 
fmt
++;

230 i‡(*
fmt
 == '-') {

231 
œdju°
 = 
TRUE
;

232 
fmt
++;

234 i‡(*
fmt
 == '+') {

235 
∂us_sign
 = '+';

236 
fmt
++;

238 i‡(*
fmt
 == ' ') {

239 i‡(
∂us_sign
 == 0)

240 
∂us_sign
 = ' ';

241 
fmt
++;

247 i‡(*
fmt
 == '0') {

248 
∑dc
 = '0';

249 
fmt
++;

252 i‡(
	`isdigô
(*
fmt
)) {

253 
	`isdigô
(*
fmt
))

254 
Àngth
 = 10 *Üígth + 
	`Ctod
(*
fmt
++);

256 i‡(*
fmt
 == '*') {

257 
Àngth
 = 
	`va_¨g
(
¨gs
, );

258 
fmt
++;

259 i‡(
Àngth
 < 0) {

260 
œdju°
 = !ladjust;

261 
Àngth
 = -length;

265 i‡(*
fmt
 == '.') {

266 
fmt
++;

267 i‡(
	`isdigô
(*
fmt
)) {

268 
¥ec
 = 0;

269 
	`isdigô
(*
fmt
))

270 
¥ec
 = 10 *Öª¯+ 
	`Ctod
(*
fmt
++);

272 i‡(*
fmt
 == '*') {

273 
¥ec
 = 
	`va_¨g
(
¨gs
, );

274 
fmt
++;

278 *
fmt
 == 'l'){

279 
l⁄g›t
++;

280 
fmt
++;

283 
åunˇã
 = 
FALSE
;

285 *
fmt
) {

289 *
p
;

290 
boﬁ_t
 
™y
;

291 
i
;

293 
u
 = 
	`va_¨g
(
¨gs
, );

294 
p
 = 
	`va_¨g
(
¨gs
, *);

295 
ba£
 = *
p
++;

296 
	`¥öäum
(
u
, 
ba£
, 
putc
, 
putc_¨g
);

298 i‡(
u
 == 0)

301 
™y
 = 
FALSE
;

302 (
i
 = *
p
++) != 0) {

304 i‡(*
p
 <= 32) {

308 
j
;

309 i‡(
™y
)

310 (*
putc
)(
putc_¨g
, ',');

312 (*
putc
)(
putc_¨g
, '<');

313 
™y
 = 
TRUE
;

315 
j
 = *
p
++;

316 ; (
c
 = *
p
) > 32;Ö++)

317 (*
putc
)(
putc_¨g
, 
c
);

318 
	`¥öäum
(()–(
u
>>(
j
-1)Ë& ((2<<(
i
-j))-1)),

319 
ba£
, 
putc
, 
putc_¨g
);

321 i‡(
u
 & (1<<(
i
-1))) {

322 i‡(
™y
)

323 (*
putc
)(
putc_¨g
, ',');

325 (*
putc
)(
putc_¨g
, '<');

326 
™y
 = 
TRUE
;

328 ; (
c
 = *
p
) > 32;Ö++)

329 (*
putc
)(
putc_¨g
, 
c
);

332 ; *
p
 > 32;Ö++)

336 i‡(
™y
)

337 (*
putc
)(
putc_¨g
, '>');

342 
c
 = 
	`va_¨g
(
¨gs
, );

343 (*
putc
)(
putc_¨g
, 
c
);

349 
vîsi⁄_low
:10;

350 
…hªad
:7;

351 
èsk
:11;

352 
vîsi⁄_high
:4;

353 
sôe
:17;

354 
chõf
:11;

355 
√°
:4;

356 } 
	ttid_t
;

358 
high
;

359 
low
;

360 } 
	tlh_t
;

361 
	utid_t
 {

362 
tid_t
 
id
;

363 
lh_t
 
lh
;

364 } 
tid
;

366 
tid
 = 
	`va_¨g
(
¨gs
, 
tid_t
);

368 if(
l⁄g›t
){

370 if(
Ætfmt
){

371 
n
 = 19;

373 
n
 = 17;

376 i‡(
Àngth
 > 0 && !
œdju°
) {

377 
n
 < 
Àngth
){

378 
	`putc
(
putc_¨g
, ' ');

379 
n
++;

382 if(
Ætfmt
Ë
	`putc
(
putc_¨g
, '[');

383 
	`¥öäum_16
–
tid
.
lh
.
high
, 
putc
, 
putc_¨g
);

385 
	`putc
(
putc_¨g
, ':');

387 
	`¥öäum_16
–
tid
.
lh
.
low
, 
putc
, 
putc_¨g
);

389 if(
Ætfmt
Ë
	`putc
(
putc_¨g
, ']');

391 if(
Àngth
 > 0 && 
œdju°
) {

392 
n
 < 
Àngth
){

393 
	`putc
(
putc_¨g
, ' ');

394 
n
++;

400 if(
Ætfmt
){

401 
n
 = 4;

403 
n
 = 2;

406 
m
 = 1;

408 
m
 +
tid
.
id
.
…hªad
 >= 0x10;

409 
n
 +
tid
.
id
.
èsk
 >= 0x10;

410 
n
 +
tid
.
id
.
èsk
 >= 0x100;

412 i‡(
Àngth
 > 0 && !
œdju°
 && 
∑dc
 == ' ') {

413 
n
 + 2 < 
Àngth
) {

414 (*
putc
)(
putc_¨g
, ' ');

415 
n
++;

419 if(
Ætfmt
Ë(*
putc
)(
putc_¨g
, '[');

421 if–
Àngth
 > 0 && !
œdju°
 && 
∑dc
 == '0') {

422 
n
 + 2 < 
Àngth
) {

423 
	`putc
(
putc_¨g
, '0');

424 
n
++;

428 
	`¥öäum
(
tid
.
id
.
èsk
, 16, 
putc
, 
putc_¨g
);

429 
	`putc
(
putc_¨g
, '.');

431 if(
Àngth
 > 0 && !
œdju°
) {

432 
n
+
m
 < 
Àngth
){

433 
	`putc
(
putc_¨g
, 
∑dc
);

434 
n
++;

437 
	`¥öäum
(
tid
.
id
.
…hªad
, 16, 
putc
, 
putc_¨g
);

439 if(
Ætfmt
Ë
	`putc
(
putc_¨g
, ']');

441 i‡(
n
 + 
m
 < 
Àngth
 && 
œdju°
) {

442 
n
 + 
m
 < 
Àngth
) {

443 (*
putc
)(
putc_¨g
, ' ');

444 
n
++;

454 *
p
;

455 *
p2
;

457 i‡(
¥ec
 == -1)

458 
¥ec
 = 0x7fffffff;

460 
p
 = 
	`va_¨g
(
¨gs
, *);

462 i‡(
p
 == (*)0)

463 
p
 = "";

465 i‡(
Àngth
 > 0 && !
œdju°
) {

466 
n
 = 0;

467 
p2
 = 
p
;

469 ; *
p
 !'\0' && 
n
 < 
¥ec
;Ö++)

470 
n
++;

472 
p
 = 
p2
;

474 
n
 < 
Àngth
) {

475 (*
putc
)(
putc_¨g
, ' ');

476 
n
++;

480 
n
 = 0;

482 *
p
 != '\0') {

483 i‡(++
n
 > 
¥ec
)

486 (*
putc
)(
putc_¨g
, *
p
++);

489 i‡(
n
 < 
Àngth
 && 
œdju°
) {

490 
n
 < 
Àngth
) {

491 (*
putc
)(
putc_¨g
, ' ');

492 
n
++;

501 
åunˇã
 = 
_d›∫t_åunˇãs
;

503 
ba£
 = 8;

504 
¥öt_unsig√d
;

507 
åunˇã
 = 
_d›∫t_åunˇãs
;

509 
ba£
 = 10;

510 
¥öt_sig√d
;

513 
åunˇã
 = 
_d›∫t_åunˇãs
;

515 
ba£
 = 10;

516 
¥öt_unsig√d
;

519 
∑dc
 = '0';

520 
Àngth
 = 8;

526 (*
putc
)(
putc_¨g
, '0');

527 (*
putc
)(
putc_¨g
, 'x');

529 
åunˇã
 = 
_d›∫t_åunˇãs
;

531 
ba£
 = 16;

532 
¥öt_unsig√d
;

535 
åunˇã
 = 
_d›∫t_åunˇãs
;

537 
ba£
 = 16;

538 
¥öt_sig√d
;

541 
åunˇã
 = 
_d›∫t_åunˇãs
;

543 
ba£
 = 
ødix
;

544 
¥öt_sig√d
;

547 
åunˇã
 = 
_d›∫t_åunˇãs
;

549 
ba£
 = 
ødix
;

550 
¥öt_unsig√d
;

552 
¥öt_sig√d
:

553 i‡(
l⁄g›t
>1)

554 
n
 = 
	`va_¨g
(
¨gs
, );

556 
n
 = 
	`va_¨g
(
¨gs
, );

557 i‡(
n
 >= 0) {

558 
u
 = 
n
;

559 
sign_ch¨
 = 
∂us_sign
;

562 
u
 = -
n
;

563 
sign_ch¨
 = '-';

565 
¥öt_num
;

567 
¥öt_unsig√d
:

568 i‡(
l⁄g›t
>1)

569 
u
 = 
	`va_¨g
(
¨gs
, );

571 
u
 = 
	`va_¨g
(
¨gs
, );

572 
¥öt_num
;

574 
¥öt_num
:

576 
buf
[
MAXBUF
];

577 * 
p
 = &
buf
[
MAXBUF
-1];

578 
digôs
[] = "0123456789abcdef";

579 *
¥efix
 = 0;

581 i‡(
åunˇã
Ë
u
 = ()(()(u));

584 i‡(!
ba£
) {

585 
ba£
 = 10;

588 i‡(
u
 !0 && 
Ætfmt
) {

589 i‡(
ba£
 == 8)

590 
¥efix
 = "0";

591 i‡(
ba£
 == 16)

592 
¥efix
 = "0x";

596 *
p
-- = 
digôs
[
u
 % 
ba£
];

597 
u
 /
ba£
;

598 } 
u
 != 0);

600 
Àngth
 -(&
buf
[
MAXBUF
-1] - 
p
);

601 i‡(
sign_ch¨
)

602 
Àngth
--;

603 i‡(
¥efix
)

604 
Àngth
 -
	`°æí
(
¥efix
);

606 i‡(
∑dc
 =' ' && !
œdju°
) {

608 --
Àngth
 >= 0)

609 (*
putc
)(
putc_¨g
, ' ');

611 i‡(
sign_ch¨
)

612 (*
putc
)(
putc_¨g
, 
sign_ch¨
);

613 i‡(
¥efix
)

614 *
¥efix
)

615 (*
putc
)(
putc_¨g
, *
¥efix
++);

616 i‡(
∑dc
 == '0') {

618 --
Àngth
 >= 0)

619 (*
putc
)(
putc_¨g
, '0');

621 ++
p
 !&
buf
[
MAXBUF
])

622 (*
putc
)(
putc_¨g
, *
p
);

624 i‡(
œdju°
) {

625 --
Àngth
 >= 0)

626 (*
putc
)(
putc_¨g
, ' ');

632 
fmt
--;

636 (*
putc
)(
putc_¨g
, *
fmt
);

638 
fmt
++;

640 
	}
}

	@fmtout.c

34 
	~<°d¨g.h
>

35 
	~<°ddef.h
>

36 
	~<«utûus/«ut_°rög.h
>

37 
	~<«utûus/fmtout.h
>

39 
	#CHAR_BIT
 8

	)

44 
	tötmax_t
;

45 
	tuötmax_t
;

46 
	tuöçå_t
;

49 
	#ASSERT
(
exp
) \

50 dÿ{ i‡(!(
exp
)Ë1); } 0)

	)

52 
	eÊags
 {

53 
	mFL_ZERO
 = 0x01,

54 
	mFL_MINUS
 = 0x02,

55 
	mFL_PLUS
 = 0x04,

56 
	mFL_TICK
 = 0x08,

57 
	mFL_SPACE
 = 0x10,

58 
	mFL_HASH
 = 0x20,

59 
	mFL_SIGNED
 = 0x40,

60 
	mFL_UPPER
 = 0x80

64 
	eønks
 {

65 
	mønk_ch¨
 = -2,

66 
	mønk_sh‹t
 = -1,

67 
	mønk_öt
 = 0,

68 
	mønk_l⁄g
 = 1,

70 
	mønk_l⁄gl⁄g
 = 2,

74 
	#MIN_RANK
 
ønk_ch¨


	)

75 
	#MAX_RANK
 
ønk_l⁄g


	)

77 
	#INTMAX_RANK
 
ønk_l⁄g


	)

78 
	#SIZE_T_RANK
 
ønk_l⁄g


	)

79 
	#PTRDIFF_T_RANK
 
ønk_l⁄g


	)

82 
	#EMIT
(
x
Ëdÿ{ (
q
)->
	`Emô
((q), (x)); } 0)

	)

95 
	#NDIGITS_MAX
 43

	)

97 
size_t


98 
	$f‹m©_öt
(
Ouçut_Sök
 *
q
, 
uötmax_t
 
vÆ
, 
Êags
 flags,

99 
ba£
, 
width
, 
¥ec
)

101 *
qq
;

102 
size_t
 
o
 = 0, 
oo
;

103 c⁄° 
lcdigôs
[] = "0123456789abcdef";

104 c⁄° 
ucdigôs
[] = "0123456789ABCDEF";

105 c⁄° *
digôs
;

106 
uötmax_t
 
tmpvÆ
;

107 
möus
 = 0;

108 
ndigôs
 = 0, 
nch¨s
;

109 
tickskù
, 
b4tick
;

110 
digô_buf„r
[
NDIGITS_MAX
];

111 
size_t
 
ndigôs_ßve
;

114 
digôs
 = (
Êags
 & 
FL_UPPER
Ë? 
ucdigôs
 : 
lcdigôs
;

117 i‡–
Êags
 & 
FL_SIGNED
 && (
ötmax_t
)
vÆ
 < 0 ) {

118 
möus
 = 1;

119 
vÆ
 = (
uötmax_t
)(-(
ötmax_t
)val);

123 
tmpvÆ
 = 
vÆ
;

124  
tmpvÆ
 ) {

125 
tmpvÆ
 /
ba£
;

126 
ndigôs
++;

131 i‡–
Êags
 & 
FL_HASH
 && 
ba£
 == 8 ) {

132 i‡–
¥ec
 < 
ndigôs
+1 )

133 
¥ec
 = 
ndigôs
+1;

136 i‡–
ndigôs
 < 
¥ec
 ) {

137 
ndigôs
 = 
¥ec
;

138 } i‡–
vÆ
 == 0 ) {

139 
ndigôs
 = 1;

143 i‡–
Êags
 & 
FL_TICK
 ) {

144 
tickskù
 = (
ba£
 == 16) ? 4 : 3;

146 
tickskù
 = 
ndigôs
;

150 
ndigôs
 +“digôs-1)/
tickskù
;

153 
nch¨s
 = 
ndigôs
;

155 i‡–
möus
 || (
Êags
 & (
FL_PLUS
|
FL_SPACE
)) )

156 
nch¨s
++;

157 i‡–(
Êags
 & 
FL_HASH
Ë&& 
ba£
 == 16 ) {

158 
nch¨s
 += 2;

162 i‡–!(
Êags
 & (
FL_MINUS
|
FL_ZERO
)Ë&& 
width
 > 
nch¨s
 ) {

163  
width
 > 
nch¨s
 ) {

164 
	`EMIT
(' ');

165 
width
--;

170 i‡–
möus
 )

171 
	`EMIT
('-');

172 i‡–
Êags
 & 
FL_PLUS
 )

173 
	`EMIT
('+');

174 i‡–
Êags
 & 
FL_SPACE
 )

175 
	`EMIT
(' ');

177 i‡–(
Êags
 & 
FL_HASH
Ë&& 
ba£
 == 16 ) {

178 
	`EMIT
('0');

179 
	`EMIT
((
Êags
 & 
FL_UPPER
) ? 'X' : 'x');

183 i‡–(
Êags
 & (
FL_MINUS
|
FL_ZERO
)Ë=FL_ZERO && 
width
 > 
ndigôs
 ) {

184  
width
 > 
nch¨s
 ) {

185 
	`EMIT
('0');

186 
width
--;

191 
	`ASSERT
(
ndigôs
 <
NDIGITS_MAX
);

192 
ndigôs_ßve
 = 
ndigôs
;

193 
qq
 = 
digô_buf„r
 + 
ndigôs
;

194 
oo
 = 
o
;

197 
b4tick
 = 
tickskù
;

198  
ndigôs
 > 0 ) {

199 i‡–!
b4tick
-- ) {

200 
qq
--; 
oo
--; 
ndigôs
--;

201 *
qq
 = '_';

202 
b4tick
 = 
tickskù
-1;

204 
qq
--; 
oo
--; 
ndigôs
--;

205 *
qq
 = 
digôs
[
vÆ
%
ba£
];

206 
vÆ
 /
ba£
;

210 
oo
 = 0; oÿ< 
ndigôs_ßve
; ++oo)

211 
	`EMIT
(
digô_buf„r
[
oo
]);

214  (
Êags
 & 
FL_MINUS
Ë&& 
width
 > 
nch¨s
 ) {

215 
	`EMIT
(' ');

216 
width
--;

219  
o
;

220 
	}
}

229 
	$F‹m©_Ouçut
(
Ouçut_Sök
 *
q
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

231 c⁄° *
p
 = 
f‹m©
;

232 
ch
;

233 
size_t
 
o
 = 0;

234 
uötmax_t
 
vÆ
 = 0;

235 
ønk
 = 
ønk_öt
;

236 
width
 = 0;

237 
¥ec
 = -1;

238 
ba£
;

239 
size_t
 
sz
;

240 
Êags
 flags = 0;

242 
°_n‹mÆ
,

243 
°_Êags
,

244 
°_width
,

245 
°_¥ec
,

246 
°_modifõrs


247 } 
°©e
 = 
°_n‹mÆ
;

248 c⁄° *
ßrg
;

249 
ˇrg
;

250 
¶í
;

252  (
ch
 = *
p
++) ) {

253  
°©e
 ) {

254 
°_n‹mÆ
:

255 i‡–
ch
 == '%' ) {

256 
°©e
 = 
°_Êags
;

257 
Êags
 = 0; 
ønk
 = 
ønk_öt
; 
width
 = 0; 
¥ec
 = -1;

259 
	`EMIT
(
ch
);

263 
°_Êags
:

264  
ch
 ) {

266 
Êags
 |
FL_MINUS
;

269 
Êags
 |
FL_PLUS
;

272 
Êags
 |
FL_TICK
;

275 
Êags
 |
FL_SPACE
;

278 
Êags
 |
FL_HASH
;

281 
Êags
 |
FL_ZERO
;

284 
°©e
 = 
°_width
;

285 
p
--;

290 
°_width
:

291 i‡–
ch
 >= '0' && ch <= '9' ) {

292 
width
 = width*10+(
ch
-'0');

293 } i‡–
ch
 == '*' ) {

294 
width
 = 
	`va_¨g
(
≠
, );

295 i‡–
width
 < 0 ) {

296 
width
 = -width;

297 
Êags
 |
FL_MINUS
;

299 } i‡–
ch
 == '.' ) {

300 
¥ec
 = 0;

301 
°©e
 = 
°_¥ec
;

303 
°©e
 = 
°_modifõrs
;

304 
p
--;

308 
°_¥ec
:

309 i‡–
ch
 >= '0' && ch <= '9' ) {

310 
¥ec
 =Öªc*10+(
ch
-'0');

311 } i‡–
ch
 == '*' ) {

312 
¥ec
 = 
	`va_¨g
(
≠
, );

313 i‡–
¥ec
 < 0 )

314 
¥ec
 = -1;

316 
°©e
 = 
°_modifõrs
;

317 
p
--;

321 
°_modifõrs
:

322  
ch
 ) {

325 
ønk
--;

328 
ønk
++;

331 
ønk
 = 
INTMAX_RANK
;

334 
ønk
 = 
SIZE_T_RANK
;

337 
ønk
 = 
PTRDIFF_T_RANK
;

341 
ønk
 += 2;

345 
°©e
 = 
°_n‹mÆ
;

346 i‡–
ønk
 < 
MIN_RANK
 )

347 
ønk
 = 
MIN_RANK
;

348 i‡–
ønk
 > 
MAX_RANK
 )

349 
ønk
 = 
MAX_RANK
;

351  
ch
 ) {

353 
Êags
 |
FL_UPPER
;

356 
ba£
 = 16;

357 
¥ec
 = (
CHAR_BIT
*(*)+3)/4;

358 
Êags
 |
FL_HASH
;

359 
vÆ
 = (
uötmax_t
)(
uöçå_t
)
	`va_¨g
(
≠
, *);

360 
is_öãgî
;

364 
ba£
 = 10;

365 
Êags
 |
FL_SIGNED
;

366 
ønk
) {

367 
ønk_ch¨
:

369 
vÆ
 = (
uötmax_t
)(
ötmax_t
)(sig√d )
	`va_¨g
(
≠
, signed );

371 
ønk_sh‹t
:

372 
vÆ
 = (
uötmax_t
)(
ötmax_t
)(sig√d )
	`va_¨g
(
≠
, signed );

374 
ønk_öt
:

375 
vÆ
 = (
uötmax_t
)(
ötmax_t
)
	`va_¨g
(
≠
, signed );

377 
ønk_l⁄g
:

378 
vÆ
 = (
uötmax_t
)(
ötmax_t
)
	`va_¨g
(
≠
, signed );

381 
ønk_l⁄gl⁄g
:

382 
vÆ
 = (
uötmax_t
)(
ötmax_t
)
	`va_¨g
(
≠
, signed );

386 
is_öãgî
;

388 
ba£
 = 8;

389 
is_unsig√d
;

391 
ba£
 = 10;

392 
is_unsig√d
;

394 
Êags
 |
FL_UPPER
;

397 
ba£
 = 16;

398 
is_unsig√d
;

400 
is_unsig√d
:

401 
ønk
) {

402 
ønk_ch¨
:

403 
vÆ
 = (
uötmax_t
)()
	`va_¨g
(
≠
, );

405 
ønk_sh‹t
:

406 
vÆ
 = (
uötmax_t
)()
	`va_¨g
(
≠
, );

408 
ønk_öt
:

409 
vÆ
 = (
uötmax_t
)
	`va_¨g
(
≠
, );

411 
ønk_l⁄g
:

412 
vÆ
 = (
uötmax_t
)
	`va_¨g
(
≠
, );

415 
ønk_l⁄gl⁄g
:

416 
vÆ
 = (
uötmax_t
)
	`va_¨g
(
≠
, );

422 
is_öãgî
:

423 
sz
 = 
	`f‹m©_öt
(
q
, 
vÆ
, 
Êags
, 
ba£
, 
width
, 
¥ec
);

424 
o
 +
sz
;

428 
ˇrg
 = ()
	`va_¨g
(
≠
, );

429 
ßrg
 = &
ˇrg
;

430 
¶í
 = 1;

431 
is_°rög
;

433 
ßrg
 = 
	`va_¨g
(
≠
, const *);

434 
ßrg
 = sarg ? sarg : "(null)";

435 
¶í
 = 
	`°æí
(
ßrg
);

436 
is_°rög
;

438 
is_°rög
:

440 
sch
;

441 
i
;

443 i‡–
¥ec
 !-1 && 
¶í
 >Örec )

444 
¶í
 = 
¥ec
;

446 i‡–
width
 > 
¶í
 && !(
Êags
 & 
FL_MINUS
) ) {

447 
∑d
 = (
Êags
 & 
FL_ZERO
) ? '0' : ' ';

448  
width
 > 
¶í
 ) {

449 
	`EMIT
(
∑d
);

450 
width
--;

453  
i
 = 
¶í
 ; i ; i-- ) {

454 
sch
 = *
ßrg
++;

455 
	`EMIT
(
sch
);

457 i‡–
width
 > 
¶í
 && (
Êags
 & 
FL_MINUS
) ) {

458  
width
 > 
¶í
 ) {

459 
	`EMIT
(' ');

460 
width
--;

468 
ønk
) {

469 
ønk_ch¨
:

470 *
	`va_¨g
(
≠
, sig√d *Ë
o
;

472 
ønk_sh‹t
:

473 *
	`va_¨g
(
≠
, sig√d *Ë
o
;

475 
ønk_öt
:

476 *
	`va_¨g
(
≠
, sig√d *Ë
o
;

478 
ønk_l⁄g
:

479 *
	`va_¨g
(
≠
, sig√d *Ë
o
;

482 
ønk_l⁄gl⁄g
:

483 *
	`va_¨g
(
≠
, sig√d *Ë
o
;

491 
	`EMIT
(
ch
);

500 i‡–
o
<
n
 )

501 *
q
 = '\0';

502 i‡–
n
>0 )

503 
buf„r
[
n
-1] = '\0';

505 
q
->
	`Föish
(q);

507  
o
;

508 
	}
}

	@fprintk.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/d›∫t.h
>

25 
	~<«utûus/¥ötk.h
>

26 
	~<«utûus/fs.h
>

27 
	~<«utûus/Ârötk.h
>

31 
	$do_Âutch¨
 (
nk_fs_fd_t
 
fd
, 
uöt8_t
 
c
)

33 
b
 = 
c
;

34 
	`nk_fs_wrôe
(
fd
, &
b
, 1);

35 
	}
}

39 
	$do_Âuts
 (
nk_fs_fd_t
 
fd
, * 
s
)

41  
	`nk_fs_wrôe
(
fd
, 
s
, 
	`°∫Àn
(s, 
FS_WRITE_MAX
));

42 
	}
}

46 
	$Êush
 (
Ârötk_°©e
 * 
°©e
, 
nk_fs_fd_t
 
fd
)

48 
i
;

49 
i
 = 0; i < 
°©e
->
idx
; i++) {

50 
	`do_Âutch¨
(
fd
, 
°©e
->
buf
[
i
]);

53 
°©e
->
idx
 = 0;

54 
	}
}

58 
	$Ârötk_ch¨
 (* 
¨g
, 
c
)

60 
Ârötk_°©e
 * 
°©e
 = (Ârötk_°©e*)
¨g
;

62 i‡(
c
 == '\n') {

63 
°©e
->
buf
[°©e->
idx
] = 0;

64 
	`do_Âuts
(
°©e
->
fd
, sèã->
buf
);

65 
°©e
->
idx
 = 0;

66 } i‡((
c
 =0Ë|| (
°©e
->
idx
 >
FPRINTK_BUFMAX
)) {

67 
	`Êush
(
°©e
, sèã->
fd
);

68 
	`do_Âutch¨
(
°©e
->
fd
, 
c
);

70 
°©e
->
buf
[°©e->
idx
] = 
c
;

71 
°©e
->
idx
++;

73 
	}
}

77 
	$vÂrötk
 (
nk_fs_fd_t
 
fd
, c⁄° * 
fmt
, 
va_li°
 
¨gs
)

79 
Ârötk_°©e
 
°©e
;

81 
°©e
.
idx
 = 0;

82 
°©e
.
fd
 = fd;

84 
	`_d›∫t
(
fmt
, 
¨gs
, 0, 
Ârötk_ch¨
, (*)&
°©e
);

86 i‡(
°©e
.
idx
 != 0)

87 
	`Êush
(&
°©e
, sèã.
fd
);

90 
	}
}

94 
	$Ârötk
 (
nk_fs_fd_t
 
fd
, c⁄° * 
fmt
, ...)

96 
va_li°
 
¨gs
;

97 
îr
 = 0;

99 
	`va_°¨t
(
¨gs
, 
fmt
);

100 
îr
 = 
	`vÂrötk
(
fd
, 
fmt
, 
¨gs
);

101 
	`va_íd
(
¨gs
);

103  
îr
;

104 
	}
}

	@fpu.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/¥ötk.h
>

25 
	~<«utûus/Âu.h
>

26 
	~<«utûus/˝u.h
>

27 
	~<«utûus/˝uid.h
>

28 
	~<«utûus/idt.h
>

29 
	~<«utûus/úq.h
>

30 
	~<«utûus/m§.h
>

32 #i‚de‡
NAUT_CONFIG_DEBUG_FPU


33 #unde‡
DEBUG_PRINT


34 
	#DEBUG_PRINT
(
fmt
, 
¨gs
...)

	)

37 
	#FPU_PRINT
(
fmt
, 
¨gs
...Ë
	`¥ötk
("FPU: " fmt, ##¨gs)

	)

38 
	#FPU_DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("FPU: " fmt, ##¨gs)

	)

39 
	#FPU_WARN
(
fmt
, 
¨gs
...Ë
	`WARN_PRINT
("FPU: " fmt, ##¨gs)

	)

41 
	#_INTEL_FPU_FEAT_QUERY
(
r
, 
„©
) \

43 
˝uid_ªt_t
 
ªt
; \

44 
˝uid_e
 ## 
r
 ## 
x_Êags
 
f
; \

45 
	`˝uid
(
CPUID_FEATURE_INFO
, &
ªt
); \

46 
f
.
vÆ
 = 
ªt
.
r
; \

47 
f
.
„©
; \

48 })

	)

50 
	#_AMD_FPU_FEAT_QUERY
(
r
, 
„©
) \

52 
˝uid_ªt_t
 
ªt
; \

53 
˝uid_amd_e
 ## 
r
 ## 
x_Êags
 
f
; \

54 
	`˝uid
(
CPUID_AMD_FEATURE_INFO
, &
ªt
); \

55 
f
.
vÆ
 = 
ªt
.
r
; \

56 
f
.
„©
; \

57 })

	)

59 
	#FPU_ECX_FEAT_QUERY
(
„©
Ë
	`_INTEL_FPU_FEAT_QUERY
(
c
, fót)

	)

60 
	#FPU_EDX_FEAT_QUERY
(
„©
Ë
	`_INTEL_FPU_FEAT_QUERY
(
d
, fót)

	)

62 
	#AMD_FPU_ECX_FEAT_QUERY
(
„©
Ë
	`_AMD_FPU_FEAT_QUERY
(
c
, fót)

	)

63 
	#AMD_FPU_EDX_FEAT_QUERY
(
„©
Ë
	`_AMD_FPU_FEAT_QUERY
(
d
, fót)

	)

65 
	#DEFAULT_FUN_CHECK
(
fun
, 
°r
) \

66 i‡(
	`fun
()) { \

67 
	`FPU_DEBUG
("\t[" #str "]\n"); \

68 }

	)

72 
	$mf_h™dÀr
 (
ex˝_íåy_t
 * 
ex˝
, 
ex˝_vec_t
 
vec
, *
°©e
)

74 
	`∑nic
("x86 Floating Point Exception\n");

76 
	}
}

79 
	$xm_h™dÀr
 (
ex˝_íåy_t
 * 
ex˝
, 
ex˝_vec_t
 
vec
, *
°©e
)

81 
uöt32_t
 
m
;

82 
asm
 vﬁ©ûê("°mxc§ %[_m]" : [
_m
] "=m" (
m
) : : "memory");

83 
	`FPU_WARN
("SIMD FlﬂtögÖoöàex˚±i⁄ (MXCSR=0x%x)\n", 
m
);

85 
	}
}

88 
uöt8_t


89 
	$has_x87
 ()

91  
	`FPU_EDX_FEAT_QUERY
(
Âu
);

92 
	}
}

95 
	$íabÀ_x87
 ()

97 
ul⁄g_t
 
r
;

99 
r
 = 
	`ªad_¸0
();

100 
r
 |
CR0_MP
 |

101 
CR0_NE
;

103 
	`wrôe_¸0
(
r
);

105 
asm
 volatile ("fninit" ::: "memory");

106 
	}
}

108 
uöt8_t


109 
	$has_˛Êush
 ()

111  
	`FPU_EDX_FEAT_QUERY
(
˛fsh
);

112 
	}
}

114 
uöt8_t


115 
	$has_mmx
 ()

117  
	`FPU_EDX_FEAT_QUERY
(
mmx
);

118 
	}
}

120 
uöt8_t


121 
	$amd_has_mmx_ext
 ()

123  
	`AMD_FPU_EDX_FEAT_QUERY
(
mmx_ext
);

124 
	}
}

126 
uöt8_t


127 
	$amd_has_3dnow
 ()

129  
	`AMD_FPU_EDX_FEAT_QUERY
(
amd3dnow
);

130 
	}
}

132 
uöt8_t


133 
	$amd_has_3dnow_ext
 ()

135  
	`AMD_FPU_EDX_FEAT_QUERY
(
amd3dnowext
);

136 
	}
}

138 
uöt8_t


139 
	$has_s£
 ()

141  
	`FPU_EDX_FEAT_QUERY
(
s£
);

142 
	}
}

144 
uöt8_t


145 
	$has_s£2
 ()

147  
	`FPU_EDX_FEAT_QUERY
(
s£2
);

148 
	}
}

150 
uöt8_t


151 
	$has_s£3
 ()

153  
	`FPU_ECX_FEAT_QUERY
(
s£3
);

154 
	}
}

156 
uöt8_t


157 
	$has_ss£3
 ()

159  
	`FPU_ECX_FEAT_QUERY
(
ss£3
);

160 
	}
}

162 
uöt8_t


163 
	$has_s£4d1
 ()

165  
	`FPU_ECX_FEAT_QUERY
(
s£4dŸ1
);

166 
	}
}

168 
uöt8_t


169 
	$has_s£4d2
 ()

171  
	`FPU_ECX_FEAT_QUERY
(
s£4dŸ2
);

172 
	}
}

174 
uöt8_t


175 
	$amd_has_s£4a
 ()

177  
	`AMD_FPU_ECX_FEAT_QUERY
(
s£4a
);

178 
	}
}

180 
uöt8_t


181 
	$amd_has_¥e„tch
 ()

183  
	`AMD_FPU_ECX_FEAT_QUERY
(
¥e„tch3d
);

184 
	}
}

186 
uöt8_t


187 
	$amd_has_mißl_s£
 ()

189  
	`AMD_FPU_ECX_FEAT_QUERY
(
mißligns£
);

190 
	}
}

193 
	$íabÀ_s£
 ()

195 
ul⁄g_t
 
r
 = 
	`ªad_¸4
();

196 
uöt32_t
 
m
;

200 
r
 |
CR4_OSFXSR
 |

201 
CR4_OSXMMEXCPT
;

203 
	`wrôe_¸4
(
r
);

206 
r
 = 
	`m§_ªad
(
IA32_MSR_EFER
);

207 
r
 &~(
EFER_FFXSR
);

208 
	`m§_wrôe
(
IA32_MSR_EFER
, 
r
);

210 
m
 = 0x00001f80;

211 
asm
 vﬁ©ûê("ldmxc§ %[_m]" :: [
_m
] "m" (
m
) : "memory");

212 
	}
}

215 
uöt8_t


216 
	$has_fma4
 ()

218  
	`FPU_ECX_FEAT_QUERY
(
fma
);

219 
	}
}

221 
uöt8_t


222 
	$amd_has_fma4
 ()

224  
	`AMD_FPU_ECX_FEAT_QUERY
(
fma4
);

225 
	}
}

227 
uöt8_t


228 
	$has_cvt16
 ()

230  
	`FPU_ECX_FEAT_QUERY
(
f16c
);

231 
	}
}

234 
uöt8_t


235 
	$has_cx16
 ()

237  
	`FPU_ECX_FEAT_QUERY
(
cx16
);

238 
	}
}

240 
uöt8_t


241 
	$has_avx
 ()

243  
	`FPU_ECX_FEAT_QUERY
(
avx
);

244 
	}
}

247 
uöt8_t


248 
	$has_fx§
 ()

250  
	`FPU_EDX_FEAT_QUERY
(
fx§
);

251 
	}
}

254 
uöt8_t


255 
	$has_xßve
 ()

257  
	`FPU_ECX_FEAT_QUERY
(
xßve
);

258 
	}
}

260 
uöt32_t


261 
	$gë_xßve_„©uªs
 ()

263 
˝uid_ªt_t
 
r
;

264 
	`˝uid_sub
(0, 1, &
r
);

265  
r
.
a
;

266 
	}
}

269 
	$£t_osxßve
 ()

271 
ul⁄g_t
 
r
 = 
	`ªad_¸4
();

272 
r
 |
CR4_OSXSAVE
;

273 
	`wrôe_¸4
(
r
);

274 
	}
}

277 
	$amd_Âu_öô
 (
«ut_öfo
 * 
«ut
)

279 
	`FPU_DEBUG
("Probing for AMD-specific FPU/SIMDÉxtensions\n");

280 
	`DEFAULT_FUN_CHECK
(
amd_has_fma4
, 
FMA4
)

281 
	`DEFAULT_FUN_CHECK
(
amd_has_mmx_ext
, 
AMDMMXEXT
)

282 
	`DEFAULT_FUN_CHECK
(
amd_has_s£4a
, 
SSE4A
)

283 
	`DEFAULT_FUN_CHECK
(
amd_has_3dnow
, 3D
NOW
)

284 
	`DEFAULT_FUN_CHECK
(
amd_has_3dnow_ext
, 3D
NOWEXT
)

285 
	`DEFAULT_FUN_CHECK
(
amd_has_¥e„tch
, 
PREFETCHW
)

286 
	`DEFAULT_FUN_CHECK
(
amd_has_mißl_s£
, 
MISALSSE
)

287 
	}
}

290 
	$öãl_Âu_öô
 (
«ut_öfo
 * 
«ut
)

292 
	`FPU_DEBUG
("Probing for Intel specific FPU/SIMDÉxtensions\n");

293 
	`DEFAULT_FUN_CHECK
(
has_cx16
, 
CX16
)

294 
	`DEFAULT_FUN_CHECK
(
has_cvt16
, 
CVT16
)

295 
	`DEFAULT_FUN_CHECK
(
has_fma4
, 
FMA4
)

296 
	`DEFAULT_FUN_CHECK
(
has_ss£3
, 
SSSE3
)

297 
	}
}

300 
	$Âu_öô_comm⁄
 (
«ut_öfo
 * 
«ut
)

302 
uöt8_t
 
x87_ªady
 = 0;

303 
uöt8_t
 
s£_ªady
 = 0;

305 i‡(
	`has_x87
()) {

306 
	`FPU_DEBUG
("\t[x87]\n");

307 
x87_ªady
 = 1;

310 i‡(
	`has_s£
()) {

311 ++
s£_ªady
;

312 
	`FPU_DEBUG
("\t[SSE]\n");

315 i‡(
	`has_˛Êush
()) {

316 ++
s£_ªady
;

317 
	`FPU_DEBUG
("\t[CLFLUSH]\n");

320 
	`DEFAULT_FUN_CHECK
(
has_s£2
, 
SSE2
)

321 
	`DEFAULT_FUN_CHECK
(
has_s£2
, 
SSE2
)

323 i‡(
	`has_fx§
()) {

324 ++
s£_ªady
;

325 
	`FPU_DEBUG
("\t[FXSAVE/RESTORE]\n");

327 
	`∑nic
("No FXSAVE/RESTORE support. Thread switching will be broken\n");

330 
	`DEFAULT_FUN_CHECK
(
has_xßve
, 
XSAVE
/
RESTORE
)

331 
	`DEFAULT_FUN_CHECK
(
has_s£4d1
, 
SSE4
.1)

332 
	`DEFAULT_FUN_CHECK
(
has_s£4d2
, 
SSE4
.2)

333 
	`DEFAULT_FUN_CHECK
(
has_mmx
, 
MMX
)

334 
	`DEFAULT_FUN_CHECK
(
has_avx
, 
AVX
)

337 i‡(
x87_ªady
) {

338 
	`FPU_DEBUG
("\tInitializingÜegacy x87 FPU\n");

339 
	`íabÀ_x87
();

343 i‡(
s£_ªady
 >= 3) {

344 
	`FPU_DEBUG
("\tInitializing SSEÉxtensions\n");

345 
	`íabÀ_s£
();

347 
	}
}

357 
	$Âu_öô
 (
«ut_öfo
 * 
«ut
)

359 
	`FPU_DEBUG
("Probing for Floating Point/SIMDÉxtensions...\n");

361 
	`Âu_öô_comm⁄
(
«ut
);

363 i‡(
	`nk_is_amd
()) {

364 
	`amd_Âu_öô
(
«ut
);

365 } i‡(
	`nk_is_öãl
()) {

366 
	`öãl_Âu_öô
(
«ut
);

368 
	`ERROR_PRINT
("UnsupportedÖrocessorÅype!\n");

372 i‡(
	`ªgi°î_öt_h™dÀr
(
XM_EXCP
, 
xm_h™dÀr
, 
NULL
) != 0) {

373 
	`ERROR_PRINT
("CouldÇotÑegisterÉxcp handler for XM\n");

377 i‡(
	`ªgi°î_öt_h™dÀr
(
MF_EXCP
, 
mf_h™dÀr
, 
NULL
) != 0) {

378 
	`ERROR_PRINT
("CouldÇotÑegisterÉxcp handler for MF\n");

382 
	}
}

	@fs.c

27 
	~<«utûus/«utûus.h
>

28 
	~<«utûus/fs.h
>

29 
	~<«utûus/ã°fs.h
>

31 
	#INFO
(
fmt
, 
¨gs
...Ë
	`INFO_PRINT
("fs: " fmt, ##¨gs)

	)

32 
	#DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("fs: " fmt, ##¨gs)

	)

33 
	#ERROR
(
fmt
, 
¨gs
...Ë
	`ERROR_PRINT
("fs: " fmt, ##¨gs)

	)

35 #i‚de‡
NAUT_CONFIG_DEBUG_FILESYSTEM


36 #unde‡
DEBUG


37 
	#DEBUG
(
fmt
, 
¨gs
...)

	)

40 
	#STATE_LOCK_CONF
 
uöt8_t
 
_°©e_lock_Êags


	)

41 
	#STATE_LOCK
(Ë
_°©e_lock_Êags
 = 
	`•ö_lock_úq_ßve
(&
°©e_lock
)

	)

42 
	#STATE_UNLOCK
(Ë
	`•ö_u∆ock_úq_ª°‹e
(&
°©e_lock
, 
_°©e_lock_Êags
);

	)

44 
	#FILE_LOCK_CONF
 
uöt8_t
 
_fûe_lock_Êags


	)

45 
	#FILE_LOCK
(
fd
Ë
_fûe_lock_Êags
 = 
	`•ö_lock_úq_ßve
(&fd->
lock
)

	)

46 
	#FILE_UNLOCK
(
fd
Ë
	`•ö_u∆ock_úq_ª°‹e
(&fd->
lock
, 
_fûe_lock_Êags
);

	)

53 
	snk_fs_›í_fûe_°©e
 {

54 
•ölock_t
 
	mlock
;

56 
li°_hód
 
	mfûe_node
;

58 
nk_fs
 *
	mfs
;

59 *
	mfûe
;

61 
size_t
 
	mposôi⁄
;

62 
	mÊags
;

66 
•ölock_t
 
	g°©e_lock
;

67 
li°_hód
 
	gfs_li°
;

68 
li°_hód
 
	g›í_fûes
;

70 
m≠_ovî_›í_fûes
((*
ˇŒback
)(
nk_fs_fd_t
))

72 
li°_hód
 *
cur
;

73 
li°_hód
 *
ãmp
;

74 
nk_fs_fd_t
 
fd
;

76 
	`li°_f‹_óch_ß„
(
cur
, 
ãmp
, &
›í_fûes
) {

77 
fd
 = 
	`li°_íåy
(
cur
,
nk_fs_›í_fûe_°©e
, 
fûe_node
);

78 
	`ˇŒback
(
fd
);

80 
	}
}

85 
ssize_t
 
__£ek
(
nk_fs_fd_t
 
fd
, 
size_t
 
off£t
, 
whí˚
);

89 
	$∑th_°©
(
nk_fs
 *
fs
, *
∑th
, 
nk_fs_°©
 *
°
)

91 i‡(
fs
 && fs->
öãrÁ˚
 && fs->öãrÁ˚->
°©_∑th
) {

92  
fs
->
öãrÁ˚
->
	`°©_∑th
(fs->
°©e
, 
∑th
, 
°
);

96 
	}
}

99 
	$fûe_°©
(
nk_fs
 *
fs
, *
fûe
, 
nk_fs_°©
 *
°
)

101 i‡(
fs
 && fs->
öãrÁ˚
 && fs->öãrÁ˚->
°©
) {

102  
fs
->
öãrÁ˚
->
	`°©
(fs->
°©e
, 
fûe
, 
°
);

106 
	}
}

109 * 
	$fûe_›í
(
nk_fs
 *
fs
, *
∑th
, 
ac˚ss
)

111 i‡(
fs
 && fs->
öãrÁ˚
 && fs->öãrÁ˚->
›í_fûe
) {

112  
fs
->
öãrÁ˚
->
	`›í_fûe
(fs->
°©e
, 
∑th
);

116 
	}
}

119 *
	$fûe_¸óã
(
nk_fs
 *
fs
, * 
∑th
)

121 i‡(
fs
 && fs->
öãrÁ˚
 && fs->öãrÁ˚->
¸óã_fûe
) {

122  
fs
->
öãrÁ˚
->
	`¸óã_fûe
(fs->
°©e
, 
∑th
);

126 
	}
}

128 
	$fûe_åunc
(
nk_fs_fd_t
 
fd
, 
off_t
 
Àn
)

130 i‡(
fd
 && fd->
fs
 && fd->fs->
öãrÁ˚
 && fd->fs->öãrÁ˚->
åunc_fûe
) {

131  
fd
->
fs
->
öãrÁ˚
->
	`åunc_fûe
(fd->fs->
°©e
,fd->
fûe
,
Àn
);

135 
	}
}

137 
ölöe
 
ssize_t
 
	$fûe_ªad
(
nk_fs_fd_t
 
fd
, *
buf
, 
size_t
 
num_byãs
)

139 i‡(!
	`FS_FD_ERR
(
fd
Ë&& fd->
fs
 && fd->fs->
öãrÁ˚


140 && 
fd
->
fs
->
öãrÁ˚
->
ªad_fûe
) {

141  
fd
->
fs
->
öãrÁ˚
->
	`ªad_fûe
(fd->fs->
°©e
,

142 
fd
->
fûe
,

143 
buf
,

144 
fd
->
posôi⁄
,

145 
num_byãs
);

149 
	}
}

151 
ölöe
 
ssize_t
 
	$fûe_wrôe
(
nk_fs_fd_t
 
fd
, *
buf
, 
size_t
 
num_byãs
)

153 i‡(!
	`FS_FD_ERR
(
fd
Ë&& fd->
fs
 && fd->fs->
öãrÁ˚


154 && 
fd
->
fs
->
öãrÁ˚
->
wrôe_fûe
) {

155  
fd
->
fs
->
öãrÁ˚
->
	`wrôe_fûe
(fd->fs->
°©e
,

156 
fd
->
fûe
,

157 
buf
,

158 
fd
->
posôi⁄
,

159 
num_byãs
);

163 
	}
}

166 
	$exi°s
(
nk_fs
 *
fs
, *
∑th
)

169 i‡(
fs
 && fs->
öãrÁ˚
 && fs->öãrÁ˚->
exi°s
) {

170  
fs
->
öãrÁ˚
->
	`exi°s
(fs->
°©e
, 
∑th
);

174 
	}
}

176 
	$ªmove
(
nk_fs
 *
fs
, * 
∑th
)

178 i‡(
fs
 && fs->
öãrÁ˚
 && fs->öãrÁ˚->
ªmove
) {

179  
fs
->
öãrÁ˚
->
	`ªmove
(fs->
°©e
, 
∑th
);

183 
	}
}

185 
	$nk_fs_öô
()

187 
	`INIT_LIST_HEAD
(&
fs_li°
);

188 
	`INIT_LIST_HEAD
(&
›í_fûes
);

189 
	`•ölock_öô
(&
°©e_lock
);

190 
	`INFO
("inited\n");

192 
	}
}

194 
	$nk_deöô_fs
()

196 i‡(!
	`li°_em±y
(&
›í_fûes
)) {

197 
	`ERROR
("Open filesÑemain.. closingÅhem\n");

198 
	`m≠_ovî_›í_fûes
(((*)(
nk_fs_fd_t
))
nk_fs_˛o£
);

200 i‡(!
	`li°_em±y
(&
fs_li°
)) {

201 
	`ERROR
("registered filesystemsÑemain\n");

203 
	`•ölock_deöô
(&
°©e_lock
);

204 
	`INFO
("deinited\n");

206 
	}
}

208 
nk_fs
 *
	$nk_fs_ªgi°î
(*
«me
, 
uöt64_t
 
Êags
, 
nk_fs_öt
 *
öãr
, *
°©e
)

210 
STATE_LOCK_CONF
;

211 
nk_fs
 *
f
 = 
	`mÆloc
((*f));

213 
	`DEBUG
("ªgi°î f†wôhÇamê%s, fœg†0x%lx, i¡îÁ˚ %p,ánd sèã %p\n", 
«me
, 
Êags
, 
öãr
, 
°©e
);

215 i‡(!
f
) {

216 
	`ERROR
("FailedÅoállocate filesystem\n");

220 
	`mem£t
(
f
,0,(*f));

222 
	`°∫˝y
(
f
->
«me
,«me,
FS_NAME_LEN
); f->name[FS_NAME_LEN-1]=0;

223 
	`°∫˝y
(
f
->
mou¡_∑th
,"",
MOUNT_PATH_LEN
); f->mount_path[MOUNT_PATH_LEN-1]=0;

224 
f
->
Êags
 = flags;

225 
f
->
öãrÁ˚
 = 
öãr
;

226 
f
->
°©e
 = state;

228 
	`STATE_LOCK
();

229 
	`li°_add
(&
f
->
fs_li°_node
,&
fs_li°
);

230 
	`STATE_UNLOCK
();

232 
	`INFO
("Added fûesy°em wôhÇamê%†™d fœg†0x%lx\n", 
f
->
«me
,f->
Êags
);

234  
f
;

235 
	}
}

237 
	$nk_fs_uƒegi°î
(
nk_fs
 *
f
)

239 
STATE_LOCK_CONF
;

240 
	`STATE_LOCK
();

241 
	`li°_dñ
(&
f
->
fs_li°_node
);

242 
	`STATE_UNLOCK
();

243 
	`INFO
("Uƒegi°îed fûesy°em %s\n",
f
->
«me
);

244 
	`‰ì
(
f
);

246 
	}
}

248 
nk_fs
 *
	$__fs_föd
(*
«me
)

250 
li°_hód
 *
cur
;

251 
nk_fs
 *
èrgë
=0;

252 
	`li°_f‹_óch
(
cur
,&
fs_li°
) {

253 i‡(!
	`°∫ˇ£cmp
(
	`li°_íåy
(
cur
,
nk_fs
,
fs_li°_node
)->
«me
,«me,
FS_NAME_LEN
)) {

254 
èrgë
 = 
	`li°_íåy
(
cur
,
nk_fs
, 
fs_li°_node
);

258  
èrgë
;

259 
	}
}

261 
nk_fs
 *
	$nk_fs_föd
(*
«me
)

263 
STATE_LOCK_CONF
;

264 
nk_fs
 *
fs
=0;

265 
	`STATE_LOCK
();

266 
fs
 = 
	`__fs_föd
(
«me
);

267 
	`STATE_UNLOCK
();

268  
fs
;

269 
	}
}

271 *
	$decode_∑th
(*
∑th
, *
fs_«me
)

273 
uöt64_t
 
n
 = 
	`°æí
(
∑th
);

274 
uöt64_t
 
i
;

276 
	`DEBUG
("decodê∑th %s\n",
∑th
);

278 
i
=0;(i<
n
Ë&& (
∑th
[i]!=':');i++) {}

280 i‡(
i
>=
n
) {

282 
	`°r˝y
(
fs_«me
,"rootfs");

285 
	`°∫˝y
(
fs_«me
,
∑th
,
i
);

286 
fs_«me
[
i
]=0;

287 
∑th
ı©h+
i
+1;

289 
	`DEBUG
("decodedá†f†%†™dÖ©h %s\n",
fs_«me
, 
∑th
);

290  
∑th
;

291 
	}
}

293 
	$nk_fs_°©
(*
∑th
, 
nk_fs_°©
 *
°
)

295 
STATE_LOCK_CONF
;

296 
nk_fs
 *
fs
;

297 
fs_«me
[
	`°æí
(
∑th
)+1];

299 
∑th
 = 
	`decode_∑th
’©h,
fs_«me
);

301 
	`DEBUG
("decodêha†fs_«mê%†∑th %s\n", 
fs_«me
,
∑th
);

303 
	`STATE_LOCK
();

304 
fs
 = 
	`__fs_föd
(
fs_«me
);

305 
	`STATE_UNLOCK
();

307 i‡(!
fs
) {

308 
	`ERROR
("C™nŸ föd fûesy°emÇamed %s\n",
fs_«me
);

312  
	`∑th_°©
(
fs
, 
∑th
, 
°
);

313 
	}
}

315 
	$nk_fs_åunˇã
(*
∑th
, 
off_t
 
Àn
)

317 
nk_fs_fd_t
 
fd
 = 
	`nk_fs_›í
(
∑th
,
O_RDWR
,0);

319 i‡(
	`FS_FD_ERR
(
fd
)) {

322 i‡(
	`nk_fs_·runˇã
(
fd
,
Àn
)) {

325  
	`nk_fs_˛o£
(
fd
);

328 
	}
}

330 
nk_fs_fd_t
 
	$nk_fs_¸ót
(*
∑th
, 
mode
)

332  
	`nk_fs_›í
(
∑th
,
O_WRONLY
|
O_TRUNC
|
O_CREAT
,0);

333 
	}
}

335 
nk_fs_fd_t
 
	$nk_fs_›í
(*
∑th
, 
Êags
, 
mode
)

337 
STATE_LOCK_CONF
;

338 
nk_fs
 *
fs
;

339 
fs_«me
[
	`°æí
(
∑th
)+1];

341 
	`DEBUG
("›íÖ©h %s, fœgs=%d, mode=%d\n",
∑th
,
Êags
,
mode
);

343 
∑th
=
	`decode_∑th
’©h,
fs_«me
);

345 
	`STATE_LOCK
();

346 
fs
 = 
	`__fs_föd
(
fs_«me
);

347 
	`STATE_UNLOCK
();

349 i‡(!
fs
) {

350 
	`ERROR
("C™nŸ föd fûesy°emÇamed %s\n",
fs_«me
);

351  
FS_BAD_FD
;

354 
nk_fs_fd_t
 
fd
 = 
	`mÆloc
((*fd));

355 i‡(!
fd
) {

356 
	`ERROR
("Can'tállocateÇew open fileÉntry\n");

357  
FS_BAD_FD
;

360 
	`mem£t
(
fd
,0,(*fd));

361 
	`•ölock_öô
(&
fd
->
lock
);

362 
fd
->
fs
 = fs;

363 
fd
->
Êags
 = flags;

365 i‡(
	`exi°s
(
fs
,
∑th
)) {

366 
	`DEBUG
("∑th %†exi°s\n", 
∑th
);

367 
fd
->
fûe
 = 
	`fûe_›í
(
fs
, 
∑th
, 
Êags
);

368 } i‡(
Êags
 & 
O_CREAT
) {

369 
	`DEBUG
("∑th %†d€†nŸÉxi°, buà¸ótög fûe\n",
∑th
);

370 i‡((
fs
->
Êags
 & 
NK_FS_READONLY
)) {

371 
	`ERROR
("Filesystem isÇot writeable so cannot create file\n");

372  
FS_BAD_FD
;

374 
fd
->
fûe
 = 
	`fûe_¸óã
(
fs
, 
∑th
);

375 i‡(!
fd
->
fûe
) {

376 
	`ERROR
("C™nŸ cª©êfûê%s\n", 
∑th
);

377 
	`‰ì
(
fd
);

378  
FS_BAD_FD
;

380 
	`DEBUG
("Cª©ed fûê%†⁄ f†%†fûe=%∞", 
∑th
, 
fs_«me
, 
fd
);

383 
	`DEBUG
("∑th %†d€†nŸÉxi°,ándÇÿ¸óti⁄Ñeque°ed\n",
∑th
);

384 
	`‰ì
(
fd
);

385  
FS_BAD_FD
;

388 
	`STATE_LOCK
();

389 
	`li°_add
(&
fd
->
fûe_node
, &
›í_fûes
);

390 
	`STATE_UNLOCK
();

392 i‡(
Êags
 & 
O_TRUNC
) {

393 
	`fûe_åunc
(
fd
,0);

396 i‡(
Êags
 & 
O_APPEND
) {

397 
	`__£ek
(
fd
, 0, 2);

400 
	`DEBUG
("O≥√d fûê%†⁄ f†%†fûe=%∞", 
∑th
, 
fs_«me
, 
fd
);

402  
fd
;

403 
	}
}

405 
	$nk_fs_˛o£
(
nk_fs_fd_t
 
fd
)

407 
STATE_LOCK_CONF
;

409 
	`STATE_LOCK
();

410 
	`li°_dñ
(&
fd
->
fûe_node
);

411 
	`STATE_UNLOCK
();

413 
	`‰ì
(
fd
);

416 
	}
}

418 
ssize_t
 
	$nk_fs_ªad
(
nk_fs_fd_t
 
fd
, *
buf
, 
size_t
 
num_byãs
)

420 
FILE_LOCK_CONF
;

422 
	`DEBUG
("©ãm±Ñód o‡%ld byã†°¨tögáàposôi⁄ %lu\n", 
num_byãs
, 
fd
->
posôi⁄
);

424 i‡(
	`FS_FD_ERR
(
fd
Ë|| !(fd->
Êags
 & 
O_RDONLY
)) {

425 
	`ERROR
("CannotÑead fileÇot opened forÑeading\n");

429 
	`FILE_LOCK
(
fd
);

430 
ssize_t
 
n
 = 
	`fûe_ªad
(
fd
, 
buf
, 
num_byãs
);

431 i‡(
n
>=0Ë{
fd
->
posôi⁄
 +=Ç; }

432 
	`FILE_UNLOCK
(
fd
);

434 
	`DEBUG
("ªad %ld byã†ídögáàposôi⁄ %lu\n", 
n
, 
fd
->
posôi⁄
);

436  
n
;

437 
	}
}

439 
ssize_t
 
	$nk_fs_wrôe
(
nk_fs_fd_t
 
fd
, *
buf
, 
size_t
 
num_byãs
)

441 
FILE_LOCK_CONF
;

443 
	`DEBUG
("©ãm± wrôêo‡%ld byã†°¨tögáàposôi⁄ %lu\n", 
num_byãs
, 
fd
->
posôi⁄
);

445 i‡(
	`FS_FD_ERR
(
fd
Ë|| !(fd->
Êags
 & 
O_WRONLY
)) {

446 
	`ERROR
("Cannot write fileÇot opened for writing\n");

450 i‡(
fd
->
fs
->
Êags
 & 
NK_FS_READONLY
) {

451 
	`ERROR
("Notá writeable filesystem\n");

455 
	`FILE_LOCK
(
fd
);

456 
ssize_t
 
n
 = 
	`fûe_ªad
(
fd
, 
buf
, 
num_byãs
);

457 i‡(
n
>=0Ë{
fd
->
posôi⁄
 +=Ç; }

458 
	`FILE_UNLOCK
(
fd
);

460 
	`DEBUG
("wrŸê%ld byã†ídögáàposôi⁄ %lu\n", 
n
, 
fd
->
posôi⁄
);

462  
n
;

463 
	}
}

465 
	$nk_fs_·runˇã
(
nk_fs_fd_t
 
fd
, 
off_t
 
Àn
)

467 
FILE_LOCK_CONF
;

468 
rc
;

470 i‡(
fd
->
fs
->
Êags
 & 
NK_FS_READONLY
) {

471 
	`ERROR
("Filesystem isÇot writeable so cannotÅruncate file\n");

475 
	`FILE_LOCK
(
fd
);

476 
rc
 = 
	`fûe_åunc
(
fd
,
Àn
);

477 
	`FILE_UNLOCK
(
fd
);

478  
rc
;

479 
	}
}

481 
	$nk_fs_f°©
(
nk_fs_fd_t
 
fd
, 
nk_fs_°©
 *
°
)

483  
	`fûe_°©
(
fd
->
fs
,fd->
fûe
,
°
);

484 
	}
}

486 
ssize_t
 
	$__£ek
(
nk_fs_fd_t
 
fd
, 
size_t
 
off£t
, 
whí˚
)

488 i‡(
whí˚
 == 0) {

489 
fd
->
posôi⁄
 = 
off£t
;

490 } i‡(
whí˚
 == 1) {

491 
fd
->
posôi⁄
 +
off£t
;

492 } i‡(
whí˚
 == 2) {

493 
nk_fs_°©
 
°
;

495 i‡(
	`fûe_°©
(
fd
->
fs
,fd->
fûe
,&
°
)) {

496 
	`ERROR
("Cannot stat file\n");

499 
fd
->
posôi⁄
 = 
°
.
°_size
 + 
off£t
;

504  
fd
->
posôi⁄
;

505 
	}
}

507 
off_t
 
	$nk_fs_£ek
(
nk_fs_fd_t
 
fd
, 
off_t
 
off£t
, 
whí˚
)

509 
FILE_LOCK_CONF
;

510 
ssize_t
 
s
;

512 
	`FILE_LOCK
(
fd
);

513 
s
 = 
	`__£ek
(
fd
, 
off£t
, 
whí˚
);

514 
	`FILE_UNLOCK
(
fd
);

515  
s
;

516 
	}
}

520 
ssize_t
 
	$nk_fs_ãŒ
(
nk_fs_fd_t
 
fd
)

522  
fd
->
posôi⁄
;

523 
	}
}

526 
	$nk_fs_dump_fûesy°ems
()

528 
STATE_LOCK_CONF
;

529 
li°_hód
 *
cur
;

531 
	`STATE_LOCK
();

533 
	`li°_f‹_óch
(
cur
,&
fs_li°
) {

534 
nk_fs
 *
fs
 = 
	`li°_íåy
(
cur
,nk_fs,
fs_li°_node
);

535 
	`nk_vc_¥ötf
("%s:\n", 
fs
->
«me
);

537 
	`STATE_UNLOCK
();

538 
	}
}

541 
	$nk_fs_dump_fûes
()

543 
STATE_LOCK_CONF
;

544 
li°_hód
 *
cur
;

546 
	`STATE_LOCK
();

548 
	`li°_f‹_óch
(
cur
,&
›í_fûes
) {

549 
nk_fs_›í_fûe_°©e
 *
f
 = 
	`li°_íåy
(
cur
,nk_fs_›í_fûe_°©e,
fûe_node
);

550 
	`nk_vc_¥ötf
("%s:%∞© %lu fœg†%x\n", 
f
->
fs
->
«me
,f->
fûe
,f->
posôi⁄
,f->
Êags
);

552 
	`STATE_UNLOCK
();

553 
	}
}

562 
	$ã°_fs
() {

563 *
buf
;

564 
‚
;

582 
∑th1
[] = "/null";

583 
buf
 = 
	`mÆloc
(50);

584 
‚
 = 
	`›í
(
∑th1
, 
O_RDWR
);

593 
	`DEBUG
("********************************");

594 * 
∑th2
 = "/readme";

595 * 
rd_buf
 = 
	`mÆloc
(50);

596 * 
wr_buf
 = 
	`mÆloc
(50);

597 
‚
 = 
	`›í
(
∑th2
, 
O_RDWR
);

598 
ªsu…
 = 
	`ªad
(
‚
, 
rd_buf
, 50);

599 
	`DEBUG
("Ród %d %s", 
ªsu…
, 
rd_buf
);

600 
	`DEBUG
("********************************");

601 
∑th2
 = "/a";

602 
‚
 = 
	`›í
(
∑th2
, 
O_RDWR
|
O_CREAT
);

603 
wr_buf
 = "testing";

604 
ªsu…
 = 
	`wrôe
(
‚
, 
wr_buf
,7);

605 
	`DEBUG
("Wrôê%d", 
ªsu…
);

606 
	`l£ek
(
‚
,0,0);

607 
ªsu…
 = 
	`ªad
(
‚
, 
rd_buf
, 7);

608 
	`DEBUG
("Ród %d %s", 
ªsu…
, 
rd_buf
);

609 
	`DEBUG
("********************************");

610 
	`ext2_ªmove_fûe
(&
RAMFS_START
,
∑th2
);

611 
‚
 = 
	`›í
(
∑th2
, 
O_RDWR
|
O_CREAT
);

613 
wr_buf
 = "testing";

617 
rd_buf
 = 
	`mÆloc
(50);

618 
ªsu…
 = 
	`ªad
(
‚
, 
rd_buf
, 7);

619 
	`DEBUG
("Ród %d %s", 
ªsu…
, 
rd_buf
);

620 
	`DEBUG
("********************************");

621 
	`‰ì
(
buf
);

670 
	`run_Æl
();

671 
	`DEBUG
("Done");

672 
	}
}

	@hashtable.c

37 
	~<«utûus/«utûus.h
>

38 
	~<«utûus/hashèbÀ.h
>

39 
	~<«utûus/«ut_°rög.h
>

40 
	~<«utûus/mm.h
>

43 
	snk_hash_íåy
 {

44 
addr_t
 
	mkey
;

45 
addr_t
 
	mvÆue
;

46 
uöt_t
 
	mhash
;

47 
nk_hash_íåy
 * 
	m√xt
;

50 
	snk_hashèbÀ
 {

51 
uöt_t
 
	mèbÀ_Àngth
;

52 
nk_hash_íåy
 ** 
	mèbÀ
;

53 
uöt_t
 
	míåy_cou¡
;

54 
uöt_t
 
	mlﬂd_limô
;

55 
uöt_t
 
	m¥ime_ödex
;

56 
uöt_t
 (*
hash_‚
Ë(
addr_t
 
	mkey
);

57 (*
	meq_‚
Ë(
addr_t
 
	mkey1
,áddr_à
	mkey2
);

64 
ölöe
 
uöt_t


65 
	$do_hash
 (
nk_hashèbÀ
 * 
hèbÀ
, 
addr_t
 
key
)

69 
uöt_t
 
i
 = 
hèbÀ
->
	`hash_‚
(
key
);

70 
i
 += ~(i << 9);

71 
i
 ^= ((i >> 14) | (i << 18));

72 
i
 += (i << 4);

73 
i
 ^= ((i >> 10) | (i << 22));

75  
i
;

76 
	}
}

81 #ifde‡
__NAUT_32BIT__


83 
	#GOLDEN_RATIO_PRIME
 0x9e370001UL

	)

84 
	#BITS_PER_LONG
 32

	)

87 
	#GOLDEN_RATIO_PRIME
 0x9e37fffffffc0001UL

	)

88 
	#BITS_PER_LONG
 64

	)

92 
ul⁄g_t


93 
	$nk_hash_l⁄g
 (
ul⁄g_t
 
vÆ
, 
uöt_t
 
bôs
)

95 
ul⁄g_t
 
hash
 = 
vÆ
;

97 #ifde‡
__NAUT_32BIT__


99 
hash
 *
GOLDEN_RATIO_PRIME
;

102 
ul⁄g_t
 
n
 = 
hash
;

103 
n
 <<= 18;

104 
hash
 -
n
;

105 
n
 <<= 33;

106 
hash
 -
n
;

107 
n
 <<= 3;

108 
hash
 +
n
;

109 
n
 <<= 3;

110 
hash
 -
n
;

111 
n
 <<= 4;

112 
hash
 +
n
;

113 
n
 <<= 2;

114 
hash
 +
n
;

118  
hash
 >> (
BITS_PER_LONG
 - 
bôs
);

119 
	}
}

124 
ul⁄g_t


125 
	$nk_hash_buf„r
 (
uch¨_t
 * 
msg
, 
uöt_t
 
Àngth
)

127 
ul⁄g_t
 
hash
 = 0;

128 
ul⁄g_t
 
ãmp
 = 0;

129 
uöt_t
 
i
;

131 
i
 = 0; i < 
Àngth
; i++) {

132 
hash
 = (hash << 4Ë+ *(
msg
 + 
i
) + i;

133 i‡((
ãmp
 = (
hash
 & 0xF0000000))) {

134 
hash
 ^(
ãmp
 >> 24);

136 
hash
 &~
ãmp
;

138  
hash
;

139 
	}
}

144 
ölöe
 
uöt_t


145 
	$ödexF‹
 (
uöt_t
 
èbÀ_Àngth
, uöt_à
hash_vÆue
)

147  (
hash_vÆue
 % 
èbÀ_Àngth
);

148 
	}
};

160 
	#‰ìkey
(
X
Ë
	`‰ì
(X)

	)

164 
	$tmp_ªÆloc
 (* 
ﬁd_±r
, 
uöt_t
 
ﬁd_size
, uöt_à
√w_size
)

166 * 
√w_buf
 = 
	`mÆloc
(
√w_size
);

168 i‡(
√w_buf
 =
NULL
) {

169  
NULL
;

172 
	`mem˝y
(
√w_buf
, 
ﬁd_±r
, 
ﬁd_size
);

173 
	`‰ì
(
ﬁd_±r
);

175  
√w_buf
;

176 
	}
}

184 c⁄° 
uöt_t
 
	g¥imes
[] =

197 c⁄° 
uöt_t
 
	glﬂd_Á˘‹s
[] =

208 c⁄° 
uöt_t
 
	g¥ime_èbÀ_Àngth
 = (
¥imes
) / (primes[0]);

212 
nk_hashèbÀ
 *

213 
nk_¸óã_hèbÀ
 (
uöt_t
 
mö_size
,

214 
	$uöt_t
 (*
hash_‚
Ë(
addr_t
),

215 (*
eq_‚
Ë(
addr_t
,áddr_t))

217 
nk_hashèbÀ
 * 
hèbÀ
;

218 
uöt_t
 
¥ime_ödex
;

219 
uöt_t
 
size
 = 
¥imes
[0];

222 i‡(
mö_size
 > (1u << 30)) {

223  
NULL
;

227 
¥ime_ödex
 = 0;Örime_ödex < 
¥ime_èbÀ_Àngth
;Örime_index++) {

228 i‡(
¥imes
[
¥ime_ödex
] > 
mö_size
) {

229 
size
 = 
¥imes
[
¥ime_ödex
];

235 i‡(
¥ime_ödex
 =
¥ime_èbÀ_Àngth
) {

236  
NULL
;

239 
hèbÀ
 = (
nk_hashèbÀ
 *)
	`mÆloc
((nk_hashtable));

241 i‡(
hèbÀ
 =
NULL
) {

242  
NULL
;

245 
hèbÀ
->
èbÀ
 = (
nk_hash_íåy
 **)
	`mÆloc
((nk_hash_íåy*Ë* 
size
);

247 i‡(
hèbÀ
->
èbÀ
 =
NULL
) {

248 
	`‰ì
(
hèbÀ
);

249  
NULL
;

253 
	`mem£t
(
hèbÀ
->
èbÀ
, 0, 
size
 * (
nk_hash_íåy
 *));

255 
hèbÀ
->
èbÀ_Àngth
 = 
size
;

256 
hèbÀ
->
¥ime_ödex
 =Örime_index;

257 
hèbÀ
->
íåy_cou¡
 = 0;

258 
hèbÀ
->
hash_‚
 = hash_fn;

259 
hèbÀ
->
eq_‚
 =Éq_fn;

260 
hèbÀ
->
lﬂd_limô
 = 
lﬂd_Á˘‹s
[
¥ime_ödex
];

262  
hèbÀ
;

263 
	}
}

269 
	$hashèbÀ_ex∑nd
 (
nk_hashèbÀ
 * 
hèbÀ
)

272 
nk_hash_íåy
 ** 
√w_èbÀ
;

273 
nk_hash_íåy
 * 
tmp_íåy
;

274 
nk_hash_íåy
 ** 
íåy_±r
;

275 
uöt_t
 
√w_size
;

276 
uöt_t
 
i
;

277 
uöt_t
 
ödex
;

280 i‡(
hèbÀ
->
¥ime_ödex
 =(
¥ime_èbÀ_Àngth
 - 1)) {

284 
√w_size
 = 
¥imes
[++(
hèbÀ
->
¥ime_ödex
)];

286 
√w_èbÀ
 = (
nk_hash_íåy
 **)
	`mÆloc
((nk_hash_íåy*Ë* 
√w_size
);

288 i‡(
√w_èbÀ
 !
NULL
) {

289 
	`mem£t
(
√w_èbÀ
, 0, 
√w_size
 * (
hash_íåy
 *));

293 
i
 = 0; i < 
hèbÀ
->
èbÀ_Àngth
; i++) {

295 (
tmp_íåy
 = 
hèbÀ
->
èbÀ
[
i
]Ë!
NULL
) {

296 
hèbÀ
->
èbÀ
[
i
] = 
tmp_íåy
->
√xt
;

298 
ödex
 = 
	`ödexF‹
(
√w_size
, 
tmp_íåy
->
hash
);

300 
tmp_íåy
->
√xt
 = 
√w_èbÀ
[
ödex
];

302 
√w_èbÀ
[
ödex
] = 
tmp_íåy
;

306 
	`‰ì
(
hèbÀ
->
èbÀ
);

308 
hèbÀ
->
èbÀ
 = 
√w_èbÀ
;

313 
√w_èbÀ
 = (
nk_hash_íåy
 **)
	`tmp_ªÆloc
(
hèbÀ
->
èbÀ
, 
¥imes
[hèbÀ->
¥ime_ödex
 - 1],

314 
√w_size
 * (
nk_hash_íåy
 *));

316 i‡(
√w_èbÀ
 =
NULL
) {

317 (
hèbÀ
->
¥ime_ödex
)--;

321 
hèbÀ
->
èbÀ
 = 
√w_èbÀ
;

323 
	`mem£t
(
√w_èbÀ
[
hèbÀ
->
èbÀ_Àngth
], 0, 
√w_size
 - htable->table_length);

325 
i
 = 0; i < 
hèbÀ
->
èbÀ_Àngth
; i++) {

327 
íåy_±r
 = &(
√w_èbÀ
[
i
]), 
tmp_íåy
 = *entry_ptr;

328 
tmp_íåy
 !
NULL
;

329 
tmp_íåy
 = *
íåy_±r
) {

331 
ödex
 = 
	`ödexF‹
(
√w_size
, 
tmp_íåy
->
hash
);

333 i‡(
i
 =
ödex
) {

334 
íåy_±r
 = &(
tmp_íåy
->
√xt
);

336 *
íåy_±r
 = 
tmp_íåy
->
√xt
;

337 
tmp_íåy
->
√xt
 = 
√w_èbÀ
[
ödex
];

338 
√w_èbÀ
[
ödex
] = 
tmp_íåy
;

344 
hèbÀ
->
èbÀ_Àngth
 = 
√w_size
;

346 
hèbÀ
->
lﬂd_limô
 = 
lﬂd_Á˘‹s
[hèbÀ->
¥ime_ödex
];

349 
	}
}

352 
uöt_t


353 
	$nk_hèbÀ_cou¡
 (
nk_hashèbÀ
 * 
hèbÀ
)

355  
hèbÀ
->
íåy_cou¡
;

356 
	}
}

360 
	$nk_hèbÀ_ö£π
 (
nk_hashèbÀ
 * 
hèbÀ
,

361 
addr_t
 
key
,

362 
addr_t
 
vÆue
)

365 
uöt_t
 
ödex
;

366 
nk_hash_íåy
 * 
√w_íåy
;

368 i‡(++(
hèbÀ
->
íåy_cou¡
Ë> hèbÀ->
lﬂd_limô
) {

373 
	`hashèbÀ_ex∑nd
(
hèbÀ
);

377 
√w_íåy
 = (
nk_hash_íåy
 *)
	`mÆloc
((nk_hash_entry));

379 i‡(
√w_íåy
 =
NULL
) {

380 (
hèbÀ
->
íåy_cou¡
)--;

384 
√w_íåy
->
hash
 = 
	`do_hash
(
hèbÀ
, 
key
);

386 
ödex
 = 
	`ödexF‹
(
hèbÀ
->
èbÀ_Àngth
, 
√w_íåy
->
hash
);

388 
√w_íåy
->
key
 = key;

389 
√w_íåy
->
vÆue
 = value;

391 
√w_íåy
->
√xt
 = 
hèbÀ
->
èbÀ
[
ödex
];

393 
hèbÀ
->
èbÀ
[
ödex
] = 
√w_íåy
;

396 
	}
}

401 
	$nk_hèbÀ_ch™ge
 (
nk_hashèbÀ
 * 
hèbÀ
,

402 
addr_t
 
key
,

403 
addr_t
 
vÆue
,

404 
‰ì_vÆue
)

406 
nk_hash_íåy
 * 
tmp_íåy
;

407 
uöt_t
 
hash_vÆue
;

408 
uöt_t
 
ödex
;

410 
hash_vÆue
 = 
	`do_hash
(
hèbÀ
, 
key
);

412 
ödex
 = 
	`ödexF‹
(
hèbÀ
->
èbÀ_Àngth
, 
hash_vÆue
);

414 
tmp_íåy
 = 
hèbÀ
->
èbÀ
[
ödex
];

416 
tmp_íåy
 !
NULL
) {

418 i‡((
hash_vÆue
 =
tmp_íåy
->
hash
Ë&& (
hèbÀ
->
	`eq_‚
(
key
,Åmp_entry->key))) {

420 i‡(
‰ì_vÆue
) {

421 
	`‰ì
((*)(
tmp_íåy
->
vÆue
));

424 
tmp_íåy
->
vÆue
 = value;

427 
tmp_íåy
 =Åmp_íåy->
√xt
;

430 
	}
}

435 
	$nk_hèbÀ_öc
 (
nk_hashèbÀ
 * 
hèbÀ
,

436 
addr_t
 
key
,

437 
addr_t
 
vÆue
)

439 
nk_hash_íåy
 * 
tmp_íåy
;

440 
uöt_t
 
hash_vÆue
;

441 
uöt_t
 
ödex
;

443 
hash_vÆue
 = 
	`do_hash
(
hèbÀ
, 
key
);

445 
ödex
 = 
	`ödexF‹
(
hèbÀ
->
èbÀ_Àngth
, 
hash_vÆue
);

447 
tmp_íåy
 = 
hèbÀ
->
èbÀ
[
ödex
];

449 
tmp_íåy
 !
NULL
) {

451 i‡((
hash_vÆue
 =
tmp_íåy
->
hash
Ë&& (
hèbÀ
->
	`eq_‚
(
key
,Åmp_entry->key))) {

453 
tmp_íåy
->
vÆue
 += value;

456 
tmp_íåy
 =Åmp_íåy->
√xt
;

459 
	}
}

463 
	$nk_hèbÀ_dec
 (
nk_hashèbÀ
 * 
hèbÀ
, 
addr_t
 
key
,áddr_à
vÆue
)

465 
nk_hash_íåy
 * 
tmp_íåy
;

466 
uöt_t
 
hash_vÆue
;

467 
uöt_t
 
ödex
;

469 
hash_vÆue
 = 
	`do_hash
(
hèbÀ
, 
key
);

471 
ödex
 = 
	`ödexF‹
(
hèbÀ
->
èbÀ_Àngth
, 
hash_vÆue
);

473 
tmp_íåy
 = 
hèbÀ
->
èbÀ
[
ödex
];

475 
tmp_íåy
 !
NULL
) {

477 i‡((
hash_vÆue
 =
tmp_íåy
->
hash
Ë&& (
hèbÀ
->
	`eq_‚
(
key
,Åmp_entry->key))) {

479 
tmp_íåy
->
vÆue
 -= value;

482 
tmp_íåy
 =Åmp_íåy->
√xt
;

485 
	}
}

492 
addr_t


493 
	$nk_hèbÀ_£¨ch
 (
nk_hashèbÀ
 * 
hèbÀ
, 
addr_t
 
key
)

495 
nk_hash_íåy
 * 
curs‹
;

496 
uöt_t
 
hash_vÆue
;

497 
uöt_t
 
ödex
;

499 
hash_vÆue
 = 
	`do_hash
(
hèbÀ
, 
key
);

501 
ödex
 = 
	`ödexF‹
(
hèbÀ
->
èbÀ_Àngth
, 
hash_vÆue
);

503 
curs‹
 = 
hèbÀ
->
èbÀ
[
ödex
];

505 
curs‹
 !
NULL
) {

507 i‡((
hash_vÆue
 =
curs‹
->
hash
) &&

508 (
hèbÀ
->
	`eq_‚
(
key
, 
curs‹
->key))) {

509  
curs‹
->
vÆue
;

512 
curs‹
 = curs‹->
√xt
;

515  (
addr_t
)
NULL
;

516 
	}
}

520 
addr_t


521 
	$nk_hèbÀ_ªmove
(
nk_hashèbÀ
 * 
hèbÀ
, 
addr_t
 
key
, 
‰ì_key
)

526 
nk_hash_íåy
 * 
curs‹
;

527 
nk_hash_íåy
 ** 
íåy_±r
;

528 
addr_t
 
vÆue
;

529 
uöt_t
 
hash_vÆue
;

530 
uöt_t
 
ödex
;

532 
hash_vÆue
 = 
	`do_hash
(
hèbÀ
, 
key
);

534 
ödex
 = 
	`ödexF‹
(
hèbÀ
->
èbÀ_Àngth
, 
hash_vÆue
);

536 
íåy_±r
 = &(
hèbÀ
->
èbÀ
[
ödex
]);

537 
curs‹
 = *
íåy_±r
;

539 
curs‹
 !
NULL
) {

541 i‡((
hash_vÆue
 =
curs‹
->
hash
) &&

542 (
hèbÀ
->
	`eq_‚
(
key
, 
curs‹
->key))) {

544 *
íåy_±r
 = 
curs‹
->
√xt
;

545 
hèbÀ
->
íåy_cou¡
--;

546 
vÆue
 = 
curs‹
->value;

548 i‡(
‰ì_key
) {

549 
	`‰ìkey
((*)(
curs‹
->
key
));

551 
	`‰ì
(
curs‹
);

553  
vÆue
;

556 
íåy_±r
 = &(
curs‹
->
√xt
);

557 
curs‹
 = curs‹->
√xt
;

559  (
addr_t
)
NULL
;

560 
	}
}

565 
	$nk_‰ì_hèbÀ
 (
nk_hashèbÀ
 * 
hèbÀ
, 
‰ì_vÆues
, 
‰ì_keys
)

567 
uöt_t
 
i
;

568 
nk_hash_íåy
 * 
curs‹
;;

569 
nk_hash_íåy
 **
èbÀ
 = 
hèbÀ
->table;

571 i‡(
‰ì_vÆues
) {

572 
i
 = 0; i < 
hèbÀ
->
èbÀ_Àngth
; i++) {

573 
curs‹
 = 
èbÀ
[
i
];

575 
curs‹
 !
NULL
) {

576 
nk_hash_íåy
 * 
tmp
;

578 
tmp
 = 
curs‹
;

579 
curs‹
 = curs‹->
√xt
;

581 i‡(
‰ì_keys
) {

582 
	`‰ìkey
((*)(
tmp
->
key
));

584 
	`‰ì
((*)(
tmp
->
vÆue
));

585 
	`‰ì
(
tmp
);

589 
i
 = 0; i < 
hèbÀ
->
èbÀ_Àngth
; i++) {

590 
curs‹
 = 
èbÀ
[
i
];

592 
curs‹
 !
NULL
) {

593 
nk_hash_íåy
 * 
tmp
;

595 
tmp
 = 
curs‹
;

596 
curs‹
 = curs‹->
√xt
;

598 i‡(
‰ì_keys
) {

599 
	`‰ìkey
((*)(
tmp
->
key
));

601 
	`‰ì
(
tmp
);

606 
	`‰ì
(
hèbÀ
->
èbÀ
);

607 
	`‰ì
(
hèbÀ
);

608 
	}
}

617 
nk_hashèbÀ_ôî
 *

618 
	$nk_¸óã_hèbÀ_ôî
 (
nk_hashèbÀ
 * 
hèbÀ
)

620 
uöt_t
 
i
;

621 
uöt_t
 
èbÀ_Àngth
;

623 
nk_hashèbÀ_ôî
 * 
ôî
 = (nk_hashèbÀ_ôî *)
	`mÆloc
((nk_hashtable_iter));

625 i‡(
ôî
 =
NULL
) {

626  
NULL
;

629 
ôî
->
hèbÀ
 = htable;

630 
ôî
->
íåy
 = 
NULL
;

631 
ôî
->
∑ª¡
 = 
NULL
;

632 
èbÀ_Àngth
 = 
hèbÀ
->table_length;

633 
ôî
->
ödex
 = 
èbÀ_Àngth
;

635 i‡(
hèbÀ
->
íåy_cou¡
 == 0) {

636  
ôî
;

639 
i
 = 0; i < 
èbÀ_Àngth
; i++) {

640 i‡(
hèbÀ
->
èbÀ
[
i
] !
NULL
) {

641 
ôî
->
íåy
 = 
hèbÀ
->
èbÀ
[
i
];

642 
ôî
->
ödex
 = 
i
;

647  
ôî
;

648 
	}
}

651 
addr_t


652 
	$nk_hèbÀ_gë_ôî_key
 (
nk_hashèbÀ_ôî
 * 
ôî
)

654  
ôî
->
íåy
->
key
;

655 
	}
}

657 
addr_t


658 
	$nk_hèbÀ_gë_ôî_vÆue
 (
nk_hashèbÀ_ôî
 * 
ôî
)

660  
ôî
->
íåy
->
vÆue
;

661 
	}
}

667 
	$nk_hèbÀ_ôî_adv™˚
 (
nk_hashèbÀ_ôî
 * 
ôî
)

669 
uöt_t
 
j
;

670 
uöt_t
 
èbÀ_Àngth
;

671 
nk_hash_íåy
 ** 
èbÀ
;

672 
nk_hash_íåy
 * 
√xt
;

674 i‡(
ôî
->
íåy
 =
NULL
) {

679 
√xt
 = 
ôî
->
íåy
->next;

681 i‡(
√xt
 !
NULL
) {

682 
ôî
->
∑ª¡
 = iãr->
íåy
;

683 
ôî
->
íåy
 = 
√xt
;

687 
èbÀ_Àngth
 = 
ôî
->
hèbÀ
->table_length;

688 
ôî
->
∑ª¡
 = 
NULL
;

690 i‡(
èbÀ_Àngth
 <(
j
 = ++(
ôî
->
ödex
))) {

691 
ôî
->
íåy
 = 
NULL
;

695 
èbÀ
 = 
ôî
->
hèbÀ
->table;

697 (
√xt
 = 
èbÀ
[
j
]Ë=
NULL
) {

698 i‡(++
j
 >
èbÀ_Àngth
) {

699 
ôî
->
ödex
 = 
èbÀ_Àngth
;

700 
ôî
->
íåy
 = 
NULL
;

705 
ôî
->
ödex
 = 
j
;

706 
ôî
->
íåy
 = 
√xt
;

709 
	}
}

719 
	$nk_hèbÀ_ôî_ªmove
 (
nk_hashèbÀ_ôî
 * 
ôî
, 
‰ì_key
)

721 
nk_hash_íåy
 * 
ªmembî_íåy
;

722 
nk_hash_íåy
 * 
ªmembî_∑ª¡
;

723 
ªt
;

726 i‡((
ôî
->
∑ª¡
Ë=
NULL
) {

728 
ôî
->
hèbÀ
->
èbÀ
[ôî->
ödex
] = iãr->
íåy
->
√xt
;

731 
ôî
->
∑ª¡
->
√xt
 = iãr->
íåy
->next;

736 
ªmembî_íåy
 = 
ôî
->
íåy
;

737 
ôî
->
hèbÀ
->
íåy_cou¡
--;

738 i‡(
‰ì_key
) {

739 
	`‰ìkey
((*)(
ªmembî_íåy
->
key
));

743 
ªmembî_∑ª¡
 = 
ôî
->
∑ª¡
;

744 
ªt
 = 
	`nk_hèbÀ_ôî_adv™˚
(
ôî
);

746 i‡(
ôî
->
∑ª¡
 =
ªmembî_íåy
) {

747 
ôî
->
∑ª¡
 = 
ªmembî_∑ª¡
;

750 
	`‰ì
(
ªmembî_íåy
);

751  
ªt
;

752 
	}
}

757 
	$nk_hèbÀ_ôî_£¨ch
 (
nk_hashèbÀ_ôî
 * 
ôî
,

758 
nk_hashèbÀ
 * 
hèbÀ
,

759 
addr_t
 
key
)

761 
nk_hash_íåy
 * 
íåy
;

762 
nk_hash_íåy
 * 
∑ª¡
;

763 
uöt_t
 
hash_vÆue
;

764 
uöt_t
 
ödex
;

766 
hash_vÆue
 = 
	`do_hash
(
hèbÀ
, 
key
);

767 
ödex
 = 
	`ödexF‹
(
hèbÀ
->
èbÀ_Àngth
, 
hash_vÆue
);

769 
íåy
 = 
hèbÀ
->
èbÀ
[
ödex
];

770 
∑ª¡
 = 
NULL
;

772 
íåy
 !
NULL
) {

774 i‡((
hash_vÆue
 =
íåy
->
hash
) &&

775 (
hèbÀ
->
	`eq_‚
(
key
, 
íåy
->key))) {

776 
ôî
->
ödex
 = index;

777 
ôî
->
íåy
 =Éntry;

778 
ôî
->
∑ª¡
 =Öarent;

779 
ôî
->
hèbÀ
 = htable;

782 
∑ª¡
 = 
íåy
;

783 
íåy
 =É¡ry->
√xt
;

786 
	}
}

790 
	$nk_de°roy_hèbÀ_ôî
 (
nk_hashèbÀ_ôî
 * 
ôî
)

792 i‡(
ôî
) {

793 
	`‰ì
(
ôî
);

795 
	}
}

	@idle.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/idÀ.h
>

25 
	~<«utûus/˝u.h
>

26 
	~<«utûus/úq.h
>

27 
	~<«utûus/thªad.h
>

28 
	~<«utûus/scheduÀr.h
>

30 #i‚de‡
NAUT_CONFIG_DEBUG_SCHED


31 #unde‡
DEBUG_PRINT


32 
	#DEBUG_PRINT
(...)

	)

36 
ölöe
 

37 
	$idÀ_dñay
 (
n
)

39 
i
 = 0;

40 --
n
) {

41 
i
 += 1;

42 
asm
 volatile ("":::"memory");

46 
n
 =Ç + 
i
;

47 
	}
}

51 
	$idÀ
 (* 
ö
, ** 
out
)

53 
	`gë_cur_thªad
()->
is_idÀ
 = 1;

55 
uöt64_t
 
œ°_°ól
 = 
	`nk_sched_gë_ru¡ime
(
	`gë_cur_thªad
());

56 
uöt64_t
 
ru¡ime
;

57 
uöt64_t
 
num°ﬁí
;

60 i‡(!
	`úqs_íabÀd
()) {

61 
	`∑nic
("IdleÑunning with interrupts off!");

64 #i‡
NAUT_CONFIG_WORK_STEALING


65 
ru¡ime
 = 
	`nk_sched_gë_ru¡ime
(
	`gë_cur_thªad
());

66 i‡((
ru¡ime
 - 
œ°_°ól
Ë> (
NAUT_CONFIG_WORK_STEALING_INTERVAL_MS
*1000000ULL)) {

67 
	`DEBUG_PRINT
("CPU %dÅryögÅÿ°ól\n",
	`my_˝u_id
());

68 
	`nk_sched_˝u_mug
(-1,
NAUT_CONFIG_WORK_STEALING_AMOUNT
,&
num°ﬁí
);

69 
	`DEBUG_PRINT
("CPU %d stﬁê%luÅhªads\n",
	`my_˝u_id
(),
num°ﬁí
);

70 
œ°_°ól
 = 
ru¡ime
;

75 
	`nk_yõld
();

77 #ifde‡
NAUT_CONFIG_XEON_PHI


78 
	`udñay
(1);

80 
	`idÀ_dñay
(100);

83 #ifde‡
NAUT_CONFIG_HALT_WHILE_IDLE


84 
	`°i
();

85 
	`hÆt
();

88 
	}
}

	@idt.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/idt.h
>

25 
	~<«utûus/öåösics.h
>

26 
	~<«utûus/«ut_°rög.h
>

27 
	~<«utûus/∑gög.h
>

28 
	~<«utûus/≥r˝u.h
>

29 
	~<«utûus/˝u.h
>

30 
	~<«utûus/thªad.h
>

31 
	~<«utûus/úq.h
>

32 
	~<«utûus/backåa˚.h
>

34 
ul⁄g_t
 
idt_h™dÀr_èbÀ
[
NUM_IDT_ENTRIES
];

35 
ul⁄g_t
 
idt_°©e_èbÀ
[
NUM_IDT_ENTRIES
];

37 
g©e_desc64
 
	gidt64
[
NUM_IDT_ENTRIES
] 
__Æign
(8);

39 
uöt8_t
 
˝u_öfo_ªady
;

41 
	#EXCP_NAME
 0

	)

42 
	#EXCP_MNEMONIC
 1

	)

43 c⁄° * 
	gex˝_codes
[
NUM_EXCEPTIONS
][2] = {

79 
idt_desc
 
	gidt_des¸ùt‹
 =

81 .
ba£_addr
 = (
uöt64_t
)&
idt64
,

82 .
	gsize
 = (
NUM_IDT_ENTRIES
*16)-1,

87 
	$nuŒ_ex˝_h™dÀr
 (
ex˝_íåy_t
 * 
ex˝
,

88 
ex˝_vec_t
 
ve˘‹
,

89 
addr_t
 
Áu…_addr
,

90 *
°©e
)

92 
˝u_id_t
 
˝u_id
 = 
˝u_öfo_ªady
 ? 
	`my_˝u_id
() : 0xffffffff;

94 
tid
 = 
˝u_öfo_ªady
 ? 
	`gë_cur_thªad
()->tid : 0xffffffff;

96 
	`¥ötk
("\n+++ UNHANDLED EXCEPTION +++\n");

98 i‡(
ve˘‹
 < 32) {

99 
	`¥ötk
("[%s] (0x%x)Érror=0x%x <%s>\n RIP=%p (core=%u,Åhread=%u)\n",

100 
ex˝_codes
[
ve˘‹
][
EXCP_NAME
],

101 
ve˘‹
,

102 
ex˝
->
îr‹_code
,

103 
ex˝_codes
[
ve˘‹
][
EXCP_MNEMONIC
],

104 (*)
ex˝
->
rù
,

105 
˝u_id
, 
tid
);

107 
	`¥ötk
("[Unknown Exception] (vector=0x%x)\n RIP=(%p) (core=%u)\n",

108 
ve˘‹
,

109 (*)
ex˝
->
rù
,

110 
˝u_id
);

113 
nk_ªgs
 * 
r
 = (nk_ªgs*)((*)
ex˝
 - 128);

114 
	`nk_¥öt_ªgs
(
r
);

115 
	`backåa˚
(
r
->
rbp
);

117 
	`∑nic
("+++ HALTING +++\n");

120 
	}
}

124 
	$nuŒ_úq_h™dÀr
 (
ex˝_íåy_t
 * 
ex˝
,

125 
ex˝_vec_t
 
ve˘‹
,

126 *
°©e
)

128 
	`¥ötk
("[Unhandled IRQ] (vector=0x%x)\n RIP=(%p) (core=%u)\n",

129 
ve˘‹
,

130 (*)
ex˝
->
rù
,

131 
	`my_˝u_id
());

133 
nk_ªgs
 * 
r
 = (nk_ªgs*)((*)
ex˝
 - 128);

134 
	`nk_¥öt_ªgs
(
r
);

135 
	`backåa˚
(
r
->
rbp
);

137 
	`∑nic
("+++ HALTING +++\n");

140 
	}
}

144 
	$df_h™dÀr
 (
ex˝_íåy_t
 * 
ex˝
,

145 
ex˝_vec_t
 
ve˘‹
,

146 
addr_t
 
unu£d
)

148 
	`∑nic
("DOUBLE FAULT. Dying.\n");

150 
	}
}

154 
	$pic_•ur_öt_h™dÀr
 (
ex˝_íåy_t
 * 
ex˝
,

155 
ex˝_vec_t
 
ve˘‹
,

156 
addr_t
 
unu£d
)

158 
	`WARN_PRINT
("Received Spurious interrupt from PIC\n");

161 
	}
}

165 
	$idt_assign_íåy
 (
ul⁄g_t
 
íåy
, ul⁄g_à
h™dÀr_addr
, ul⁄g_à
°©e_addr
)

168 i‡(
íåy
 >
NUM_IDT_ENTRIES
) {

169 
	`ERROR_PRINT
("Assigning invalid IDTÉntry\n");

173 i‡(!
h™dÀr_addr
) {

174 
	`ERROR_PRINT
("attemptÅoássignÇull handler\n");

178 
idt_h™dÀr_èbÀ
[
íåy
] = 
h™dÀr_addr
;

179 
idt_°©e_èbÀ
[
íåy
] = 
°©e_addr
;

182 
	}
}

185 
	$idt_gë_íåy
 (
ul⁄g_t
 
íåy
, ul⁄g_à*
h™dÀr_addr
, ul⁄g_à*
°©e_addr
)

188 i‡(
íåy
 >
NUM_IDT_ENTRIES
) {

189 
	`ERROR_PRINT
("Getting invalid IDTÉntry\n");

193 *
h™dÀr_addr
 = 
idt_h™dÀr_èbÀ
[
íåy
];

194 *
°©e_addr
 = 
idt_°©e_èbÀ
[
íåy
];

197 
	}
}

200 
óæy_úq_h™dÀrs
();

201 
óæy_ex˝_h™dÀrs
();

204 
	$£tup_idt
 ()

206 
uöt_t
 
i
;

208 
ul⁄g_t
 
úq_°¨t
 = (ul⁄g_t)&
óæy_úq_h™dÀrs
;

209 
ul⁄g_t
 
ex˝_°¨t
 = (ul⁄g_t)&
óæy_ex˝_h™dÀrs
;

212 
	`mem£t
(&
idt64
, 0, (
g©e_desc64
Ë* 
NUM_IDT_ENTRIES
);

214 
i
 = 0; i < 
NUM_EXCEPTIONS
; i++) {

215 
	`£t_öå_g©e
(
idt64
, 
i
, (*)(
ex˝_°¨t
 + i*16));

216 
	`idt_assign_íåy
(
i
, (
ul⁄g_t
)
nuŒ_ex˝_h™dÀr
, 0);

219 
i
 = 32; i < 
NUM_IDT_ENTRIES
; i++) {

220 
	`£t_öå_g©e
(
idt64
, 
i
, (*)(
úq_°¨t
 + (i-32)*16));

221 
	`idt_assign_íåy
(
i
, (
ul⁄g_t
)
nuŒ_úq_h™dÀr
, 0);

224 i‡(
	`idt_assign_íåy
(
PF_EXCP
, (
ul⁄g_t
)
nk_pf_h™dÀr
, 0) < 0) {

225 
	`ERROR_PRINT
("Couldn'tássignÖage fault handler\n");

229 i‡(
	`idt_assign_íåy
(
DF_EXCP
, (
ul⁄g_t
)
df_h™dÀr
, 0) < 0) {

230 
	`ERROR_PRINT
("Couldn'tássign double fault handler\n");

234 i‡(
	`idt_assign_íåy
(0xf, (
ul⁄g_t
)
pic_•ur_öt_h™dÀr
, 0) < 0) {

235 
	`ERROR_PRINT
("Couldn'tássign PIC spur int handler\n");

239 
	`lidt
(&
idt_des¸ùt‹
);

242 
	}
}

	@instrument.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/¥ötk.h
>

25 
	~<«utûus/hashèbÀ.h
>

26 
	~<«utûus/«ut_°rög.h
>

27 
	~<«utûus/≥r˝u.h
>

28 
	~<«utûus/©omic.h
>

29 
	~<«utûus/mm.h
>

30 
	~<«utûus/libccom∑t.h
>

31 
	~<«utûus/úq.h
>

33 
	~<«utûus/ö°rumít.h
>

35 
uöt8_t
 
	gö°r_a˘ive
 = 0;

36 
uöt64_t
 
	gö°r_°¨t_cou¡
 = 0;

37 
uöt64_t
 
	gö°r_íd_cou¡
 = 0;

39 
	sfunc_d©a
 {

40 
uöt64_t
 
	mˇŒ_cou¡
;

41 
uöt64_t
 
	mavg_n£c
;

42 
uöt64_t
 
	mmax_n£c
;

43 
uöt64_t
 
	mmö_n£c
;

44 
uöt64_t
 
	m°¨t_cou¡
;

45 
uöt64_t
 
	mtŸÆ_cou¡
;

50 
	$ö°r_hash_‚
(
addr_t
 
key
) {

51 * 
«me
 = (*)
key
;

52  
	`nk_hash_buf„r
((
uöt8_t
 *)
«me
, 
	`°æí
(name));

53 
	}
}

57 
	$ö°r_eq_‚
 (
addr_t
 
key1
,áddr_à
key2
) {

58 * 
«me1
 = (*)
key1
;

59 * 
«me2
 = (*)
key2
;

61  (
	`°rcmp
(
«me1
, 
«me2
) == 0);

62 
	}
}

66 
	$ö°r_ˇlibøã
 ()

68 
	`NK_PROFILE_ENTRY
();

70 
	`NK_PROFILE_EXIT
();

71 
	}
}

75 
	$nk_¥ofûe_func_íãr
 (c⁄° *
func
)

77 
func_d©a
 * 
√w
 = 
NULL
;

78 
time•ec
 
ts
;

80 i‡(!
ö°r_a˘ive
) {

84 i‡(!(
	`≥r_˝u_gë
(
ö°r_d©a
)->
func_hèbÀ
)) {

88 
√w
 = (
func_d©a
*)
	`nk_hèbÀ_£¨ch
(
	`≥r_˝u_gë
(
ö°r_d©a
)->
func_hèbÀ
, (
addr_t
)(
func
));

90 i‡(!
√w
) {

92 
√w
 = 
	`mÆloc
((
func_d©a
));

93 
	`mem£t
(
√w
, 0, (
func_d©a
));

95 
√w
->
ˇŒ_cou¡
 = 1;

96 
√w
->
mö_n£c
 = 
ULONG_MAX
;

98 
	`nk_hèbÀ_ö£π
(
	`≥r_˝u_gë
(
ö°r_d©a
)->
func_hèbÀ
, (
addr_t
)
func
, (addr_t)
√w
);

100 
√w
->
ˇŒ_cou¡
++;

103 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

104 
√w
->
°¨t_cou¡
 = 
ts
.
tv_£c
 * 1000000000 +Ås.
tv_n£c
;

105 
	}
}

109 
	$nk_¥ofûe_func_exô
 (c⁄° *
func
)

111 
time•ec
 
ã
;

112 
func_d©a
 * 
d©a
 = 
NULL
;

113 
uöt64_t
 
íd
;

114 
uöt64_t
 
time
;

116 i‡(!
ö°r_a˘ive
) {

120 i‡(!(
	`≥r_˝u_gë
(
ö°r_d©a
)->
func_hèbÀ
)) {

124 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ã
);

126 
d©a
 = (
func_d©a
*)
	`nk_hèbÀ_£¨ch
(
	`≥r_˝u_gë
(
ö°r_d©a
)->
func_hèbÀ
, (
addr_t
)
func
);

128 i‡(!
d©a
) {

131 
íd
 = 1000000000 * 
ã
.
tv_£c
 +Åe.
tv_n£c
;

132 i‡(
íd
 < 
d©a
->
°¨t_cou¡
) {

135 
time
 = 
íd
 - 
d©a
->
°¨t_cou¡
;

136 
d©a
->
tŸÆ_cou¡
 +
time
;

137 i‡(
time
 < 
d©a
->
mö_n£c
) {

138 
d©a
->
mö_n£c
 = 
time
;

140 i‡(
time
 > 
d©a
->
max_n£c
) {

141 
d©a
->
max_n£c
 = 
time
;

143 
d©a
->
avg_n£c
 = (((d©a->avg_n£¯* (d©a->
ˇŒ_cou¡
 - 1)Ë+ 
time
 )/ data->call_count);

145 
	}
}

150 
	$nk_ö°rumít_öô
 ()

152 
i
;

153 
uöt8_t
 
Êags
 = 
	`úq_dißbÀ_ßve
();

155 
i
 = 0; i < 
	`nk_gë_«utûus_öfo
()->
sys
.
num_˝us
; i++) {

156 
	`¥ötk
("öô in°rumíèti⁄ f‹ cpu %u\n", 
i
);

158 
˝u
 * 
this_˝u
 = 
	`nk_gë_«utûus_öfo
()->
sys
.
˝us
[
i
];

159 
Êags2
 = 
	`•ö_lock_úq_ßve
(&
this_˝u
->
lock
);

160 i‡(!
this_˝u
) {

161 
	`ERROR_PRINT
("CouldÇot get CPU\n");

162 
	`•ö_u∆ock_úq_ª°‹e
(&
this_˝u
->
lock
, 
Êags2
);

166 
this_˝u
->
ö°r_d©a
 = 
	`mÆloc
((
nk_ö°r_d©a
));

167 
	`mem£t
(
this_˝u
->
ö°r_d©a
, 0, (
nk_ö°r_d©a
));

168 
this_˝u
->
ö°r_d©a
->
mÆloc°©
.
mö_œãncy
 = 
ULONG_MAX
;

169 
this_˝u
->
ö°r_d©a
->
úq°©
.
mö_œãncy
 = 
ULONG_MAX
;

170 
this_˝u
->
ö°r_d©a
->
thr_swôch
.
mö_œãncy
 = 
ULONG_MAX
;

172 
this_˝u
->
ö°r_d©a
->
func_hèbÀ
 = 
	`nk_¸óã_hèbÀ
(0, 
ö°r_hash_‚
, 
ö°r_eq_‚
);

173 i‡(!
this_˝u
->
ö°r_d©a
->
func_hèbÀ
) {

174 
	`ERROR_PRINT
("CouldÇot create instrumentation hashÅable for core %u\n",

175 
i
);

176 
	`•ö_u∆ock_úq_ª°‹e
(&
this_˝u
->
lock
, 
Êags2
);

180 
	`•ö_u∆ock_úq_ª°‹e
(&
this_˝u
->
lock
, 
Êags2
);

183 
	`úq_íabÀ_ª°‹e
(
Êags
);

184 
	}
}

188 
	$nk_ö°rumít_°¨t
 ()

190 
time•ec
 
ts
;

191 
	`¥ötk
("Beginning Instrumentation\n");

192 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

193 
ö°r_°¨t_cou¡
 = 1000000000 * 
ts
.
tv_£c
 +Ås.
tv_n£c
;

194 
	`©omic_cmpsw≠
(
ö°r_a˘ive
, 0, 1);

195 
	}
}

198 
	$nk_ö°rumít_íd
 ()

200 
time•ec
 
ã
;

201 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ã
);

202 
ö°r_íd_cou¡
 = 1000000000 * 
ã
.
tv_£c
 +Åe.
tv_n£c
;

203 
	`¥ötk
("Deactivating instrumentation\n");

204 
	`©omic_cmpsw≠
(
ö°r_a˘ive
, 1, 0);

205 
	}
}

208 
	$nk_mÆloc_íãr
 ()

210 
mÆloc_d©a
 * 
md
 = 
NULL
;

211 
time•ec
 
ts
;

213 i‡(!
ö°r_a˘ive
) {

217 
md
 = &(
	`≥r_˝u_gë
(
ö°r_d©a
)->
mÆloc°©
);

218 
md
->
cou¡
++;

220 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

222 
md
->
°¨t_cou¡
 = 1000000000 * 
ts
.
tv_£c
 +Ås.
tv_n£c
;

223 
	}
}

226 
	$nk_mÆloc_exô
 ()

228 
mÆloc_d©a
 * 
md
 = 
NULL
;

229 
time•ec
 
ã
;

230 
uöt64_t
 
íd
;

231 
uöt64_t
 
time
;

233 i‡(!
ö°r_a˘ive
) {

237 
md
 = &(
	`≥r_˝u_gë
(
ö°r_d©a
)->
mÆloc°©
);

239 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ã
);

241 
íd
 = 1000000000 * 
ã
.
tv_£c
 +Åe.
tv_n£c
;

242 i‡(
íd
 < 
md
->
°¨t_cou¡
) {

245 
time
 = 
íd
 - 
md
->
°¨t_cou¡
;

246 i‡(
time
 < 
md
->
mö_œãncy
) {

247 
md
->
mö_œãncy
 = 
time
;

249 i‡(
time
 > 
md
->
max_œãncy
) {

250 
md
->
max_œãncy
 = 
time
;

252 
md
->
avg_œãncy
 = (((md->avg_œãncy * (md->
cou¡
 - 1)Ë+ 
time
)/ md->count);

253 
	}
}

257 
	$nk_úq_¥of_íãr
 ()

259 
úq_d©a
 * 
úq
 = 
NULL
;

260 
time•ec
 
ts
;

262 i‡(!
ö°r_a˘ive
) {

266 
úq
 = &(
	`≥r_˝u_gë
(
ö°r_d©a
)->
úq°©
);

267 
úq
->
cou¡
++;

269 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

271 
úq
->
°¨t_cou¡
 = 1000000000 * 
ts
.
tv_£c
 +Ås.
tv_n£c
;

272 
	}
}

276 
	$nk_úq_¥of_exô
 ()

278 
úq_d©a
 * 
úq
 = 
NULL
;

279 
time•ec
 
ã
;

280 
uöt64_t
 
íd
;

281 
uöt64_t
 
time
;

283 i‡(!
ö°r_a˘ive
) {

287 
úq
 = &(
	`≥r_˝u_gë
(
ö°r_d©a
)->
úq°©
);

289 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ã
);

291 
íd
 = 1000000000 * 
ã
.
tv_£c
 +Åe.
tv_n£c
;

292 i‡(
íd
 < 
úq
->
°¨t_cou¡
) {

295 
time
 = 
íd
 - 
úq
->
°¨t_cou¡
;

296 i‡(
time
 < 
úq
->
mö_œãncy
) {

297 
úq
->
mö_œãncy
 = 
time
;

299 i‡(
time
 > 
úq
->
max_œãncy
) {

300 
úq
->
max_œãncy
 = 
time
;

302 
úq
->
avg_œãncy
 = (((úq->avg_œãncy * (úq->
cou¡
 - 1)Ë+ 
time
)/ irq->count);

303 
	}
}

307 
	$nk_thr_swôch_¥of_íãr
 ()

309 
thªad_swôch_d©a
 * 
thr
 = 
NULL
;

310 
time•ec
 
ts
;

312 i‡(!
ö°r_a˘ive
) {

316 
thr
 = &(
	`≥r_˝u_gë
(
ö°r_d©a
)->
thr_swôch
);

317 
thr
->
cou¡
++;

319 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

321 
thr
->
°¨t_cou¡
 = 1000000000 * 
ts
.
tv_£c
 +Ås.
tv_n£c
;

322 
	}
}

326 
	$nk_thr_swôch_¥of_exô
 ()

328 
thªad_swôch_d©a
 * 
thr
 = 
NULL
;

329 
time•ec
 
ã
;

330 
uöt64_t
 
íd
;

331 
uöt64_t
 
time
;

333 i‡(!
ö°r_a˘ive
) {

337 
thr
 = &(
	`≥r_˝u_gë
(
ö°r_d©a
)->
thr_swôch
);

339 i‡(
thr
->
cou¡
 == 0) {

343 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ã
);

345 
íd
 = 1000000000 * 
ã
.
tv_£c
 +Åe.
tv_n£c
;

346 i‡(
íd
 < 
thr
->
°¨t_cou¡
) {

349 
time
 = 
íd
 - 
thr
->
°¨t_cou¡
;

350 i‡(
time
 < 
thr
->
mö_œãncy
) {

351 
thr
->
mö_œãncy
 = 
time
;

353 i‡(
time
 > 
thr
->
max_œãncy
) {

354 
thr
->
max_œãncy
 = 
time
;

356 
thr
->
avg_œãncy
 = ((—hr->avg_œãncy * (thr->
cou¡
 - 1)Ë+ 
time
)/Åhr->count);

357 
	}
}

361 
	$nk_ö°rumít_quîy
 ()

363 
i
;

365 
	`¥ötk
("Dumping instrumentation data...\n");

366 
i
 = 0; i < 
	`nk_gë_«utûus_öfo
()->
sys
.
num_˝us
; i++) {

367 
˝u
 * 
this_˝u
 = 
	`nk_gë_«utûus_öfo
()->
sys
.
˝us
[
i
];

370 
	`¥ötk
("Fun˘i⁄ TabÀ Sèt†f‹ C‹ê%u:\n", 
i
);

371 
nk_hashèbÀ_ôî
 * 
ôî
 = 
	`nk_¸óã_hèbÀ_ôî
(
this_˝u
->
ö°r_d©a
->
func_hèbÀ
);

372 i‡(!
ôî
) {

373 
	`ERROR_PRINT
("CouldÇŸ iãøã ovî fun˘i⁄ hèbÀ o¿c‹ê%u\n", 
i
);

378 * 
func
 = (*)
	`nk_hèbÀ_gë_ôî_key
(
ôî
);

379 
func_d©a
 * 
d©a
 = (func_d©a*)
	`nk_hèbÀ_gë_ôî_vÆue
(
ôî
);

381 
uöt64_t
 
tŸÆ_n£c
 = (
ö°r_íd_cou¡
 - 
ö°r_°¨t_cou¡
);

383 i‡(
d©a
->
ˇŒ_cou¡
 > 0) {

384 
	`¥ötk
("\t%lu.%lu\% Func: %s\n\tCount: %16u Lat - Avg: %16llunsec Max: %16llunsec Min: %16llunsec\n",

385 
d©a
->
tŸÆ_cou¡
 / 
tŸÆ_n£c
,

386 
d©a
->
tŸÆ_cou¡
 % 
tŸÆ_n£c
,

387 
func
,

388 
d©a
->
ˇŒ_cou¡
,

389 
d©a
->
avg_n£c
,

390 
d©a
->
max_n£c
,

391 
d©a
->
mö_n£c
);

395 } 
	`nk_hèbÀ_ôî_adv™˚
(
ôî
) != 0);

397 
	`¥ötk
("MÆlo¯Sèt†f‹ C‹ê%u:\n", 
i
);

400 
	`¥ötk
("\tCount: %16u Lat - Avg: %16llunsec, Max: %16llunsec Min: %16llunsec\n",

401 
this_˝u
->
ö°r_d©a
->
mÆloc°©
.
cou¡
,

402 
this_˝u
->
ö°r_d©a
->
mÆloc°©
.
avg_œãncy
,

403 
this_˝u
->
ö°r_d©a
->
mÆloc°©
.
max_œãncy
,

404 
this_˝u
->
ö°r_d©a
->
mÆloc°©
.
mö_œãncy
);

405 
	`¥ötk
("IRQ Sèt†f‹ C‹ê%u:\n", 
i
);

406 
	`¥ötk
("\tCount: %16u Lat - Avg: %16llunsec Max: %16llunsec Min: %16llunsec\n",

407 
this_˝u
->
ö°r_d©a
->
úq°©
.
cou¡
,

408 
this_˝u
->
ö°r_d©a
->
úq°©
.
avg_œãncy
,

409 
this_˝u
->
ö°r_d©a
->
úq°©
.
max_œãncy
,

410 
this_˝u
->
ö°r_d©a
->
úq°©
.
mö_œãncy
);

411 
	`¥ötk
("Thªad Swôch Sèt†f‹ C‹ê%u:\n", 
i
);

412 
	`¥ötk
("\tCount: %16u Lat - Avg: %16llunsec Max: %16llunsec Min: %16llunsec\n",

414 
this_˝u
->
ö°r_d©a
->
thr_swôch
.
cou¡
,

415 
this_˝u
->
ö°r_d©a
->
thr_swôch
.
avg_œãncy
,

416 
this_˝u
->
ö°r_d©a
->
thr_swôch
.
max_œãncy
,

417 
this_˝u
->
ö°r_d©a
->
thr_swôch
.
mö_œãncy
);

420 
	}
}

424 
	$nk_ö°rumít_ˇlibøã
 (
lo›s
)

426 
i
;

427 
i
 = 0; i < 
lo›s
; i++) {

428 
	`ö°r_ˇlibøã
();

430 
	}
}

	@irq.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/idt.h
>

25 
	~<«utûus/úq.h
>

26 
	~<«utûus/˝u.h
>

27 
	~<«utûus/mm.h
>

29 
	#PIC_MASTER_CMD_PORT
 0x20

	)

30 
	#PIC_MASTER_DATA_PORT
 0x21

	)

31 
	#PIC_SLAVE_CMD_PORT
 0xa0

	)

32 
	#PIC_SLAVE_DATA_PORT
 0xa1

	)

34 
	#MAX_IRQ_NUM
 15

35 

	)

62 
uöt8_t


63 
	$úq_to_vec
 (
uöt8_t
 
úq
)

65  
	`nk_gë_«utûus_öfo
()->
sys
.
öt_öfo
.
úq_m≠
[
úq
].
ve˘‹
;

66 
	}
}

69 
	$úqm≠_£t_iﬂpic
 (
uöt8_t
 
úq
, 
iﬂpic
 * ioapic)

71 
«ut_öfo
 * 
«ut
 = 
	`nk_gë_«utûus_öfo
();

72 
«ut
->
sys
.
öt_öfo
.
úq_m≠
[
úq
].
iﬂpic
 = ioapic;

73 
«ut
->
sys
.
öt_öfo
.
úq_m≠
[
úq
].
assig√d
 = 1;

74 
	}
}

76 
ölöe
 

77 
	$£t_úq_ve˘‹
 (
uöt8_t
 
úq
, uöt8_à
ve˘‹
)

79 
	`nk_gë_«utûus_öfo
()->
sys
.
öt_öfo
.
úq_m≠
[
úq
].
ve˘‹
 = vector;

80 
	}
}

84 
	$nk_mask_úq
 (
uöt8_t
 
úq
)

86 
«ut_öfo
 * 
«ut
 = 
	`nk_gë_«utûus_öfo
();

87 i‡(
	`nk_úq_is_assig√d
(
úq
)) {

88 
	`iﬂpic_mask_úq
(
«ut
->
sys
.
öt_öfo
.
úq_m≠
[
úq
].
iﬂpic
, irq);

90 
	}
}

94 
	$nk_unmask_úq
 (
uöt8_t
 
úq
)

96 
«ut_öfo
 * 
«ut
 = 
	`nk_gë_«utûus_öfo
();

97 i‡(
	`nk_úq_is_assig√d
(
úq
)) {

98 
	`iﬂpic_unmask_úq
(
«ut
->
sys
.
öt_öfo
.
úq_m≠
[
úq
].
iﬂpic
, irq);

100 
	}
}

103 
uöt8_t


104 
	$nk_úq_is_assig√d
 (
uöt8_t
 
úq
)

106 
«ut_öfo
 * 
«ut
 = 
	`nk_gë_«utûus_öfo
();

107  
«ut
->
sys
.
öt_öfo
.
úq_m≠
[
úq
].
assig√d
;

108 
	}
}

118 
ªgi°î_öt_h™dÀr
 (
uöt16_t
 
öt_vec
,

119 (*
h™dÀr
)(
ex˝_íåy_t
 *, 
ex˝_vec_t
, *),

120 * 
¥iv_d©a
)

123 i‡(!
h™dÀr
) {

124 
	`ERROR_PRINT
("AttemptÅoÑegister interrupt %d with invalid handler\n");

128 i‡(
öt_vec
 > 0xff) {

129 
	`ERROR_PRINT
("Aâem±Åÿªgi°î invÆid i¡îru±(0x%x)\n", 
öt_vec
);

133 
	`idt_assign_íåy
(
öt_vec
, (
ul⁄g_t
)
h™dÀr
, (ul⁄g_t)
¥iv_d©a
);

136 
	}
}

140 
ªgi°î_úq_h™dÀr
 (
uöt16_t
 
úq
,

141 (*
h™dÀr
)(
ex˝_íåy_t
 *, 
ex˝_vec_t
, *),

142 * 
¥iv_d©a
)

144 
uöt8_t
 
öt_ve˘‹
;

146 i‡(!
h™dÀr
) {

147 
	`ERROR_PRINT
("AttemptÅoÑegister IRQ %d with invalid handler\n");

151 i‡(
úq
 > 
MAX_IRQ_NUM
) {

152 
	`ERROR_PRINT
("Aâem±Åÿªgi°î invÆid IRQ (0x%x)\n", 
úq
);

156 
öt_ve˘‹
 = 
	`úq_to_vec
(
úq
);

158 
	`idt_assign_íåy
(
öt_ve˘‹
, (
ul⁄g_t
)
h™dÀr
, (ul⁄g_t)
¥iv_d©a
);

161 
	}
}

165 
	$dißbÀ_8259pic
 ()

167 
	`¥ötk
("DisablingÜegacy 8259 PIC\n");

168 
	`outb
(0xff, 
PIC_MASTER_DATA_PORT
);

169 
	`outb
(0xff, 
PIC_SLAVE_DATA_PORT
);

170 
	}
}

173 
	$im¸_begö_sym_io
 ()

176 
	`outb
(0x70, 0x22);

177 
	`outb
(0x01, 0x23);

178 
	}
}

181 
uöt8_t


182 
	$nk_öt_m©ches_bus
 (
nk_öt_íåy
 * 
íåy
, c⁄° * 
bus_ty≥
, c⁄° 
uöt8_t
 
Àn
)

184 
uöt8_t
 
§c_bus
;

185 
nk_bus_íåy
 * 
bus
;

188 
§c_bus
 = 
íåy
->
§c_bus_id
;

190 
	`li°_f‹_óch_íåy
(
bus
,

191 &(
	`nk_gë_«utûus_öfo
()->
sys
.
öt_öfo
.
bus_li°
),

192 
ñm
) {

194 i‡(
bus
->
bus_id
 =
íåy
->
§c_bus_id
) {

195  !
	`°∫cmp
(
bus
->
bus_ty≥
, bus_ty≥, 
Àn
);

201 
	}
}

205 
	$nk_add_bus_íåy
 (c⁄° 
uöt8_t
 
bus_id
, c⁄° * 
bus_ty≥
)

207 
nk_bus_íåy
 * 
bus
 = 
NULL
;

208 
«ut_öfo
 * 
«ut
 = 
	`nk_gë_«utûus_öfo
();

210 
bus
 = 
	`mm_boŸ_Æloc
((
nk_bus_íåy
));

211 i‡(!
bus
) {

212 
	`ERROR_PRINT
("CouldÇotállocate busÉntry\n");

215 
	`mem£t
(
bus
, 0, (
nk_bus_íåy
));

217 
bus
->
bus_id
 = bus_id;

218 
	`mem˝y
((*)
bus
->
bus_ty≥
, bus_type, 6);

220 
	`li°_add
(&(
bus
->
ñm
), &(
«ut
->
sys
.
öt_öfo
.
bus_li°
));

222 
	}
}

225 
	$nk_add_öt_íåy
 (
öt_åig_t
 
åig_mode
,

226 
öt_pﬁ_t
 
pﬁ¨ôy
,

227 
öt_ty≥_t
 
ty≥
,

228 
uöt8_t
 
§c_bus_id
,

229 
uöt8_t
 
§c_bus_úq
,

230 
uöt8_t
 
d°_iﬂpic_ötö
,

231 
uöt8_t
 
d°_iﬂpic_id
)

233 
nk_öt_íåy
 * 
√w
 = 
NULL
;

234 
«ut_öfo
 * 
«ut
 = 
	`nk_gë_«utûus_öfo
();

236 
√w
 = 
	`mm_boŸ_Æloc
((
nk_öt_íåy
));

237 i‡(!
√w
) {

238 
	`ERROR_PRINT
("CouldÇotállocate IRQÉntry\n");

241 
	`mem£t
(
√w
, 0, (
nk_öt_íåy
));

243 
√w
->
åig_mode
 =Årig_mode;

244 
√w
->
pﬁ¨ôy
 =Öolarity;

245 
√w
->
ty≥
 =Åype;

246 
√w
->
§c_bus_id
 = src_bus_id;

247 
√w
->
§c_bus_úq
 = src_bus_irq;

248 
√w
->
d°_iﬂpic_ötö
 = dst_ioapic_intin;

249 
√w
->
d°_iﬂpic_id
 = dst_ioapic_id;

251 
	`li°_add
(&(
√w
->
ñm
), &(
«ut
->
sys
.
öt_öfo
.
öt_li°
));

252 
	}
}

256 
	$nk_öt_öô
 (
sys_öfo
 * 
sys
)

258 
nk_öt_öfo
 * 
öfo
 = &(
sys
->
öt_öfo
);

259 
i
;

260 
uöt8_t
 
ve˘‹
;

265 
i
 = 0; i < 256; i++) {

266 
	`£t_úq_ve˘‹
(
i
, 0xfe);

271 
i
 = 0, 
ve˘‹
 = 0xef; vector > 0x1f; vector--, i++) {

272 
	`£t_úq_ve˘‹
(
i
, 
ve˘‹
);

275 
	`INIT_LIST_HEAD
(&(
öfo
->
öt_li°
));

276 
	`INIT_LIST_HEAD
(&(
öfo
->
bus_li°
));

279 
	}
}

	@isocore.c

30 
	~<«utûus/«utûus.h
>

32 #i‚de‡
NAUT_CONFIG_DEBUG_ISOCORE


33 #unde‡
DEBUG_PRINT


34 
	#DEBUG_PRINT
(
fmt
, 
¨gs
...)

	)

37 
	#ERROR
(
fmt
, 
¨gs
...Ë
	`ERROR_PRINT
("isoc‹e: " fmt, ##¨gs)

	)

38 
	#DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("isoc‹e: " fmt, ##¨gs)

	)

39 
	#INFO
(
fmt
, 
¨gs
...Ë
	`INFO_PRINT
("isoc‹e: " fmt, ##¨gs)

	)

41 
	#FLOOR_DIV
(
x
,
y
Ë((x)/(y))

	)

42 
	#CEIL_DIV
(
x
,
y
Ë(((x)/(y)Ë+ !!((x)%(y)))

	)

43 
	#DIVIDES
(
x
,
y
Ë(((x)%(y))==0)

	)

44 
	#MAX
(
x
,
y
Ë((x)>(yË? (xË: (y))

	)

45 
	#MIN
(
x
,
y
Ë((x)<(yË? (xË: (y))

	)

47 
nk_isﬁ©e
((*
code
)(*
¨g
),

48 
uöt64_t
 
codesize
,

49 
uöt64_t
 
°acksize
,

50 *
¨g
)

53 
	`DEBUG
("nk_isﬁ©e(code=%p, codesize=%lu\n",
code
, 
codesize
);

54 
	`DEBUG
(" sècksize=%lu,árg=%p\n", 
°acksize
, 
¨g
);

69 
uöt64_t
 
code_∑ges
 = 
	`CEIL_DIV
(
codesize
,
PAGE_SIZE_4KB
);

70 
uöt64_t
 
°ack_∑ges
 = 
	`CEIL_DIV
(
°acksize
,
PAGE_SIZE_4KB
);

71 
uöt64_t
 
tŸÆ_∑ges
 = 
code_∑ges
+
°ack_∑ges
;

73 
	`DEBUG
("Allocating %lu codeÖagesánd %lu stackÖages\n",

74 
code_∑ges
,
°ack_∑ges
);

77 *
ˇpsuÀ
 = 
	`mÆloc
(
tŸÆ_∑ges
*
PAGE_SIZE_4KB
);

79 i‡(!
ˇpsuÀ
) {

80 
	`ERROR
("UnableÅoállocate capsule\n");

84 
	`DEBUG
("C≠suÀáŒoˇãdáà%p\n",
ˇpsuÀ
);

87 
	`mem£t
(
ˇpsuÀ
,0,
tŸÆ_∑ges
*
PAGE_SIZE_4KB
);

90 
	`mem˝y
(
ˇpsuÀ
+
°ack_∑ges
*
PAGE_SIZE_4KB
,

91 
code
,

92 
codesize
);

99 
	`_nk_isﬁ©e_íåy
(*,

100 
uöt64_t
,

104 
	`DEBUG
("LaunchögÜow-Àvñ c≠suÀ code, c≠suÀ=%p, size=%lu,É¡ry=%p,Ñdi=%p\n", 
ˇpsuÀ
, 
tŸÆ_∑ges
*
PAGE_SIZE_4KB
, c≠suÀ+
°ack_∑ges
*PAGE_SIZE_4KB, 
¨g
);

106 
	`_nk_isﬁ©e_íåy
(
ˇpsuÀ
,

107 
tŸÆ_∑ges
*
PAGE_SIZE_4KB
,

108 
ˇpsuÀ
+
°ack_∑ges
*
PAGE_SIZE_4KB
,

109 
¨g
);

113 
	`ERROR
("The impossible has happened - _nk_isolate_entryÑeturned!\n");

115 
	}
}

	@libccompat.c

30 
	~<«utûus/«utûus.h
>

31 
	~<«utûus/libccom∑t.h
>

32 
	~<«utûus/thªad.h
>

33 
	~<«utûus/î∫o.h
>

34 
	~<«utûus/øndom.h
>

35 
	~<dev/h≥t.h
>

38 
	#GEN_DEF
(
x
) \

39 
	`x
 () { \

40 
	`UNDEF_FUN_ERR
(); \

42 }

	)

45 
uöt64_t
 
	gdummy_m⁄o_˛ock
 = 0;

47 
time_t


48 
	$time
 (
time_t
 * 
timî
)

50 
time•ec
 
ç
;

51 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ç
);

53 i‡(
timî
) {

54 *
timî
 = 
ç
.
tv_n£c
;

56  
ç
.
tv_n£c
;

57 
	}
}

61 
	$ab‹t
()

63 
	`¥ötk
("Thread calledábort\n");

64 
	`nk_thªad_exô
(
NULL
);

65 
	}
}

69 
	$__p›cou¡di2
 (
a
)

71 
x2
 = ()
a
;

72 
x2
 = x2 - ((x2 >> 1) & 0x5555555555555555uLL);

74 
x2
 = ((x2 >> 2) & 0x3333333333333333uLL) + (x2 & 0x3333333333333333uLL);

76 
x2
 = (x2 + (x2 >> 4)) & 0x0F0F0F0F0F0F0F0FuLL;

78 
x
 = ()(
x2
 + (x2 >> 32));

81 
x
 = x + (x >> 16);

84  (
x
 + (x >> 8)) & 0x0000007F;

85 
	}
}

88 
	$exô
(
°©us
)

90 
	`¥ötk
("Thªad cÆÀdÉxô (°©us=%d)\n", 
°©us
);

91 
	`nk_thªad_exô
((*)()
°©us
);

92 
	}
}

95 
	$˛ock_gëtime
 (
˛ockid_t
 
˛k_id
, 
time•ec
 * 
ç
)

98 i‡(
˛k_id
 !
CLOCK_MONOTONIC
) {

99 
	`¥ötk
("NAUTILUS WARNING: using invalid clockÅype\n");

100  -
EINVAL
;

103 i‡(!
ç
) {

104 
	`¥ötk
("NAUTILUS WARNING: using invalidÅimespec\n");

105  -
EINVAL
;

108 #ifde‡
NAUT_CONFIG_HPET


110 
uöt64_t
 
˙t
 = 
	`nk_h≥t_gë_˙å
();

112 
uöt64_t
 
n£c
 = 
˙t
 * 
	`nk_h≥t_«nos_≥r_tick
();

113 
ç
->
tv_£c
 = 
n£c
 / 1000000000;

114 
ç
->
tv_n£c
 = 
n£c
 % 1000000000;

117 
ç
->
tv_n£c
 = 
dummy_m⁄o_˛ock
*100000;

118 
ç
->
tv_£c
 = 
dummy_m⁄o_˛ock
/10000;

119 ++
dummy_m⁄o_˛ock
;

123 
	}
}

127 
	$__as£π_Áû
 (c⁄° * 
as£πi⁄
, c⁄° * 
fûe
, 
löe
, c⁄° * 
fun˘i⁄
)

129 
	`∑nic
("Failedássertion in %s: %sát %s,Üine %d, RA=%lx\n",

130 
fun˘i⁄
,

131 
as£πi⁄
,

132 
fûe
,

133 
löe
,

134 
	`__buûtö_ªtu∫_addªss
(0));

135 
	}
}

139 
	$vÂrötf
 (
FILE
 * 
°ªam
, c⁄° * 
f‹m©
, 
va_li°
 
¨g
)

141 
	`UNDEF_FUN_ERR
();

143 
	}
}

147 
	$ønd
 () {

148 
r
;

150 
	`nk_gë_ønd_byãs
((
uöt8_t
*)&
r
, 4);

152  
RAND_MAX
 / 
r
;

153 
	}
}

156 
	$§™d
 (
£ed
)

158 
uöt64_t
 
s
 = ((uöt64_t)
£ed
) << 32;

159 
	`nk_ønd_£ed
(
s
 | 0x330e);

160 
	}
}

166 
	$§™d48
 (
£edvÆ
)

168 
uöt64_t
 
tmp
 = (((uöt64_tË
£edvÆ
) & 0xffffffffull) << 32;

169 
	`nk_ønd_£ed
(
tmp
 | 0x330e);

170 
	}
}

174 
	$Ã™d48
 ()

176 
nk_ønd_öfo
 * 
ønd
 = 
	`≥r_˝u_gë
(rand);

177 
uöt64_t
 
xi
 = 
ønd
->xi;

178 
uöt64_t
 
£ed
 = 
ønd
->seed;

179 
uöt64_t
 
n
 = 
ønd
->n;

180 
uöt64_t
 
m
 = 2ull << 48;

181 
uöt64_t
 
a
 = 0x5deece66d;

182 
uöt64_t
 
c
 = 0xb;

183 
uöt64_t
 
xi_√w
 = (
a
*
xi
*
n
 + 
c
Ë% 
m
;

185 
	`nk_ønd_£t_xi
(
xi_√w
);

187  
xi_√w
;

188 
	}
}

191 
	uõì754dbl
 {

192 
	md
;

193 
uöt64_t
 
	mui
;

195 
uöt32_t
 
	mm™tisß1
 : 32;

196 
uöt32_t
 
	mm™tisß0
 : 20;

197 
uöt32_t
 
	mexp⁄ít
 : 11;

198 
uöt32_t
 
	msign
 :1;

199 } 
	m__∑cked
;

200 } 
	g__∑cked
;

203 
	$dønd48
()

205 
nk_ønd_öfo
 * 
ønd
 = 
	`≥r_˝u_gë
(rand);

206 
uöt8_t
 
Êags
 = 
	`•ö_lock_úq_ßve
(&
ønd
->
lock
);

207 
uöt64_t
 
xi
 = 
ønd
->xi;

208 
uöt64_t
 
n
 = 
ønd
->n;

209 
uöt64_t
 
m
 = 2ull << 48;

210 
uöt64_t
 
a
 = 0x5deece66dull;

211 
uöt64_t
 
c
 = 0xb;

212 
uöt64_t
 
xi_√w
 = (
a
*
xi
 + 
c
Ë% 
m
;

213 
uöt16_t
 *
xic
 = (uöt16_t*)&(
ønd
->
xi
);

215 
õì754dbl
 
ªt
;

217 
	`nk_ønd_£t_xi
(
xi_√w
);

219 
ªt
.
sign
 = 0;

220 
ªt
.
exp⁄ít
 = 0x3ff;

221 
ªt
.
m™tisß0
 = (
xic
[2] << 4) | (xic[1] >> 12);

222 
ªt
.
m™tisß1
 = ((
xic
[1] & 0xfff) << 20) | (xic[0] << 4);

224 
	`•ö_u∆ock_úq_ª°‹e
(&
ønd
->
lock
, 
Êags
);

225  
ªt
.
d
 - 1.0;

226 
	}
}

230 
	$°ªº‹
 (
î∫um
)

232 
	`UNDEF_FUN_ERR
();

233  
NULL
;

234 
	}
}

237 
	$f˛o£
 (
FILE
 * 
f
)

239 
	`UNDEF_FUN_ERR
();

241 
	}
}

244 
FILE
 *

245 
	$f›í
 (c⁄° * 
∑th
, 
FILE
 * 
f
)

247 
	`UNDEF_FUN_ERR
();

248  
NULL
;

249 
	}
}

252 
FILE
 *

253 
	$f›í64
 (c⁄° * 
∑th
, 
FILE
 * 
f
)

255 
	`UNDEF_FUN_ERR
();

256  
NULL
;

257 
	}
}

260 
FILE
 *

261 
	$fd›í
 (
fd
, c⁄° * 
mode
)

263 
	`UNDEF_FUN_ERR
();

264  
NULL
;

265 
	}
}

269 
	$fÊush
 (
FILE
 * 
f
)

272 
	}
}

276 
	$Ârötf
 (
FILE
 * 
f
, c⁄° * 
s
, ...)

279 
	`UNDEF_FUN_ERR
();

282 
va_li°
 
¨g
;

283 
	`va_°¨t
(
¨g
,
s
);

284 
	`v¥ötk
(
s
, 
¨g
);

285 
	`va_íd
(
¨g
);

288 
	}
}

291 
	$¥ötf
 (c⁄° * 
s
, ...)

294 
	`UNDEF_FUN_ERR
();

297 
va_li°
 
¨g
;

298 
	`va_°¨t
(
¨g
,
s
);

299 
	`v¥ötk
(
s
, 
¨g
);

300 
	`va_íd
(
¨g
);

303 
	}
}

306 
	$Âutc
 (
c
, 
FILE
 * 
f
)

308 
	`¥ötk
("%c");

309  
c
;

310 
	}
}

314 
	$Âuts
 (c⁄° * 
s
, 
FILE
 * 
f
)

316 
	`¥ötk
("%s\n", 
s
);

318 
	}
}

321 
size_t


322 
	$fwrôe
 (c⁄° * 
±r
, 
size_t
 
size
, size_à
cou¡
, 
FILE
 * 
°ªam
)

324 
	`UNDEF_FUN_ERR
();

326 
	}
}

328 
size_t


329 
	$‰ód
 (* 
±r
, 
size_t
 
size
, size_à
cou¡
, 
FILE
 * 
°ªam
)

331 
	`UNDEF_FUN_ERR
();

333 
	}
}

336 
	$gëwc
 (
FILE
 * 
°ªam
)

338 
	`UNDEF_FUN_ERR
();

340 
	}
}

343 
size_t


344 
	$__˘y≥_gë_mb_cur_max
 ()

346 
	`UNDEF_FUN_ERR
();

348 
	}
}

352 
	$f£eko64
 (
FILE
 *
Â
, 
uöt64_t
 
off£t
, 
whí˚
)

354 
	`UNDEF_FUN_ERR
();

356 
	}
}

360 
	$ungëc
 (
ch¨a˘î
, 
FILE
 * 
°ªam
)

362 
	`UNDEF_FUN_ERR
();

364 
	}
}

367 
uöt64_t


368 
	$l£ek64
 (
fd
, 
uöt64_t
 
off£t
, 
whí˚
)

370 
	`UNDEF_FUN_ERR
();

372 
	}
}

374 
uöt64_t


375 
	$·ñlo64
 (
FILE
 *
°ªam
)

377 
	`UNDEF_FUN_ERR
();

379 
	}
}

382 
	$pﬁl
 (
pﬁlfd
 *
fds
, 
nfds_t
 
nfds
, 
timeout
)

384 
	`UNDEF_FUN_ERR
();

386 
	}
}

389 
	$io˘l
 (
d
, 
ªque°
, ...)

391 
	`UNDEF_FUN_ERR
();

393 
	}
}

396 
	$sysˇŒ
 (
numbî
, ...)

398 
	`UNDEF_FUN_ERR
();

400 
	}
}

405 
	$£éoˇÀ
 (
ˇãg‹y
, c⁄° *
loˇÀ
)

407 
	`UNDEF_FUN_ERR
();

408  
NULL
;

409 
	}
}

411 
loˇÀ_t


412 
	$__du∂oˇÀ
 (
loˇÀ_t
 
locobj
)

414 
	`UNDEF_FUN_ERR
();

415  
NULL
;

416 
	}
}

419 
	$bödãxtdomaö
 (c⁄° * 
domaö«me
, c⁄° * 
dú«me
)

421 
	`UNDEF_FUN_ERR
();

422  
NULL
;

423 
	}
}

426 
	$ãxtdomaö
 (c⁄° * 
domaö«me
)

428 
	`UNDEF_FUN_ERR
();

429  
NULL
;

430 
	}
}

432 
loˇÀ_t


433 
	$__√wloˇÀ
 (
ˇãg‹y_mask
, c⁄° *
loˇÀ
, 
loˇÀ_t
 
ba£
)

435  (
loˇÀ_t
)((
ul⁄g_t
)
ba£
 | (ul⁄g_t)
ˇãg‹y_mask
);

436 
	}
}

439 
	$__∆_œngöfo_l
 (
∆_ôem
 
ôem
, 
loˇÀ_t
 
loˇÀ
)

441 
	`UNDEF_FUN_ERR
();

442  
NULL
;

443 
	}
}

446 
	$gëãxt
 (c⁄° * 
msgid
)

448 * 
ªt
 = (*)
msgid
;

449 
	`UNDEF_FUN_ERR
();

450  
ªt
;

451 
	}
}

455 
	$GEN_DEF
(
wrôev
)

456 
	$GEN_DEF
(
ungëwc
)

457 
	$GEN_DEF
(
__î∫o_loˇti⁄
)

458 
	$GEN_DEF
(
wrôe
)

459 
	$GEN_DEF
(
w¸tomb
)

460 
	$GEN_DEF
(
mbπowc
)

461 
	$GEN_DEF
(
gëc
)

462 
	$GEN_DEF
(
__isw˘y≥_l
)

463 
	$GEN_DEF
(
wc¶í
)

464 
	$GEN_DEF
(
__°πof_l
)

465 
	$GEN_DEF
(
°dîr
)

466 
	$GEN_DEF
(
wmem£t
)

467 
	$GEN_DEF
(
°dö
)

468 
	$GEN_DEF
(
fûío
)

469 
	$GEN_DEF
(
__fx°©64
)

470 
	$GEN_DEF
(
putc
)

471 
	$GEN_DEF
(
__wcscﬁl_l
)

472 
	$GEN_DEF
(
__towlowî_l
)

473 
	$GEN_DEF
(
w˘ob
)

474 
	$GEN_DEF
(
mb§towcs
)

475 
	$GEN_DEF
(
ªad
)

476 
	$GEN_DEF
(
wmemmove
)

477 
	$GEN_DEF
(
__°rx‰m_l
)

478 
	$GEN_DEF
(
wmemchr
)

479 
	$GEN_DEF
(
__‰ìloˇÀ
)

480 
	$GEN_DEF
(
__wcs·ime_l
)

481 
	$GEN_DEF
(
wmem˝y
)

482 
	$GEN_DEF
(
putwc
)

483 
	$GEN_DEF
(
__°ack_chk_Áû
)

484 
	$GEN_DEF
(
__wcsx‰m_l
)

485 
	$GEN_DEF
(
wcscmp
)

486 
	$GEN_DEF
(
wc¢πombs
)

487 
	$GEN_DEF
(
__°rcﬁl_l
)

488 
	$GEN_DEF
(
°dout
)

489 
	$GEN_DEF
(
btowc
)

490 
	$GEN_DEF
(
memchr
)

491 
	$GEN_DEF
(
°πﬁd_l
)

492 
	$GEN_DEF
(
wmemcmp
)

493 
	$GEN_DEF
(
__°πod_l
)

494 
	$GEN_DEF
(
£tvbuf
)

495 
	$GEN_DEF
(
__w˘y≥_l
)

496 
	$GEN_DEF
(
__towuµî_l
)

497 
	$GEN_DEF
(
__u£loˇÀ
)

498 
	$GEN_DEF
(
__°r·ime_l
)

499 
	$GEN_DEF
(
mb¢πowcs
)

500 
	$GEN_DEF
(
±hªad_muãx_öô
)

501 
	$GEN_DEF
(
±hªad_muãx_lock
)

502 
	$GEN_DEF
(
±hªad_muãx_u∆ock
)

503 
	$GEN_DEF
(
wcscﬁl
)

504 
	$GEN_DEF
(
°rcﬁl
)

505 
	$GEN_DEF
(
towuµî
)

506 
	$GEN_DEF
(
towlowî
)

507 
	$GEN_DEF
(
isw˘y≥
)

508 
	$GEN_DEF
(
°r·ime
)

509 
	$GEN_DEF
(
wcs·ime
)

510 
	$GEN_DEF
(
w˘y≥
)

511 
	$GEN_DEF
(
°πﬁd
)

512 
	$GEN_DEF
(
°πod
)

513 
	$GEN_DEF
(
°πof
)

514 
	$GEN_DEF
(
__˘y≥_b_loc
)

515 
	$GEN_DEF
(
__˘y≥_touµî_loc
)

516 
	$GEN_DEF
(
__˘y≥_tﬁowî_loc
)

517 
	$GEN_DEF
(
°rx‰m
)

518 
	$GEN_DEF
(
wcsx‰m
)

519 
	`GEN_DEF
(
__kî√l_°™d¨d
);

520 
	`GEN_DEF
(
__gë_˝u_„©uªs
);

	@loader.c

24 
	~<«utûus/«utûus.h
>

25 
	~<«utûus/«utûus_exe.h
>

26 
	~<«utûus/lﬂdî.h
>

27 
	~<«utûus/fs.h
>

29 #i‚de‡
NAUT_CONFIG_DEBUG_LOADER


30 #unde‡
DEBUG_PRINT


31 
	#DEBUG_PRINT
(
fmt
, 
¨gs
...)

	)

34 
	#ERROR
(
fmt
, 
¨gs
...Ë
	`ERROR_PRINT
("lﬂdî: " fmt, ##¨gs)

	)

35 
	#DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("lﬂdî: " fmt, ##¨gs)

	)

36 
	#INFO
(
fmt
, 
¨gs
...Ë
	`INFO_PRINT
("lﬂdî: " fmt, ##¨gs)

	)

38 
	snk_exec
 {

39 *
	mblob
;

40 
uöt64_t
 
	mblob_size
;

41 
uöt64_t
 
	míåy_off£t
;

49 
	#ELF_MAGIC
 0x464c457f

	)

50 
	#MB2_MAGIC
 0xe85250d6

	)

53 
	smb_hódî
 {

54 
uöt32_t
 
	mmagic
;

55 
uöt32_t
 
	m¨ch
;

56 
	#ARCH_X86
 0

	)

57 
uöt32_t
 
	mhódîÀn
;

58 
uöt32_t
 
	mchecksum
;

59 } 
	t__©åibuã__
((
	t∑cked
)Ë
	tmb_hódî_t
;

62 
	smb_èg
 {

63 
uöt16_t
 
	mty≥
;

64 
uöt16_t
 
	mÊags
;

65 
uöt32_t
 
	msize
;

66 } 
	t__©åibuã__
((
	t∑cked
)Ë
	tmb_èg_t
;

68 
	#MB_TAG_INFO
 1

	)

69 
	smb_öfo_ªq
 {

70 
mb_èg_t
 
	mèg
;

71 
uöt32_t
 
	mty≥s
[0];

72 } 
	t__©åibuã__
((
	t∑cked
)Ë
	tmb_öfo_t
;

75 
uöt32_t
 
	tu_vút
, 
	tu_phys
;

77 
	#MB_TAG_ADDRESS
 2

	)

78 
	smb_addr
 {

79 
mb_èg_t
 
	mèg
;

80 
u_vút
 
	mhódî_addr
;

81 
u_vút
 
	mlﬂd_addr
;

82 
u_vút
 
	mlﬂd_íd_addr
;

83 
u_vút
 
	mbss_íd_addr
;

84 } 
	t__©åibuã__
((
	t∑cked
)Ë
	tmb_addr_t
;

86 
	#MB_TAG_ENTRY
 3

	)

87 
	smb_íåy
 {

88 
mb_èg_t
 
	mèg
;

89 
u_vút
 
	míåy_addr
;

90 } 
	t__©åibuã__
((
	t∑cked
)Ë
	tmb_íåy_t
;

92 
	#MB_TAG_FLAGS
 4

	)

93 
	smb_Êags
 {

94 
mb_èg_t
 
	mèg
;

95 
uöt32_t
 
	mc⁄sﬁe_Êags
;

96 } 
	t__©åibuã__
((
	t∑cked
)Ë
	tmb_Êags_t
;

98 
	#MB_TAG_FRAMEBUF
 5

	)

99 
	smb_‰amebuf
 {

100 
mb_èg_t
 
	mèg
;

101 
uöt32_t
 
	mwidth
;

102 
uöt32_t
 
	mheight
;

103 
uöt32_t
 
	mdïth
;

104 } 
	t__©åibuã__
((
	t∑cked
)Ë
	tmb_‰amebuf_t
;

106 
	#MB_TAG_MODALIGN
 6

	)

107 
	smb_modÆign
 {

108 
mb_èg_t
 
	mèg
;

109 
uöt32_t
 
	msize
;

110 } 
	t__©åibuã__
((
	t∑cked
)Ë
	tmb_modÆign_t
;

117 
	#MB_TAG_MB64_HRT
 0xf00d

	)

118 
	smb_mb64_hπ
 {

119 
mb_èg_t
 
	mèg
;

120 
uöt64_t
 
	mhπ_Êags
;

122 
	#MB_TAG_MB64_HRT_FLAG_RELOC
 0x1

	)

124 
	#MB_TAG_MB64_HRT_FLAG_EXE
 0x2

	)

127 
	#MB_TAG_MB64_HRT_FLAG_MAP_4KB
 0x100

	)

128 
	#MB_TAG_MB64_HRT_FLAG_MAP_2MB
 0x200

	)

129 
	#MB_TAG_MB64_HRT_FLAG_MAP_1GB
 0x400

	)

130 
	#MB_TAG_MB64_HRT_FLAG_MAP_512GB
 0x800

	)

135 
uöt64_t
 
	mmax_mem_to_m≠
;

137 
uöt64_t
 
	mgva_off£t
;

139 
uöt64_t
 
	mgva_íåy
;

142 
uöt64_t
 
	mcomm_∑ge_g∑
;

145 
uöt8_t
 
	mhπ_öt_ve˘‹
;

146 
uöt8_t
 
	mª£rved
[7];

148 } 
	t__©åibuã__
((
	t∑cked
)Ë
	tmb_mb64_hπ_t
;

150 
	smb_d©a
 {

151 
mb_hódî_t
 *
	mhódî
;

152 
mb_öfo_t
 *
	möfo
;

153 
mb_addr_t
 *
	maddr
;

154 
mb_íåy_t
 *
	míåy
;

155 
mb_Êags_t
 *
	mÊags
;

156 
mb_‰amebuf_t
 *
	m‰amebuf
;

157 
mb_modÆign_t
 *
	mmodÆign
;

158 
mb_mb64_hπ_t
 *
	mmb64_hπ
;

159 } 
	tmb_d©a_t
;

163 
	$is_ñf
(
uöt8_t
 *
d©a
, 
uöt64_t
 
size
)

165 i‡(*((
uöt32_t
*)
d©a
)==
ELF_MAGIC
) {

170 
	}
}

172 
mb_hódî_t
 *
	$föd_mb_hódî
(
uöt8_t
 *
d©a
, 
uöt64_t
 
size
)

174 
uöt64_t
 
limô
 = 
size
 > 32768 ? 32768 : size;

175 
uöt64_t
 
i
;

178 
	`DEBUG
("sˇ¬ög f‹ mb hódîáà%∞(%lu byãs)\n",
d©a
,
size
);

181 
i
=0;i<
limô
;i+=4) {

182 i‡(*((
uöt32_t
*)&
d©a
[
i
])==
MB2_MAGIC
) {

183 
	`DEBUG
("Found mu…iboŸ hódîáàoff£à0x%Œx\n",
i
);

184  (
mb_hódî_t
 *Ë&
d©a
[
i
];

188 
	}
}

190 
	$checksum4_ok
(
uöt32_t
 *
d©a
, 
uöt64_t
 
size
)

192 
i
;

193 
uöt32_t
 
sum
=0;

195 
i
=0;i<
size
;i++) {

196 
sum
+=
d©a
[
i
];

199  
sum
==0;

200 
	}
}

202 
	$∑r£_mu…iboŸ_hódî
(*
d©a
, 
uöt64_t
 
size
, 
mb_d©a_t
 *
mb
)

204 
uöt64_t
 
i
;

206 
mb_hódî_t
 *
mb_hódî
=0;

207 
mb_èg_t
 *
mb_èg
=0;

208 
mb_öfo_t
 *
mb_öf
=0;

209 
mb_addr_t
 *
mb_addr
=0;

210 
mb_íåy_t
 *
mb_íåy
=0;

211 
mb_Êags_t
 *
mb_Êags
=0;

212 
mb_‰amebuf_t
 *
mb_‰amebuf
=0;

213 
mb_modÆign_t
 *
mb_modÆign
=0;

214 
mb_mb64_hπ_t
 *
mb_mb64_hπ
=0;

217 i‡(!
	`is_ñf
(
d©a
,
size
)) {

218 
	`ERROR
("HRT isÇotán ELF\n");

222 
mb_hódî
 = 
	`föd_mb_hódî
(
d©a
,
size
);

224 i‡(!
mb_hódî
) {

225 
	`ERROR
("No multiboot header found\n");

231 i‡(!
	`checksum4_ok
((
uöt32_t
*)
mb_hódî
,4)) {

232 
	`ERROR
("Multiboot header has bad checksum\n");

236 
	`DEBUG
("Mu…iboŸ hódî:árch=0x%x, hódîÀn=0x%x\n", 
mb_hódî
->
¨ch
, mb_hódî->
hódîÀn
);

238 
mb_èg
 = (
mb_èg_t
*)((*)
mb_hódî
+16);

240 !(
mb_èg
->
ty≥
==0 && mb_èg->
size
==8)) {

241 
	`DEBUG
("èg:Åy≥ 0x%x fœgs=0x%x size=0x%x\n",
mb_èg
->
ty≥
, mb_èg->
Êags
,mb_èg->
size
);

242 
mb_èg
->
ty≥
) {

243 
MB_TAG_INFO
: {

244 i‡(
mb_öf
) {

245 
	`ERROR
("Multiple infoÅags found!\n");

248 
mb_öf
 = (
mb_öfo_t
*)
mb_èg
;

249 
	`DEBUG
(" infoÑequest -Åypes follow\n");

250 
i
=0;(
mb_èg
->
size
-8)/4;i++) {

251 
	`DEBUG
(" %Œu:Åy≥ 0x%x\n", 
i
, 
mb_öf
->
ty≥s
[i]);

256 
MB_TAG_ADDRESS
: {

257 i‡(
mb_addr
) {

258 
	`ERROR
("MultipleáddressÅags found!\n");

261 
mb_addr
 = (
mb_addr_t
*)
mb_èg
;

262 
	`DEBUG
("áddress\n");

263 
	`DEBUG
(" hódî_add∏ = 0x%x\n", 
mb_addr
->
hódî_addr
);

264 
	`DEBUG
("Üﬂd_add∏ = 0x%x\n", 
mb_addr
->
lﬂd_addr
);

265 
	`DEBUG
("Üﬂd_íd_add∏ = 0x%x\n", 
mb_addr
->
lﬂd_íd_addr
);

266 
	`DEBUG
(" bss_íd_add∏ = 0x%x\n", 
mb_addr
->
bss_íd_addr
);

270 
MB_TAG_ENTRY
: {

271 i‡(
mb_íåy
) {

272 
	`ERROR
("MultipleÉntryÅags found!\n");

275 
mb_íåy
=(
mb_íåy_t
*)
mb_èg
;

276 
	`DEBUG
("Éntry\n");

277 
	`DEBUG
("É¡ry_add∏ = 0x%x\n", 
mb_íåy
->
íåy_addr
);

281 
MB_TAG_FLAGS
: {

282 i‡(
mb_Êags
) {

283 
	`ERROR
("Multiple flagsÅags found!\n");

286 
mb_Êags
 = (
mb_Êags_t
*)
mb_èg
;

287 
	`DEBUG
(" flags\n");

288 
	`DEBUG
(" c⁄sﬁe_Êag† = 0x%x\n", 
mb_Êags
->
c⁄sﬁe_Êags
);

292 
MB_TAG_FRAMEBUF
: {

293 i‡(
mb_‰amebuf
) {

294 
	`ERROR
("Multiple framebufÅags found!\n");

297 
mb_‰amebuf
 = (
mb_‰amebuf_t
*)
mb_èg
;

298 
	`DEBUG
(" framebuf\n");

299 
	`DEBUG
(" width = 0x%x\n", 
mb_‰amebuf
->
width
);

300 
	`DEBUG
(" heighà = 0x%x\n", 
mb_‰amebuf
->
height
);

301 
	`DEBUG
(" dïth = 0x%x\n", 
mb_‰amebuf
->
dïth
);

305 
MB_TAG_MODALIGN
: {

306 i‡(
mb_modÆign
) {

307 
	`ERROR
("Multiple modalignÅags found!\n");

310 
mb_modÆign
 = (
mb_modÆign_t
*)
mb_èg
;

311 
	`DEBUG
(" modalign\n");

312 
	`DEBUG
(" sizê = 0x%x\n", 
mb_modÆign
->
size
);

316 
MB_TAG_MB64_HRT
: {

317 i‡(
mb_mb64_hπ
) {

318 
	`ERROR
("Multiple mb64_hrtÅags found!\n");

321 
mb_mb64_hπ
 = (
mb_mb64_hπ_t
*)
mb_èg
;

322 
	`DEBUG
(" mb64_hrt\n");

327 
	`DEBUG
("UnknownÅag... Skipping...\n");

330 
mb_èg
 = (
mb_èg_t
 *)(((*)mb_ègË+ mb_èg->
size
);

334 
mb
->
hódî
=
mb_hódî
;

335 
mb
->
öfo
=
mb_öf
;

336 
mb
->
addr
=
mb_addr
;

337 
mb
->
íåy
=
mb_íåy
;

338 
mb
->
Êags
=
mb_Êags
;

339 
mb
->
‰amebuf
=
mb_‰amebuf
;

340 
mb
->
modÆign
=
mb_modÆign
;

341 
mb
->
mb64_hπ
=
mb_mb64_hπ
;

344 
	}
}

347 
	#MB_LOAD
 (2*
PAGE_SIZE_4KB
)

	)

350 
nk_exec
 *
	$nk_lﬂd_exec
(*
∑th
)

352 
nk_fs_fd_t
 
fd
=
FS_BAD_FD
;

353 *
∑ge
 = 0;

354 
nk_exec
 *
e
 = 0;

356 
	`DEBUG
("LﬂdögÉxecuèbÀáà∑th %s\n", 
∑th
);

358 i‡(!(
∑ge
 = 
	`mÆloc
(
MB_LOAD
))) {

359 
	`ERROR
("FaûedÅÿÆloˇãÅemp‹¨y s∑˚ f‹Üﬂdög fûê%s\n",
∑th
);

360 
out_bad
;

363 
	`mem£t
(
∑ge
,0,
MB_LOAD
);

365 i‡(
	`FS_FD_ERR
(
fd
 = 
	`nk_fs_›í
(
∑th
,
O_RDONLY
,0666))) {

366 
	`ERROR
("ExecuèbÀ fûê%†couldÇŸ bê›íed\n", 
∑th
);

367 
out_bad
;

370 i‡(
	`nk_fs_ªad
(
fd
,
∑ge
,
MB_LOAD
)!=MB_LOAD) {

371 
	`ERROR
("CouldÇŸÑód fú°Öagêo‡fûê%s\n", 
∑th
);

372 
out_bad
;

377 
mb_d©a_t
 
m
;

379 i‡(
	`∑r£_mu…iboŸ_hódî
(
∑ge
, 
MB_LOAD
, &
m
)) {

380 
	`ERROR
("C™nŸÖ¨£ mu…iboŸ kî√»hódî from fú°Öagêo‡%s\n", 
∑th
);

381 
out_bad
;

384 
	`DEBUG
("P¨£d MB hódî from %s\n", 
∑th
);

386 i‡(!
m
.
mb64_hπ
) {

387 
	`ERROR
("%†i†nŸá MB64 image\n", 
∑th
);

388 
out_bad
;

391 
	#REQUIRED_FLAGS
 (
MB_TAG_MB64_HRT_FLAG_RELOC
 | 
MB_TAG_MB64_HRT_FLAG_EXE
)

	)

393 i‡((
m
.
mb64_hπ
->
hπ_Êags
 & 
REQUIRED_FLAGS
)!=REQUIRED_FLAGS) {

394 
	`ERROR
("%s'†Êag†(%lxËdÿnŸ in˛udê%lx\n", 
m
.
mb64_hπ
->
hπ_Êags
, 
REQUIRED_FLAGS
);

395 
out_bad
;

398 
uöt64_t
 
lﬂd_°¨t
, 
lﬂd_íd
, 
bss_íd
;

399 
uöt64_t
 
blob_size
;

404 
lﬂd_°¨t
 = 
m
.
addr
->
lﬂd_addr
;

405 
lﬂd_íd
 = 
m
.
addr
->
lﬂd_íd_addr
;

406 
bss_íd
 = 
m
.
addr
->
bss_íd_addr
;

408 
	#ALIGN_UP
(
x
Ë(((xË% 
PAGE_SIZE_4KB
Ë? PAGE_SIZE_4KB*(1 + (x)/PAGE_SIZE_4KBË: (x))

	)

410 
blob_size
 = 
	`ALIGN_UP
(
bss_íd
 - 
lﬂd_°¨t
 + 1);

412 
	`DEBUG
("Load continuing... start=0x%lx,Énd=0x%lx, bss_end=0x%lx, blob_size=0x%lx\n",

413 
lﬂd_°¨t
, 
lﬂd_íd
, 
bss_íd
, 
blob_size
);

416 
e
 = 
	`mÆloc
((
nk_exec
));

418 i‡(!
e
) {

419 
	`ERROR
("C™nŸáŒoˇãÉxecuèbÀÉxe¯f‹ %s\n", 
∑th
);

420 
out_bad
;

423 
	`mem£t
(
e
,0,(*e));

425 
e
->
blob
 = 
	`mÆloc
(
blob_size
);

427 i‡(!
e
->
blob
) {

428 
	`ERROR
("C™nŸáŒoˇãÉxecuèbÀ blob f‹ %s\n",
∑th
);

429 
out_bad
;

432 
e
->
blob_size
 = blob_size;

433 
e
->
íåy_off£t
 = 
m
.
íåy
->
íåy_addr
 - 
PAGE_SIZE_4KB
;

436 
ssize_t
 
n
;

439 i‡((
n
 = 
	`nk_fs_ªad
(
fd
,
e
->
blob
,e->
blob_size
))<0) {

440 
	`ERROR
("U«bÀÅÿªad blob from %s\n", 
∑th
);

441 
out_bad
;

444 
	`DEBUG
("TrõdÅÿªad 0x%lx byã blob, gŸ 0x%lx byãs\n", 
e
->
blob_size
, 
n
);

446 
	`DEBUG
("Suc˚ssfuŒyÜﬂdedÉxecuèbÀ %s\n",
∑th
);

448 
	`mem£t
(
e
->
blob
+(
lﬂd_íd
-
lﬂd_°¨t
),0,
bss_íd
-load_end);

450 
	`DEBUG
("Cleared BSS\n");

452 
	`nk_fs_˛o£
(
fd
);

453 
	`DEBUG
("file closed\n");

454 
	`‰ì
(
∑ge
);

456  
e
;

458 
out_bad
:

460 i‡(!
	`FS_FD_ERR
(
fd
)Ë{ 
	`nk_fs_˛o£
(fd); }

461 i‡(
∑ge
Ë{ 
	`‰ì
(page); }

462 i‡(
e
 &&É->
blob
Ë{ 
	`‰ì
(e->blob); }

463 i‡(
e
Ë{ 
	`‰ì
(e); }

466 
	}
}

471 * (*
	g__nk_func_èbÀ
[])() = {

472 [
NK_VC_PRINTF
] = (* (*)()Ë
nk_vc_¥ötf
,

476 
	$nk_°¨t_exec
(
nk_exec
 *
exec
, *
ö
, **
out
)

478 (*
°¨t
)(*, **,* (**)());

480 i‡(!
exec
) {

481 
	`ERROR
("Exec ofÇull\n");

485 i‡(!
exec
->
blob
) {

486 
	`ERROR
("Exec ofÇull blob\n");

490 i‡(
exec
->
íåy_off£t
 >Éxec->
blob_size
) {

491 
	`ERROR
("Execáttempt beyondÉnd of blob\n");

495 
°¨t
 = 
exec
->
blob
 +Éxec->
íåy_off£t
;

497 
	`DEBUG
("SèπögÉxecuèbÀ %∞lﬂdedáàaddªs†%∞wôhÉ¡ryáddªs†%∞™dárgumít†%∞™d %p\n", 
exec
,Éxec->
blob
, 
°¨t
, 
ö
, 
out
);

499 
rc
 = 
	`°¨t
(
ö
, 
out
, 
__nk_func_èbÀ
);

501 
	`DEBUG
("ExecuèbÀ %∞ha†ªtu∫ed wôhÑc=%dánd *out=%p\n", 
exec
, 
rc
, 
out
 ? *out : 0);

503  
rc
;

504 
	}
}

507 
	$nk_u∆ﬂd_exec
(
nk_exec
 *
exec
)

509 i‡(
exec
 &&Éxec->
blob
) {

510 
	`‰ì
(
exec
->
blob
);

512 i‡(
exec
) {

513 
	`‰ì
(
exec
);

516 
	}
}

520 
	$nk_lﬂdî_öô
()

522 
	`DEBUG
("init\n");

524 
	}
}

526 
	$nk_lﬂdî_deöô
()

528 
	`DEBUG
("deinit\n");

529 
	}
}

	@mb_utils.c

23 
	~<«utûus/mu…iboŸ2.h
>

24 
	~<«utûus/mb_utûs.h
>

25 
	~<«utûus/«utûus.h
>

26 
	~<«utûus/«ut_ty≥s.h
>

27 
	~<«utûus/∑gög.h
>

28 
	~<«utûus/mm.h
>

31 
uöt_t


32 
	$mu…iboŸ_gë_size
 (
ul⁄g_t
 
mbd
)

34  *(
uöt_t
*)
mbd
;

35 
	}
}

44 
addr_t


45 
	$mu…iboŸ_gë_phys_mem
 (
ul⁄g_t
 
mbd
)

47 
mu…iboŸ_èg
 * 
èg
;

48 
ul⁄g_t
 
sum
 = 0;

50 i‡(
mbd
 & 7) {

51 
	`∑nic
("ERROR: Unaligned multiboot info struct\n");

54 
èg
 = (
mu…iboŸ_èg
*)(
mbd
+8);

55 
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_MMAP
) {

56 
èg
 = (
mu…iboŸ_èg
*)((
mu…iboŸ_uöt8_t
*Èag + (—ag->
size
+7)&~7));

59 i‡(
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_MMAP
) {

60 
	`∑nic
("ERROR:Ço mmapÅag found\n");

63 
mu…iboŸ_mem‹y_m≠_t
 * 
mm≠
;

65 
mm≠
=((
mu…iboŸ_èg_mm≠
*)
èg
)->
íåõs
;

66 (
mu…iboŸ_uöt8_t
*)
mm≠
 < (mu…iboŸ_uöt8_t*)
èg
 +Åag->
size
;

67 
mm≠
 = (
mu…iboŸ_mem‹y_m≠_t
*)((
ul⁄g_t
)mmap +

68 ((
mu…iboŸ_èg_mm≠
*)
èg
)->
íåy_size
)) {

70 
sum
 +
mm≠
->
Àn
;

73  (
addr_t
)
sum
;

74 
	}
}

77 
ul⁄g_t


78 
	$mu…iboŸ_gë_sys_øm
 (
ul⁄g_t
 
mbd
)

80 
mu…iboŸ_èg
 * 
èg
;

81 
ul⁄g_t
 
sum
 = 0;

83 i‡(
mbd
 & 7) {

84 
	`∑nic
("ERROR: Unaligned multiboot info struct\n");

87 
èg
 = (
mu…iboŸ_èg
*)(
mbd
+8);

88 
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_MMAP
) {

89 
èg
 = (
mu…iboŸ_èg
*)((
mu…iboŸ_uöt8_t
*Èag + (—ag->
size
+7)&~7));

92 i‡(
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_MMAP
) {

93 
	`∑nic
("ERROR:Ço mmapÅag found\n");

96 
mu…iboŸ_mem‹y_m≠_t
 * 
mm≠
;

98 
mm≠
=((
mu…iboŸ_èg_mm≠
*)
èg
)->
íåõs
;

99 (
mu…iboŸ_uöt8_t
*)
mm≠
 < (mu…iboŸ_uöt8_t*)
èg
 +Åag->
size
;

100 
mm≠
 = (
mu…iboŸ_mem‹y_m≠_t
*)((
ul⁄g_t
)mmap +

101 ((
mu…iboŸ_èg_mm≠
*)
èg
)->
íåy_size
)) {

103 i‡(
mm≠
->
ty≥
 =
MULTIBOOT_MEMORY_AVAILABLE
) {

104 
sum
 +
mm≠
->
Àn
;

108  
sum
;

109 
	}
}

111 * 
mm_boŸ_Æloc
(
size_t
);

115 
	$mb_is_hπ_ívú⁄
 (
ul⁄g_t
 
mbd
)

117 
mu…iboŸ_èg
 * 
èg
;

119 i‡(
mbd
 & 7) {

120 
	`∑nic
("ERROR: Unaligned multiboot info struct\n");

123 
èg
 = (
mu…iboŸ_èg
*)(
mbd
+8);

125 
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_HRT
 &&

126 
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_END
) {

127 
èg
 = (
mu…iboŸ_èg
*)((
mu…iboŸ_uöt8_t
*Èag + (—ag->
size
+7)&~7));

130 i‡(
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_HRT
) {

135 
	}
}

139 
	$mb_gë_fú°_hπ_addr
 (
ul⁄g_t
 
mbd
)

141 
mu…iboŸ_èg
 * 
èg
;

143 i‡(
mbd
 & 7) {

144 
	`∑nic
("ERROR: Unaligned multiboot info struct\n");

147 
èg
 = (
mu…iboŸ_èg
*)(
mbd
+8);

149 
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_HRT
 &&

150 
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_END
) {

151 
èg
 = (
mu…iboŸ_èg
*)((
mu…iboŸ_uöt8_t
*Èag + (—ag->
size
+7)&~7));

154 i‡(
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_HRT
) {

155  
NULL
;

158 
mu…iboŸ_èg_hπ
 * 
hπ
 = (mu…iboŸ_èg_hπ*)
èg
;

159  (*)
hπ
->
fú°_hπ_g∑
;

160 
	}
}

163 
mu…iboŸ_öfo
 *

164 
	$mu…iboŸ_∑r£
 (
ul⁄g_t
 
mbd
, ul⁄g_à
magic
)

166 
uöt_t
 
size
;

167 
mu…iboŸ_èg
 * 
èg
;

168 
mu…iboŸ_öfo
 * 
mb_öfo
 = (mu…iboŸ_öfo*)
	`mm_boŸ_Æloc
((multiboot_info));

169 i‡(!
mb_öfo
) {

170 
	`ERROR_PRINT
("CouldÇotállocate multiboot info struct\n");

171  
NULL
;

173 
	`mem£t
(
mb_öfo
, 0, (
mu…iboŸ_öfo
));

175 i‡(
magic
 !
MULTIBOOT2_BOOTLOADER_MAGIC
) {

176 
	`∑nic
("ERROR: NotÜoaded by multiboot compliant bootloader\n");

179 i‡(
mbd
 & 7) {

180 
	`∑nic
("ERROR: Unaligned multiboot info struct\n");

183 
size
 = *(
uöt_t
*)
mbd
;

184 
	`DEBUG_PRINT
("Mu…iboŸ infÿsizê%uB\n", 
size
);

186 
èg
 = (
mu…iboŸ_èg
*)(
mbd
+8);

187 
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_END
;

188 
èg
 = (
mu…iboŸ_èg
 *Ë((
mu…iboŸ_uöt8_t
*)tag

189 + ((
èg
->
size
 + 7) & ~7))) {

191 
èg
->
ty≥
) {

192 
MULTIBOOT_TAG_TYPE_BOOT_LOADER_NAME
: {

193 
mu…iboŸ_èg_°rög
 * 
°r
 = (mu…iboŸ_èg_°rög*)
èg
;

194 
mb_öfo
->
boŸ_lﬂdî
 = 
	`mm_boŸ_Æloc
(
°r
->
size
);

195 
	`°∫˝y
(
mb_öfo
->
boŸ_lﬂdî
, 
°r
->
°rög
, så->
size
);

196 
	`DEBUG_PRINT
("BoŸÜﬂdî: %s\n", ((
mu…iboŸ_èg_°rög
*)
èg
)->
°rög
);

199 
MULTIBOOT_TAG_TYPE_ELF_SECTIONS
: {

200 
mu…iboŸ_èg_ñf_£˘i⁄s
 * 
ñf
 = (mu…iboŸ_èg_ñf_£˘i⁄s*)
èg
;

201 
	`DEBUG_PRINT
("ELF size=%u,Çum=%u,Éntsize=%u, shndx=%u, sechdr=%p\n",

202 
ñf
->
size
,

203 
ñf
->
num
,

204 
ñf
->
ítsize
,

205 
ñf
->
shndx
);

208 
MULTIBOOT_TAG_TYPE_MMAP
: {

209 
	`DEBUG_PRINT
("Multiboot2 memory map detected\n");

213 
MULTIBOOT_TAG_TYPE_BASIC_MEMINFO
: {

214 
	`DEBUG_PRINT
("Multiboot2 basic meminfo detected\n");

217 
MULTIBOOT_TAG_TYPE_FRAMEBUFFER
: {

218 
mu…iboŸ_èg_‰amebuf„r_comm⁄
 * 
fb
 = (mu…iboŸ_èg_‰amebuf„r_comm⁄*)
èg
;

219 
	`DEBUG_PRINT
("fbáddr: %p, fb_width: %u, fb_height: %u\n",

220 (*)
fb
->
‰amebuf„r_addr
,

221 
fb
->
‰amebuf„r_width
,

222 
fb
->
‰amebuf„r_height
);

225 
MULTIBOOT_TAG_TYPE_CMDLINE
: {

226 
mu…iboŸ_èg_°rög
* 
cmd
 = (mu…iboŸ_èg_°rög*)
èg
;

227 
mb_öfo
->
boŸ_cmd_löe
 = 
	`mm_boŸ_Æloc
(
cmd
->
size
);

228 
	`°∫˝y
(
mb_öfo
->
boŸ_cmd_löe
, 
cmd
->
°rög
, cmd->
size
);

229 
	`DEBUG_PRINT
("CmdÜöe: %s\n", 
mb_öfo
->
boŸ_cmd_löe
);

233 
MULTIBOOT_TAG_TYPE_BOOTDEV
: {

234 
mu…iboŸ_èg_boŸdev
 * 
bd
 = (mu…iboŸ_èg_boŸdev*)
èg
;

235 
	`DEBUG_PRINT
("BoŸ devi˚: (biosdev=0x%x,¶i˚=%u,∑π=%u)\n", 
bd
->
biosdev
, bd->
¶i˚
, bd->
∑π
);

238 
MULTIBOOT_TAG_TYPE_ACPI_OLD
: {

239 
mu…iboŸ_èg_ﬁd_a˝i
 * 
ﬂ˝i
 = (mu…iboŸ_èg_ﬁd_a˝i*)
èg
;

240 
	`DEBUG_PRINT
("Old ACPI:Ñsdp=%p\n", 
ﬂ˝i
->
rsdp
);

243 
MULTIBOOT_TAG_TYPE_ACPI_NEW
: {

244 
mu…iboŸ_èg_√w_a˝i
 * 
«˝i
 = (mu…iboŸ_èg_√w_a˝i*)
èg
;

245 
	`DEBUG_PRINT
("New ACPI:Ñsdp=%p\n", 
«˝i
->
rsdp
);

248 #ifde‡
NAUT_CONFIG_HVM_HRT


249 
MULTIBOOT_TAG_TYPE_HRT
: {

250 
mu…iboŸ_èg_hπ
 * 
hπ
 = (mu…iboŸ_èg_hπ*)
èg
;

251 
mb_öfo
->
hπ_öfo
 = 
	`mm_boŸ_Æloc
(
hπ
->
size
);

252 
	`mem˝y
(
mb_öfo
->
hπ_öfo
, 
hπ
, hπ->
size
);

253 
	`DEBUG_PRINT
("HRT Info struct\n");

254 
	`DEBUG_PRINT
("ÅŸÆ_num_≠ics: %u\n", 
hπ
->
tŸÆ_num_≠ics
);

255 
	`DEBUG_PRINT
(" fú°_hπ_≠ic_id: %u\n", 
hπ
->
fú°_hπ_≠ic_id
);

256 
	`DEBUG_PRINT
(" have_hπ_iﬂpic: %u\n", 
hπ
->
have_hπ_iﬂpic
);

257 
	`DEBUG_PRINT
(" fú°_hπ_iﬂpic_íåy: %u\n", 
hπ
->
fú°_hπ_iﬂpic_íåy
);

258 
	`DEBUG_PRINT
(" cpu_‰eq_khz: %Œu\n", (*)
hπ
->
˝u_‰eq_khz
);

259 
	`DEBUG_PRINT
(" hπ_Êags: %p\n", (*)
hπ
->
hπ_Êags
);

260 
	`DEBUG_PRINT
(" max_mem_m≠≥d: %p\n", (*)
hπ
->
max_mem_m≠≥d
);

261 
	`DEBUG_PRINT
(" fú°_hπ_g∑: %p\n", (*)
hπ
->
fú°_hπ_g∑
);

262 
	`DEBUG_PRINT
(" gva_off£t: %p\n", (*)
hπ
->
gva_off£t
);

263 
	`DEBUG_PRINT
(" comm_∑ge_g∑: %p\n", (*)
hπ
->
comm_∑ge_g∑
);

264 
	`DEBUG_PRINT
(" hπ_öt_vec: %u\n", 
hπ
->
hπ_öt_vec
);

270 
	`DEBUG_PRINT
("Unh™dÀdÅagÅy≥ (0x%x)\n", 
èg
->
ty≥
);

276  
mb_öfo
;

277 
	}
}

	@msr.c

23 
	~<«utûus/m§.h
>

26 
ölöe
 

27 
	$m§_wrôe
 (
uöt32_t
 
m§
, 
uöt64_t
 
d©a
)

29 
uöt32_t
 
lo
 = 
d©a
;

30 
uöt32_t
 
hi
 = 
d©a
 >> 32;

31 
asm
 vﬁ©ûe("wrm§" : : "c"(
m§
), "a"(
lo
), "d"(
hi
));

32 
	}
}

35 
ölöe
 
uöt64_t


36 
	$m§_ªad
 (
uöt32_t
 
m§
)

38 
uöt32_t
 
lo
, 
hi
;

39 
asm
 vﬁ©ûe("rdm§" : "˜"(
lo
), "=d"(
hi
Ë: "c"(
m§
));

40  ((
uöt64_t
)
hi
 << 32Ë| 
lo
;

41 
	}
}

	@naut_string.c

24 
	~<«utûus/«ut_°rög.h
>

25 
	~<«utûus/«ut_ty≥s.h
>

26 
	~<«utûus/mm.h
>

28 
	g_˘y≥
[] = {

29 
_C
,_C,_C,_C,_C,_C,_C,_C,

30 
_C
,_C|
_S
,_C|_S,_C|_S,_C|_S,_C|_S,_C,_C,

31 
_C
,_C,_C,_C,_C,_C,_C,_C,

32 
_C
,_C,_C,_C,_C,_C,_C,_C,

33 
_S
|
_SP
,
_P
,_P,_P,_P,_P,_P,_P,

34 
_P
,_P,_P,_P,_P,_P,_P,_P,

35 
_D
,_D,_D,_D,_D,_D,_D,_D,

36 
_D
,_D,
_P
,_P,_P,_P,_P,_P,

37 
_P
,
_U
|
_X
,_U|_X,_U|_X,_U|_X,_U|_X,_U|_X,_U,

38 
_U
,_U,_U,_U,_U,_U,_U,_U,

39 
_U
,_U,_U,_U,_U,_U,_U,_U,

40 
_U
,_U,_U,
_P
,_P,_P,_P,_P,

41 
_P
,
_L
|
_X
,_L|_X,_L|_X,_L|_X,_L|_X,_L|_X,_L,

42 
_L
,_L,_L,_L,_L,_L,_L,_L,

43 
_L
,_L,_L,_L,_L,_L,_L,_L,

44 
_L
,_L,_L,
_P
,_P,_P,_P,
_C
,

47 
_S
|
_SP
,
_P
,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,

48 
_P
,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,

49 
_U
,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,

50 
_U
,_U,_U,_U,_U,_U,_U,
_P
,_U,_U,_U,_U,_U,_U,_U,
_L
,

51 
_L
,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,

52 
_L
,_L,_L,_L,_L,_L,_L,
_P
,_L,_L,_L,_L,_L,_L,_L,_L};

55 
sim∂e_°πﬁ
(const *, **, );

57 #ifde‡
NAUT_CONFIG_USE_NAUT_BUILTINS


58 #i‚de‡
NAUT_CONFIG_NEWLIB


59 
size_t


60 
	$°æí
 (c⁄° * 
°r
)

62 
size_t
 
ªt
 = 0;

63 
°r
[
ªt
] != 0) {

64 
ªt
++;

67  
ªt
;

68 
	}
}

71 
size_t


72 
	$°∫Àn
 (c⁄° * 
°r
, 
size_t
 
max
)

74 
size_t
 
ªt
 = 0;

75 
max
-- && 
°r
[
ªt
] != 0) {

76 
ªt
++;

78  
ªt
;

79 
	}
}

83 
	$mem˝y
 (* 
d°
, c⁄° * 
§c
, 
size_t
 
n
)

85 * 
d
 = (*)
d°
;

86 * 
s
 = (*)
§c
;

88 
n
--) {

89 *
d
++ = *
s
++;

92  
d°
;

93 
	}
}

97 
	$mem£t
 (* 
d°
, 
c
, 
size_t
 
n
)

99 * 
d
 = (*)
d°
;

100 
n
--) {

101 *
d
++ = 
c
;

104  
d°
;

105 
	}
}

109 
	$memmove
 (* 
d°
, c⁄° * 
§c
, 
size_t
 
n
)

111 
d°p
 = (Ë
d°
;

112 
§˝
 = (Ë
§c
;

116 i‡(
d°p
 - 
§˝
 >
n
) {

118 
d°
 = 
	`mem˝y
 (d°, 
§c
, 
n
);

121 
§˝
 +
n
;

122 
d°p
 +
n
;

125 i‡(
n
 >
OP_T_THRES
)

128 
n
 -
d°p
 % 
OPSIZ
;

129 
	`BYTE_COPY_BWD
 (
d°p
, 
§˝
, d°∞% 
OPSIZ
);

136 
	`WORD_COPY_BWD
 (
d°p
, 
§˝
, 
n
,Ç);

142 
	`BYTE_COPY_BWD
 (
d°p
, 
§˝
, 
n
);

145  
d°
;

146 
	}
}

151 
	$memcmp
 (c⁄° * 
s1_
, c⁄° * 
s2_
, 
size_t
 
n
)

153 c⁄° * 
s1
 = 
s1_
;

154 c⁄° * 
s2
 = 
s2_
;

156 
n
 > 0) {

158 
cmp
 = (*
s1
 - *
s2
);

160 i‡(
cmp
 != 0) {

161  
cmp
;

164 ++
s1
;

165 ++
s2
;

166 --
n
;

170 
	}
}

174 
	$°rcmp
 (c⁄° * 
s1
, c⁄° * 
s2
)

177 
cmp
 = (*
s1
 - *
s2
);

179 i‡((
cmp
 !0Ë|| (*
s1
 ='\0'Ë|| (*
s2
 == '\0')) {

180  
cmp
;

183 ++
s1
;

184 ++
s2
;

186 
	}
}

190 
	$°rˇ£cmp
 (c⁄° * 
s1
, c⁄° * 
s2
)

193 
cmp
 = (
	`tﬁowî
(*
s1
Ë-Åﬁowî(*
s2
));

195 i‡((
cmp
 !0Ë|| (*
s1
 ='\0'Ë|| (*
s2
 == '\0')) {

196  
cmp
;

199 ++
s1
;

200 ++
s2
;

202 
	}
}

206 
	$°∫cmp
 (c⁄° * 
s1
, c⁄° * 
s2
, 
size_t
 
limô
)

208 
size_t
 
i
 = 0;

210 
i
 < 
limô
) {

211 
cmp
 = (*
s1
 - *
s2
);

213 i‡((
cmp
 !0Ë|| (*
s1
 ='\0'Ë|| (*
s2
 == '\0')) {

214  
cmp
;

217 ++
s1
;

218 ++
s2
;

219 ++
i
;

224 
	}
}

228 
	$°∫ˇ£cmp
 (c⁄° * 
s1
, c⁄° * 
s2
, 
size_t
 
limô
)

230 
size_t
 
i
 = 0;

232 
i
 < 
limô
) {

233 
cmp
 = (
	`tﬁowî
(*
s1
Ë-Åﬁowî(*
s2
));

235 i‡((
cmp
 !0Ë|| (*
s1
 ='\0'Ë|| (*
s2
 == '\0')) {

236  
cmp
;

239 ++
s1
;

240 ++
s2
;

241 ++
i
;

245 
	}
}

249 
	$°rdup
 (c⁄° * 
s
)

251 c⁄° 
Àn
 = 
	`°æí
(
s
) + 1;

252 * 
√w
 = 
	`mÆloc
(
Àn
);

253 
	`mem˝y
(
√w
, 
s
, 
Àn
);

254  
√w
;

255 
	}
}

258 
	$°Ωbrk
 (c⁄° * 
cs
, c⁄° * 
˘
)

260 c⁄° *
sc1
, *
sc2
;

262 
sc1
 = 
cs
; *sc1 != '\0'; ++sc1) {

263 
sc2
 = 
˘
; *sc2 != '\0'; ++sc2) {

264 i‡(*
sc1
 =*
sc2
)

265  (*)
sc1
;

268  
NULL
;

269 
	}
}

284 
	$°r£p
 (** 
s
, c⁄° * 
˘
)

286 *
sbegö
 = *
s
;

287 *
íd
;

289 i‡(
sbegö
 =
NULL
)

290  
NULL
;

292 
íd
 = 
	`°Ωbrk
(
sbegö
, 
˘
);

293 i‡(
íd
)

294 *
íd
++ = '\0';

295 *
s
 = 
íd
;

296  
sbegö
;

297 
	}
}

301 
	$°rˇt
 (* 
s1
, c⁄° * 
s2
)

303 * 
t1
 = 
s1
;

305 *
s1
) { s1++; }

306 *
s2
Ë{ *
s1
++ = *s2++; }

308 *
s1
 = '\0';

310  
t1
;

311 
	}
}

315 
	$°∫ˇt
 (* 
s1
, c⁄° * 
s2
, 
size_t
 
limô
)

317 
size_t
 
i
 = 0;

318 * 
t1
;

320 
t1
 = 
s1
;

322 *
s1
) { s1++; }

324 
i
 < 
limô
) {

325 i‡(*
s2
 == '\0') {

328 *
s1
++ = *
s2
++;

330 *
s1
 = '\0';

331  
t1
;

332 
	}
}

336 
	$°r˝y
 (* 
de°
, c⁄° * 
§c
)

338 *
ªt
 = 
de°
;

340 *
§c
) {

341 *
de°
++ = *
§c
++;

343 *
de°
 = '\0';

345  
ªt
;

346 
	}
}

350 
	$°∫˝y
 (* 
de°
, c⁄° * 
§c
, 
size_t
 
limô
)

352 * 
ªt
 = 
de°
;

354 (*
§c
 !'\0'Ë&& (
limô
 > 0)) {

355 *
de°
++ = *
§c
++;

356 --
limô
;

359 i‡(
limô
 > 0)

360 *
de°
 = '\0';

362  
ªt
;

363 
	}
}

367 
	$°rchr
 (c⁄° * 
s
, 
c
)

369 *
s
 != '\0') {

370 i‡(*
s
 =
c
)

371  (*)
s
;

372 ++
s
;

375 
	}
}

379 
	$°ºchr
 (c⁄° * 
s
, 
c
)

381 
size_t
 
Àn
 = 
	`°æí
(
s
);

382 c⁄° * 
p
 = 
s
 + 
Àn
;

384 
p
 > 
s
) {

385 --
p
;

387 i‡(*
p
 =
c
) {

388  (*)
p
;

392 
	}
}

398 
	$©oi
 (c⁄° * 
buf
)

400 
ªt
 = 0;

402 (*
buf
 >= '0') && (*buf <= '9')) {

403 
ªt
 *= 10;

404 
ªt
 +(*
buf
 - '0');

405 
buf
++;

408  
ªt
;

409 
	}
}

412 
	$°πﬁ
 (c⁄° * 
°r
, ** 
íd±r
, 
ba£
)

414  
	`sim∂e_°πﬁ
(
°r
, 
íd±r
, 
ba£
);

415 
	}
}

417 
size_t


418 
	$°r•n
 (c⁄° * 
s
, c⁄° * 
ac˚±
)

420 
m©ch
 = 1;

421 
˙t
 = 0;

422 
i
 = 0;

423 
ac˚±_Àn
 = 
	`°æí
(
ac˚±
);

425 
m©ch
) {

426 
m©ch
 = 0;

428 
i
 = 0; i < 
ac˚±_Àn
; i++) {

429 i‡(
s
[
˙t
] =
ac˚±
[
i
]) {

430 
m©ch
 = 1;

431 
˙t
++;

437  
˙t
;

438 
	}
}

441 
size_t


442 
	$°rc•n
 (c⁄° * 
s
, c⁄° * 
ªje˘
)

444 
m©ch
 = 0;

445 
˙t
 = 0;

446 
i
 = 0;

447 
ªje˘_Àn
 = 
	`°æí
(
ªje˘
);

449 !
m©ch
) {

450 
i
 = 0; i < 
ªje˘_Àn
; i++) {

451 i‡(
s
[
˙t
] =
ªje˘
[
i
]) {

452 
m©ch
 = 1;

457 i‡(!
m©ch
) {

458 
˙t
++;

463  
˙t
;

464 
	}
}

468 
	$°r°r
 (c⁄° * 
s1
, c⁄° * 
s2
)

470 
l1
, 
l2
;

472 
l2
 = 
	`°æí
(
s2
);

473 i‡(!
l2
)

474  (*)
s1
;

475 
l1
 = 
	`°æí
(
s1
);

476 
l1
 >
l2
) {

477 
l1
--;

478 i‡(!
	`memcmp
(
s1
, 
s2
, 
l2
))

479  (*)
s1
;

480 
s1
++;

482  
NULL
;

483 
	}
}

490 
	$°πoi
 (c⁄° * 
≈å
, ** 
íd±r
)

492 
ªt
 = 0;

493 * 
buf
 = (*)
≈å
;

495 (*
buf
 >= '0') && (*buf <= '9')) {

496 
ªt
 *= 10;

497 
ªt
 +(*
buf
 - '0');

499 
buf
++;

501 i‡(
íd±r
) {

502 *
íd±r
 = 
buf
;

506  
ªt
;

507 
	}
}

511 
uöt64_t


512 
	$©ox
 (c⁄° * 
buf
) {

513 
uöt64_t
 
ªt
 = 0;

515 i‡(*(
buf
 + 1) == 'x') {

516 
buf
 += 2;

519 
	`isxdigô
(*
buf
)) {

520 
ªt
 <<= 4;

522 i‡(
	`isdigô
(*
buf
)) {

523 
ªt
 +(*
buf
 - '0');

525 
ªt
 +
	`tﬁowî
(*
buf
) - 'a' + 10;

528 
buf
++;

531  
ªt
;

532 
	}
}

535 
uöt64_t


536 
	$°πox
 (c⁄° * 
≈å
, ** 
íd±r
)

538 
uöt64_t
 
ªt
 = 0;

539 * 
buf
 = (*)
≈å
;

541 i‡(*(
buf
 + 1) == 'x') {

542 
buf
 += 2;

545 
	`isxdigô
(*
buf
)) {

546 
ªt
 <<= 4;

548 i‡(
	`isdigô
(*
buf
)) {

549 
ªt
 +(*
buf
 - '0');

551 
ªt
 +
	`tﬁowî
(*
buf
) - 'a' + 10;

554 
buf
++;

556 i‡(
íd±r
) {

557 *
íd±r
 = 
buf
;

561  
ªt
;

562 
	}
}

566 
	$°r_tﬁowî
 (* 
s
)

568 
	`ißÕha
(*
s
)) {

569 i‡(!
	`i¶owî
(*
s
)) {

570 *
s
 = 
	`tﬁowî
(*s);

572 
s
++;

574 
	}
}

578 
	$°r_touµî
 (* 
s
)

580 
	`ißÕha
(*
s
)) {

581 i‡(!
	`isuµî
(*
s
)) {

582 *
s
 = 
	`touµî
(*s);

584 
s
++;

586 
	}
}

	@nemo.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/√mo.h
>

25 
	~<«utûus/˝u.h
>

26 
	~<«utûus/≥r˝u.h
>

27 
	~<«utûus/úq.h
>

28 
	~<«utûus/mm.h
>

29 
	~<«utûus/«ut_as£π.h
>

31 
	~<dev/≠ic.h
>

33 
	#NEMO_DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("NEMO: " fmt, ##¨gs)

	)

34 
	#NEMO_INFO
(
fmt
, 
¨gs
...Ë
	`¥ötk
("NEMO: " fmt, ##¨gs)

	)

35 
	#NEMO_ERR
(
fmt
, 
¨gs
...Ë
	`ERROR_PRINT
("NEMO: " fmt, ##¨gs)

	)

36 
	#NEMO_WARN
(
fmt
, 
¨gs
...Ë
	`WARN_PRINT
("NEMO: " fmt, ##¨gs)

	)

39 
√mo_evít_t
 * 
	g√mo_a˘i⁄_èbÀ
[
NEMO_MAX_EVENTS
] 
__Æign
(64);

40 
√mo_evít_id_t
 
	g√mo_lookup_èbÀ
[
NAUT_CONFIG_MAX_CPUS
] 
__Æign
(64);

43 
ölöe
 

44 
	$evít_is_vÆid
 (
√mo_evít_id_t
 
id
)

46 i‡(
id
 < 
NEMO_MAX_EVENTS
 &&

47 
√mo_a˘i⁄_èbÀ
[
id
]) {

52 
	}
}

56 
	$√mo_ùi_evít_ªcv
 (
ex˝_íåy_t
 * 
ex˝
, 
ex˝_vec_t
 
v
, *
°©e
)

58 
√mo_evít_id_t
 
eid
 = 
√mo_lookup_èbÀ
[
	`my_˝u_id
()];

60 
	`ASSERT
(
eid
 < 
NEMO_MAX_EVENTS
);

62 
√mo_evít_t
 * 
evít
 = 
√mo_a˘i⁄_èbÀ
[
eid
];

64 
	`ASSERT
(
evít
);

65 
	`ASSERT
(
evít
->
a˘i⁄
);

67 
	`NEMO_DEBUG
("Recv'dÇŸifiˇti⁄ f‹Åask id=%u func=%p\n", 
eid
, (*)
evít
->
a˘i⁄
);

69 
evít
->
	`a˘i⁄
();

71 
	`IRQ_HANDLER_END
();

74 
	}
}

78 
	$√mo_evít_nŸify
 (
√mo_evít_id_t
 
eid
, 
˝u
)

80 
	`ASSERT
(
	`evít_is_vÆid
(
eid
));

81 
	`ASSERT
(
˝u
 < 
NAUT_CONFIG_MAX_CPUS
 && cpu >= 0);

83 
ªmŸe_≠ic
 = 
	`nk_gë_«utûus_öfo
()->
sys
.
˝us
[
˝u
]->
œpic_id
;

84 
≠ic_dev
 * 
≠ic
 = 
	`≥r_˝u_gë
(apic);

86 
	`≠ic_ùi
(
≠ic
, 
ªmŸe_≠ic
, 
NEMO_INT_VEC
);

87 
	}
}

91 
	$√mo_evít_brﬂdˇ°
 (
√mo_evít_id_t
 
eid
)

93 
	`ASSERT
(
	`evít_is_vÆid
(
eid
));

94 
≠ic_dev
 * 
≠ic
 = 
	`≥r_˝u_gë
(apic);

95 
	`≠ic_bˇ°_ùi
(
≠ic
, 
NEMO_INT_VEC
);

96 
	}
}

99 
√mo_evít_id_t


100 
	$Æloˇã_evít_id
 ()

102 
i
;

103 
i
 = 0; i < 
NEMO_MAX_EVENTS
; i++) {

104 i‡(!
√mo_a˘i⁄_èbÀ
[
i
]) {

105 
	`NEMO_DEBUG
("AŒoˇtögÉvíàö slŸ %u\n", 
i
);

106  
i
;

111 
	}
}

114 
√mo_evít_id_t


115 
√mo_ªgi°î_evít_a˘i⁄
 ((*
func
)(), * 
¥iv_d©a
)

118 i‡(!
func
) {

119 
	`NEMO_ERR
("Invalid functionÖrovidedÅoÇemo_regiser_task\n");

124 
√mo_evít_t
 * 
√w_evít
 = 
	`mÆloc
((nemo_event_t));

125 i‡(!
√w_evít
) {

126 
	`NEMO_ERR
("CouldÇot mallocÇewÅask\n");

129 
	`mem£t
(
√w_evít
, 0, (
√mo_evít_t
));

131 
√w_evít
->
a˘i⁄
 = 
func
;

132 
√w_evít
->
¥iv_d©a
 =Öriv_data;

134 
√mo_evít_id_t
 
id
 = 
	`Æloˇã_evít_id
();

136 i‡(
id
 < 0) {

137 
	`NEMO_ERR
("CouldÇotállocateÇewÉvent inÉventáctionÅable\n");

138 
out
;

141 
√w_evít
->
id
 = id;

143 
√mo_a˘i⁄_èbÀ
[
id
] = 
√w_evít
;

145 
	`NEMO_DEBUG
("Regi°îÇewÉvíà%d func=%∞d©a=%p\n", 
√w_evít
->
a˘i⁄
,Çew_evít->
id
,Çew_evít->
¥iv_d©a
);

147  
id
;

149 
out
:

150 
	`‰ì
(
√w_evít
);

152 
	}
}

156 
	$√mo_uƒegi°î_evít_a˘i⁄
 (
√mo_evít_id_t
 
id
)

158 
	`ASSERT
(
id
 < 
NEMO_MAX_EVENTS
 && id >= 0);

160 
	`NEMO_DEBUG
("Uƒegi°îÉvíà%d\n", 
id
);

162 i‡(!
√mo_a˘i⁄_èbÀ
[
id
]) {

166 
	`‰ì
(
√mo_a˘i⁄_èbÀ
[
id
]);

167 
√mo_a˘i⁄_èbÀ
[
id
] = 
NULL
;

168 
	}
}

172 
	$√mo_evít_awaô
 ()

174 
	`hÆt
();

175 
	}
}

179 
	$√mo_öô
 ()

182 i‡(
	`ªgi°î_öt_h™dÀr
(
NEMO_INT_VEC
, 
√mo_ùi_evít_ªcv
, 
NULL
) != 0) {

183 
	`NEMO_ERR
("CouldÇotÑegister Nemo interrupt handler\n");

188 
	}
}

192 
	$dummy
 ()

194 
	`¥ötk
("TEST invoked from c‹ê%u!\n", 
	`my_˝u_id
());

195 
	}
}

198 
ã°_√mo
 ();

200 
	$ã°_√mo
 ()

202 
	`NEMO_INFO
("TestingÇemo\n");

203 
	`√mo_öô
();

204 
√mo_evít_id_t
 
id
 = 
	`√mo_ªgi°î_evít_a˘i⁄
(
dummy
, 
NULL
);

205 i‡(
id
 < 0) {

206 
	`NEMO_ERR
("CouldÇotÑegister dummyÇemoÅask\n");

209 
	`NEMO_INFO
("NotifyingÉvent on core 22\n");

210 
	`√mo_evít_nŸify
(
id
, 22);

211 
	}
}

	@netdev.c

24 
	~<«utûus/«utûus.h
>

25 
	~<«utûus/dev.h
>

26 
	~<«utûus/√tdev.h
>

28 #i‚de‡
NAUT_CONFIG_DEBUG_NETDEV


29 #unde‡
DEBUG_PRINT


30 
	#DEBUG_PRINT
(
fmt
, 
¨gs
...)

	)

33 
	#ERROR
(
fmt
, 
¨gs
...Ë
	`ERROR_PRINT
("√tdev: " fmt, ##¨gs)

	)

34 
	#DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("√tdev: " fmt, ##¨gs)

	)

35 
	#INFO
(
fmt
, 
¨gs
...Ë
	`INFO_PRINT
("√tdev: " fmt, ##¨gs)

	)

38 
•ölock_t
 
	g°©e_lock
;

40 
	#STATE_LOCK_CONF
 
uöt8_t
 
_°©e_lock_Êags


	)

41 
	#STATE_LOCK
(Ë
_°©e_lock_Êags
 = 
	`•ö_lock_úq_ßve
(&
°©e_lock
)

	)

42 
	#STATE_UNLOCK
(Ë
	`•ö_u∆ock_úq_ª°‹e
(&
°©e_lock
, 
_°©e_lock_Êags
);

	)

46 
	$nk_√t_dev_öô
()

48 
	`INFO
("init\n");

50 
	}
}

52 
	$nk_√t_dev_deöô
()

54 
	`INFO
("deinit\n");

56 
	}
}

59 
nk_√t_dev
 * 
	$nk_√t_dev_ªgi°î
(*
«me
, 
uöt64_t
 
Êags
, 
nk_√t_dev_öt
 *
öãr
, *
°©e
)

61 
	`INFO
("ªgi°î devi˚ %s\n",
«me
);

62  (
nk_√t_dev
 *Ë
	`nk_dev_ªgi°î
(
«me
,
NK_DEV_NET
,
Êags
,(
nk_dev_öt
 *)
öãr
,
°©e
);

63 
	}
}

65 
	$nk_√t_dev_uƒegi°î
(
nk_√t_dev
 *
d
)

67 
	`INFO
("uƒegi°î devi˚ %s\n", 
d
->
dev
.
«me
);

68  
	`nk_dev_uƒegi°î
((
nk_dev
 *)
d
);

69 
	}
}

71 
nk_√t_dev
 * 
	$nk_√t_dev_föd
(*
«me
)

73 
	`DEBUG
("föd %s\n",
«me
);

74 
nk_dev
 *
d
 = 
	`nk_dev_föd
(
«me
);

75 i‡(
d
->
ty≥
!=
NK_DEV_NET
) {

76 
	`DEBUG
("%†nŸ found\n",
«me
);

79 
	`DEBUG
("%†found\n",
«me
);

80  (
nk_√t_dev
*Ë
d
;

82 
	}
}

84 
	$nk_√t_dev_gë_ch¨a˘îi°ics
(
nk_√t_dev
 *
dev
, 
nk_√t_dev_ch¨a˘îi°ics
 *
c
)

86 
nk_dev
 *
d
 = (nk_dev *)(&(
dev
->dev));

87 
nk_√t_dev_öt
 *
di
 = (nk_√t_dev_öà*)(
d
->
öãrÁ˚
);

89 
	`DEBUG
("gë ch¨a˘îi°ic†o‡%s\n",
d
->
«me
);

90  
di
->
	`gë_ch¨a˘îi°ics
(
d
->
°©e
,
c
);

91 
	}
}

93 
	$gíîic_£nd_ˇŒback
(*
c⁄ãxt
)

95 
	`DEBUG
("gíîi¯£nd cÆlback f‹ %p\n",
c⁄ãxt
);

96 *(
uöt64_t
 *)
c⁄ãxt
 = 1;

97 
	}
}

99 
	$gíîic_ª˚ive_ˇŒback
(*
c⁄ãxt
)

101 
	`DEBUG
("gíîi¯ª˚ivêˇŒback f‹ %p\n",
c⁄ãxt
);

102 *(
uöt64_t
 *)
c⁄ãxt
 = 1;

103 
	}
}

106 
nk_√t_dev_£nd_∑ckë
(
nk_√t_dev
 *
dev
,

107 
uöt8_t
 *
§c
,

108 
uöt64_t
 
Àn
,

109 
nk_dev_ªque°_ty≥_t
 
ty≥
,

110 (*
ˇŒback
)(*
°©e
),

111 *
°©e
)

113 
nk_dev
 *
d
 = (nk_dev *)(&(
dev
->dev));

114 
nk_√t_dev_öt
 *
di
 = (nk_√t_dev_öà*)(
d
->
öãrÁ˚
);

115 
	`DEBUG
("£ndÖackë o¿%†÷í=%lu,Åy≥=%lx)\n", 
d
->
«me
,
Àn
,
ty≥
);

116 
ty≥
) {

117 
NK_DEV_REQ_CALLBACK
:

118 i‡(!
di
->
po°_£nd
) {

119 
	`DEBUG
("packet sendÇotÖossible\n");

122  
di
->
	`po°_£nd
(
d
->
°©e
,
§c
,
Àn
,
ˇŒback
,state);

125 
NK_DEV_REQ_BLOCKING
:

126 
NK_DEV_REQ_NONBLOCKING
:

127 i‡(!
di
->
po°_£nd
) {

128 
	`DEBUG
("packet sendÇotÖossible\n");

131 vﬁ©ûê
uöt64_t
 
com∂ëi⁄
 = 0;

133 i‡(
ty≥
==
NK_DEV_REQ_NONBLOCKING
) {

134 i‡(
di
->
	`po°_£nd
(
d
->
°©e
,
§c
,
Àn
,0,0)) {

135 
	`ERROR
("FailedÅoÜaunch send\n");

138 
	`DEBUG
("PacketÜaunch started\n");

142 i‡(
di
->
	`po°_£nd
(
d
->
°©e
,
§c
,
Àn
,
gíîic_£nd_ˇŒback
,(*)&
com∂ëi⁄
)) {

143 
	`ERROR
("FailedÅoÜaunch send\n");

146 
	`DEBUG
("PacketÜaunch started, waiting for completion\n");

147 !
com∂ëi⁄
) {

148 
	`nk_dev_waô
((
nk_dev
 *)
dev
);

159 
	}
}

161 
nk_√t_dev_ª˚ive_∑ckë
(
nk_√t_dev
 *
dev
,

162 
uöt8_t
 *
de°
,

163 
uöt64_t
 
Àn
,

164 
nk_dev_ªque°_ty≥_t
 
ty≥
,

165 (*
ˇŒback
)(*
°©e
),

166 *
°©e
)

168 
nk_dev
 *
d
 = (nk_dev *)(&(
dev
->dev));

169 
nk_√t_dev_öt
 *
di
 = (nk_√t_dev_öà*)(
d
->
öãrÁ˚
);

170 
	`DEBUG
("ª˚ivê∑ckë o¿%†÷í=%lu,Åy≥=%lx)\n", 
d
->
«me
,
Àn
,
ty≥
);

172 
ty≥
) {

173 
NK_DEV_REQ_CALLBACK
:

174 i‡(!
di
->
po°_ª˚ive
) {

175 
	`DEBUG
("packetÑeceiveÇotÖossible\n");

178  
di
->
	`po°_ª˚ive
(
d
->
°©e
,
de°
,
Àn
,
ˇŒback
,state);

181 
NK_DEV_REQ_BLOCKING
:

182 
NK_DEV_REQ_NONBLOCKING
:

183 i‡(!
di
->
po°_ª˚ive
) {

184 
	`DEBUG
("packetÑeceiveÇotÖossible\n");

187 vﬁ©ûê
uöt64_t
 
com∂ëi⁄
 = 0;

189 i‡(
ty≥
==
NK_DEV_REQ_NONBLOCKING
) {

190 i‡(
di
->
	`po°_ª˚ive
(
d
->
°©e
,
de°
,
Àn
,0,0)) {

191 
	`ERROR
("FailedÅoÖostÑeceive\n");

194 
	`DEBUG
("PacketÑeceiveÖosted\n");

198 i‡(
di
->
	`po°_ª˚ive
(
d
->
°©e
,
de°
,
Àn
,
gíîic_ª˚ive_ˇŒback
,(*)&
com∂ëi⁄
)) {

199 
	`ERROR
("FailedÅoÖostÑeceive\n");

202 
	`DEBUG
("PacketÑeceiveÖosted, waiting for completion\n");

203 !
com∂ëi⁄
) {

204 
	`nk_dev_waô
((
nk_dev
 *)
d
);

214 
	}
}

	@numa.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/˝uid.h
>

25 
	~<«utûus/˝u.h
>

26 
	~<«utûus/m§.h
>

27 
	~<«utûus/numa.h
>

28 
	~<«utûus/î∫o.h
>

29 
	~<«utûus/li°.h
>

30 
	~<«utûus/≥r˝u.h
>

31 
	~<«utûus/m©h.h
>

32 
	~<«utûus/∑gög.h
>

33 
	~<«utûus/mm.h
>

34 
	~<«utûus/©omic.h
>

35 
	~<«utûus/«ut_°rög.h
>

36 
	~<«utûus/mu…iboŸ2.h
>

37 
	~<dev/≠ic.h
>

40 #i‚de‡
NAUT_CONFIG_DEBUG_NUMA


41 #unde‡
DEBUG_PRINT


42 
	#DEBUG_PRINT
(
fmt
, 
¨gs
...)

	)

45 
	#NUMA_PRINT
(
fmt
, 
¨gs
...Ë
	`¥ötk
("NUMA: " fmt, ##¨gs)

	)

46 
	#NUMA_DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("NUMA: " fmt, ##¨gs)

	)

47 
	#NUMA_ERROR
(
fmt
, 
¨gs
...Ë
	`ERROR_PRINT
("NUMA: " fmt, ##¨gs)

	)

48 
	#NUMA_WARN
(
fmt
, 
¨gs
...Ë
	`WARN_PRINT
("NUMA: " fmt, ##¨gs)

	)

51 
ölöe
 
uöt32_t


52 
	$√xt_pow2
 (
uöt32_t
 
v
)

54 
v
--;

55 
v
 |= v>>1;

56 
v
 |= v>>2;

57 
v
 |= v>>4;

58 
v
 |= v>>8;

59  ++
v
;

60 
	}
}

63 
uöt8_t


64 
	$gë_max_id_≥r_pkg
 ()

66 
˝uid_ªt_t
 
ªt
;

67 
	`˝uid
(1, &
ªt
);

68  ((
ªt
.
b
 >> 16) & 0xff);

69 
	}
}

72 
uöt8_t


73 
	$amd_gë_cm∂egacy
 ()

75 
˝uid_ªt_t
 
ªt
;

76 
	`˝uid
(
CPUID_AMD_FEATURE_INFO
, &
ªt
);

77  
ªt
.
c
 & 0x2;

78 
	}
}

80 
uöt8_t


81 
	$has_Àafb
 ()

83 
˝uid_ªt_t
 
ªt
;

84 
	`˝uid_sub
(11, 0, &
ªt
);

85  (
ªt
.
b
 != 0);

86 
	}
}

88 
uöt8_t


89 
	$has_hâ
 ()

91 
˝uid_ªt_t
 
ªt
;

92 
	`˝uid
(1, &
ªt
);

93  !!(
ªt
.
d
 & (1<<28));

94 
	}
}

98 
	$öãl_¥obe_wôh_Àafb
 (
nk_t›o_∑øms
 *
ç
)

100 
˝uid_ªt_t
 
ªt
;

101 
subÀaf
 = 0;

102 
smt_width
 = 0;

103 
smtc‹e_width
 = 0;

104 
Àvñ_width
 = 0;

105 
uöt8_t
 
Àvñ_ty≥
 = 0;

106 
uöt8_t
 
found_c‹e
 = 0;

107 
uöt8_t
 
found_smt
 = 0;

111 
	`˝uid_sub
(0xb, 
subÀaf
, &
ªt
);

114 i‡(
ªt
.
b
 == 0) {

118 
Àvñ_ty≥
 = (
ªt
.
c
 >> 8) & 0xff;

119 
Àvñ_width
 = 
ªt
.
a
 & 0xf;

121 
Àvñ_ty≥
) {

123 
smt_width
 = 
Àvñ_width
;

124 
found_smt
 = 1;

127 
smtc‹e_width
 = 
Àvñ_width
;

128 
found_c‹e
 = 1;

133 
subÀaf
++;

137 i‡(
found_c‹e
 && 
found_smt
) {

138 
ç
->
c‹e_bôs
 = 
smtc‹e_width
;

139 
ç
->
smt_bôs
 = 
smt_width
;

140 } i‡(!
found_c‹e
 && 
found_smt
) {

141 
ç
->
c‹e_bôs
 = 0;

142 
ç
->
smt_bôs
 = 
smt_width
;

144 
	`NUMA_WARN
("Intel chip has strangeÅopology...\n");

146 
	}
}

149 
	$öãl_¥obe_wôh_Àaves14
 (
nk_t›o_∑øms
 * 
ç
)

151 
˝uid_ªt_t
 
ªt
;

152 i‡(
	`˝uid_Àaf_max
() >= 0x4) {

153 
	`NUMA_DEBUG
("IntelÖrobingÅopo withÜeaves 1ánd 4\n");

154 
	`˝uid_sub
(4, 0, &
ªt
);

155 
uöt32_t
 
óx_bôs
 = (
ªt
.
a
 >> 26) & 0xff;

156 
ç
->
smt_bôs
 = 
	`√xt_pow2
(
	`gë_max_id_≥r_pkg
());

157 
ç
->
c‹e_bôs
 = 
	`√xt_pow2
(
óx_bôs
 >>Åp->
smt_bôs
);

159 
	`NUMA_DEBUG
("IntelÖrobingÅopo usingÜeaf 1 only\n");

160 
ç
->
smt_bôs
 = 
	`√xt_pow2
(
	`gë_max_id_≥r_pkg
());

161 
ç
->
c‹e_bôs
 = 0;

163 
	}
}

166 
	$amd_gë_t›o_£c⁄d¨y
 (
nk_t›o_∑øms
 * 
ç
)

168 
˝uid_ªt_t
 
ªt
;

169 
	`NUMA_DEBUG
("Attempting AMDÅopoÖrobe\n");

171 
	`˝uid
(
CPUID_AMD_BASIC_INFO
, &
ªt
);

173 
num_c‹es
;

174 
max_num_c‹es
;

175 
thªads_≥r_c‹e
;

176 
c‹es_≥r_¥oc
;

178 i‡(
ªt
.
a
 >
CPUID_AMD_EXT_INFO
) {

179 
	`NUMA_DEBUG
("AMDÖrobingÅopo using CPUID fn 8000_0008\n");

181 
	`˝uid
(
CPUID_AMD_EXT_INFO
, &
ªt
);

183 
ç
->
c‹e_bôs
 = (
ªt
.
c
 >> 12) & 0xf;

185 
num_c‹es
 = (
ªt
.
c
 & 0xff) + 1;

187 i‡(
ç
->
c‹e_bôs
) {

188 
max_num_c‹es
 = 1 << 
ç
->
c‹e_bôs
;

190 
max_num_c‹es
 = 
num_c‹es
;

193 
c‹es_≥r_¥oc
 = 
num_c‹es
;

194 
thªads_≥r_c‹e
 = 
	`amd_gë_cm∂egacy
() ? 1 :

195 
	`gë_max_id_≥r_pkg
()/
c‹es_≥r_¥oc
;

196 
	`NUMA_DEBUG
("%u C‹e†≥∏¥oc, %uÅhªad†≥∏c‹ê(maxÜogiˇ»cou¡=%u)\n", 
c‹es_≥r_¥oc
, 
thªads_≥r_c‹e
,

197 
	`gë_max_id_≥r_pkg
());

199 
ç
->
smt_bôs
 = 
	`ûog2
(
thªads_≥r_c‹e
);

202 
	`NUMA_DEBUG
("AMDÖrobingÅopo using CPUID FN 0x0000_0001\n");

203 
ç
->
c‹e_bôs
 = 
	`√xt_pow2
(
	`gë_max_id_≥r_pkg
());

204 
ç
->
smt_bôs
 = 0;

206 
	}
}

210 
	$öãl_gë_t›o_£c⁄d¨y
 (
nk_t›o_∑øms
 * 
ç
)

212 i‡(
	`˝uid_Àaf_max
(Ë>0xb && 
	`has_Àafb
()) {

213 
	`öãl_¥obe_wôh_Àafb
(
ç
);

215 
	`öãl_¥obe_wôh_Àaves14
(
ç
);

217 
	}
}

219 
ölöe
 

220 
	$gë_t›o_£c⁄d¨y
 (
nk_t›o_∑øms
 * 
ç
)

222 i‡(
	`nk_is_amd
()) {

223 
	`amd_gë_t›o_£c⁄d¨y
(
ç
);

225 
	`öãl_gë_t›o_£c⁄d¨y
(
ç
);

227 
	}
}

231 
	$gë_t›o_∑øms
 (
nk_t›o_∑øms
 * 
ç
)

233 i‡(
	`has_hâ
()) {

235 
	`gë_t›o_£c⁄d¨y
(
ç
);

238 
	`NUMA_DEBUG
("No HTT support, using default values\n");

240 
ç
->
c‹e_bôs
 = 0;

241 
ç
->
smt_bôs
 = 0;

245 
	`NUMA_DEBUG
("FinishedÅopoÖrobe...\n");

246 
	`NUMA_DEBUG
("\tc‹e_bôs=0x%x\n", 
ç
->
c‹e_bôs
);

247 
	`NUMA_DEBUG
("\tsmt_bô†=0x%x\n", 
ç
->
smt_bôs
);

248 
	}
}

251 
	$assign_c‹e_co‹ds
 (
˝u
 * 
me
, 
nk_˝u_co‹ds
 * 
co‹d
, 
nk_t›o_∑øms
 *
ç
)

253 
uöt32_t
 
my_≠ic_id
;

259 i‡(!
	`nk_is_amd
() &&

260 
	`˝uid_Àaf_max
() >= 0xb &&

261 
	`has_Àafb
()) {

263 
˝uid_ªt_t
 
ªt
;

264 
	`˝uid_sub
(0x1, 0, &
ªt
);

265 
	`NUMA_DEBUG
("Using x2APIC for ID\n");

266 
my_≠ic_id
 = 
ªt
.
d
;

269 
my_≠ic_id
 = 
	`≠ic_gë_id
(
	`≥r_˝u_gë
(
≠ic
));

272 
co‹d
->
smt_id
 = 
my_≠ic_id
 & ((1 << 
ç
->
smt_bôs
) - 1);

273 
co‹d
->
c‹e_id
 = (
my_≠ic_id
 >> 
ç
->
smt_bôs
Ë& ((1 <<Åp->
c‹e_bôs
) - 1);

274 
co‹d
->
pkg_id
 = 
my_≠ic_id
 & ~((1 << (
ç
->
smt_bôs
 +Åp->
c‹e_bôs
)) - 1);

276 
	`NUMA_DEBUG
("C‹êOS ID: %u (APIC ID=0x%x):\n", 
me
->
id
, 
my_≠ic_id
);

277 
	`NUMA_DEBUG
("\tLogiˇ»C‹êID: %u\n", 
co‹d
->
smt_id
);

278 
	`NUMA_DEBUG
("\tPhysiˇ»C‹êID: %u\n", 
co‹d
->
c‹e_id
);

279 
	`NUMA_DEBUG
("\tPhysiˇ»Chù ID: %u\n", 
co‹d
->
pkg_id
);

280 
	}
}

289 
	$nk_˝u_t›o_discovî
 (
˝u
 * 
me
)

291 
nk_˝u_co‹ds
 * 
co‹d
 = 
NULL
;

292 
nk_t›o_∑øms
 * 
ç
 = 
NULL
;

294 
co‹d
 = (
nk_˝u_co‹ds
*)
	`mÆloc
((nk_cpu_coords));

295 i‡(!
co‹d
) {

296 
	`NUMA_ERROR
("CouldÇŸáŒoˇã co‹d såu˘ f‹ CPU %u\n", 
	`my_˝u_id
());

299 
	`mem£t
(
co‹d
, 0, (
nk_˝u_co‹ds
));

301 
ç
 = (
nk_t›o_∑øms
*)
	`mÆloc
((nk_topo_params));

302 i‡(!
ç
) {

303 
	`NUMA_ERROR
("CouldÇŸáŒoˇãÖ¨am såu˘ f‹ CPU %u\n", 
	`my_˝u_id
());

304 
out_îr
;

306 
	`mem£t
(
ç
, 0, (
nk_t›o_∑øms
));

308 
	`gë_t›o_∑øms
(
ç
);

311 
	`assign_c‹e_co‹ds
(
me
, 
co‹d
, 
ç
);

313 
me
->
ç
 =Åp;

314 
me
->
co‹d
 = coord;

318 
out_îr
:

319 
	`‰ì
(
co‹d
);

321 
	}
}

326 
	$dump_mem_ªgi⁄s
 (
numa_domaö
 * 
d
)

328 
mem_ªgi⁄
 * 
ªg
 = 
NULL
;

329 
i
 = 0;

331 
	`li°_f‹_óch_íåy
(
ªg
, &(
d
->
ªgi⁄s
), 
íåy
) {

332 
	`¥ötk
("\tMem‹y Regi⁄ %u:\n", 
i
);

333 
	`¥ötk
("\t\tR™ge: %∞- %p\n", (*)
ªg
->
ba£_addr
, (*)‘eg->ba£_add∏+Ñeg->
Àn
));

334 
	`¥ötk
("\t\tSize: %lu.%lu MB\n", 
ªg
->
Àn
 / 1000000,Ñeg->len % 1000000);

335 
	`¥ötk
("\t\tE«bÀd: %s\n", 
ªg
->
íabÀd
 ? "Yes" : "No");

336 
	`¥ötk
("\t\tHŸ PluggabÀ: %s\n", 
ªg
->
hŸ_∂uggabÀ
 ? "Yes" : "No");

337 
	`¥ötk
("\t\tN⁄-vﬁ©ûe: %s\n", 
ªg
->
n⁄vﬁ©ûe
 ? "Yes" : "No");

338 
i
++;

340 
	}
}

344 
	$dump_adj_li°
 (
numa_domaö
 * 
d
)

346 
domaö_adj_íåy
 * 
ít
 = 
NULL
;

348 i‡(
	`li°_em±y
(&
d
->
adj_li°
)) {

349 
	`¥ötk
("[noÉntries inádjacencyÜist]\n");

352 
	`¥ötk
("[ ");

353 
	`li°_f‹_óch_íåy
(
ít
, &(
d
->
adj_li°
), 
li°_ít
) {

354 
	`¥ötk
("%u ", 
ít
->
domaö
->
id
);

356 
	`¥ötk
("]\n");

357 
	}
}

361 
	$dump_numa_domaös
 (
nk_loˇlôy_öfo
 * 
numa
)

363 
i
;

365 
	`¥ötk
("%u NUMA Domaös:\n", 
numa
->
num_domaös
);

366 
	`¥ötk
("----------------\n");

368 
i
 = 0; i < 
numa
->
num_domaös
; i++) {

370 
numa_domaö
 * 
domaö
 = 
numa
->
domaös
[
i
];

372 
	`¥ötk
("Domain %u (Total Size = %lu.%lu MB)\n",

373 
domaö
->
id
,

374 
domaö
->
addr_•a˚_size
 / 1000000,

375 
domaö
->
addr_•a˚_size
 % 1000000);

377 
	`¥ötk
("Adjacency List (ordered by distance): ");

378 
	`dump_adj_li°
(
domaö
);

380 
	`¥ötk
("%u c⁄°ôuíàªgi⁄%s:\n", 
domaö
->
num_ªgi⁄s
, domain->num_regions > 1 ? "s" : "");

382 
	`dump_mem_ªgi⁄s
(
domaö
);

383 
	`¥ötk
("\n");

385 
	}
}

389 
	$dump_numa_m©rix
 (
nk_loˇlôy_öfo
 * 
numa
)

391 
i
,
j
;

393 i‡(!
numa
 || !numa->
numa_m©rix
) {

397 
	`¥ötk
("NUMA Distance Matrix:\n");

398 
	`¥ötk
("---------------------\n");

399 
	`¥ötk
(" ");

401 
i
 = 0; i < 
numa
->
num_domaös
; i++) {

402 
	`¥ötk
("%02u ", 
i
);

404 
	`¥ötk
("\n");

406 
i
 = 0; i < 
numa
->
num_domaös
; i++) {

407 
	`¥ötk
("%02u ", 
i
);

408 
j
 = 0; j < 
numa
->
num_domaös
; j++) {

409 
	`¥ötk
("%02u ", *(
numa
->
numa_m©rix
 + 
i
*numa->
num_domaös
 + 
j
));

411 
	`¥ötk
("\n");

414 
	}
}

418 
	$__assocüã_domaös_¶ô
 (
nk_loˇlôy_öfo
 * 
loc
)

420 
i
, 
j
;

422 
	`NUMA_DEBUG
("Associate Domains Using SLIT\n");

424 
i
 = 0; i < 
loc
->
num_domaös
; i++) {

425 
j
 = 0; j < 
loc
->
num_domaös
; j++) {

426 i‡(
j
 =
i
) ;

428 
domaö_adj_íåy
 * 
√w_dom_ít
 = 
	`mm_boŸ_Æloc
((domain_adj_entry));

429 
√w_dom_ít
->
domaö
 = 
loc
->
domaös
[
j
];

430 i‡(
	`li°_em±y
(&(
loc
->
domaös
[
i
]->
adj_li°
))) {

431 
	`li°_add
(&(
√w_dom_ít
->
li°_ít
), &(
loc
->
domaös
[
i
]->
adj_li°
));

433 
domaö_adj_íåy
 * 
ít
 = 
NULL
;

434 
	`li°_f‹_óch_íåy
(
ít
, &(
loc
->
domaös
[
i
]->
adj_li°
), 
li°_ít
) {

435 
uöt8_t
 
di°_to_j
 = *(
loc
->
numa_m©rix
 + 
i
*loc->
num_domaös
 + 
j
);

436 
uöt8_t
 
di°_to_Ÿhî
 = *(
loc
->
numa_m©rix
 + 
i
*loc->
num_domaös
 + 
ít
->
domaö
->
id
);

438 i‡(
di°_to_j
 < 
di°_to_Ÿhî
) {

439 
	`li°_add_èû
(&(
√w_dom_ít
->
li°_ít
), &(
ít
->list_ent));

443 
	`li°_add_èû
(&(
√w_dom_ít
->
li°_ít
), &(
loc
->
domaös
[
i
]->
adj_li°
));

448 
	}
}

452 
	$__assocüã_domaös_adhoc
 (
nk_loˇlôy_öfo
 * 
loc
)

454 
i
, 
j
;

456 
	`NUMA_DEBUG
("WARNING Associate Domains using ADHOC METHOD\n");

458 
i
 = 0; i < 
loc
->
num_domaös
; i++) {

459 
j
 = 0; j < 
loc
->
num_domaös
; j++) {

460 i‡(
j
 =
i
) ;

462 
domaö_adj_íåy
 * 
√w_dom_ít
 = 
	`mm_boŸ_Æloc
((domain_adj_entry));

463 
√w_dom_ít
->
domaö
 = 
loc
->
domaös
[
j
];

464 
	`NUMA_DEBUG
("Addög domaö %uÅÿadja˚ncyÜi° o‡domaö %u\n", 
j
, 
i
);

465 
	`li°_add
(&(
√w_dom_ít
->
li°_ít
), &(
loc
->
domaös
[
i
]->
adj_li°
));

468 
	}
}

472 
	$__cﬂÀs˚_ªgi⁄s
 (
numa_domaö
 * 
d
)

474 
mem_ªgi⁄
 * 
mem
 = 
NULL
;

475 
i
;

477 
	`NUMA_DEBUG
("CﬂÀs˚ Regi⁄†domaö id=%lu\n",
d
->
id
);

479 
ª°¨t_sˇn
:

480 
	`NUMA_DEBUG
("Restart Scan\n");

481 
i
 = 0;

482 
	`li°_f‹_óch_íåy
(
mem
, &
d
->
ªgi⁄s
, 
íåy
) {

484 i‡(
mem
->
íåy
.
√xt
 !&
d
->
ªgi⁄s
) {

486 
	`NUMA_DEBUG
("ExamöögÑegi⁄ : ba£=%p,Üí=0x%lx, domaö=0x%lxÉ«bÀd=%d hŸ_∂ug=%dÇv=%d\n",
mem
->
ba£_addr
, mem->
Àn
, mem->
domaö_id
, mem->
íabÀd
, mem->
hŸ_∂uggabÀ
, mem->
n⁄vﬁ©ûe
);

487 
mem_ªgi⁄
 * 
√xt_mem
 = 
	`li°_íåy
(
mem
->
íåy
.
√xt
, mem_region,Éntry);

488 
	`ASSERT
(
√xt_mem
);

490 
	`NUMA_DEBUG
("Nexàªgi⁄ is: ba£=%p,Üí=0x%lx, domaö=0x%lx,É«bÀd=%d, hŸ_∂ug=%dÇv=%d\n",
√xt_mem
->
ba£_addr
,Çext_mem->
Àn
,Çext_mem->
domaö_id
,Çext_mem->
íabÀd
,Çext_mem->
hŸ_∂uggabÀ
,Çext_mem->
n⁄vﬁ©ûe
);

492 i‡(
√xt_mem
->
ba£_addr
 =
mem
->ba£_add∏+ mem->
Àn
) {

494 
	`NUMA_DEBUG
("CﬂÀscögádja˚¡Ñegi⁄†%uánd %u i¿domaö %u\n", 
i
, i+1, 
d
->
id
);

495 
	`NUMA_DEBUG
("Fú°Ñegi⁄ i†ba£=%p,Üí=0x%lx, domaö=0x%lxÉ«bÀd=%d\n",
mem
->
ba£_addr
, mem->
Àn
, mem->
domaö_id
, mem->
íabÀd
);

496 
	`NUMA_DEBUG
("Sec⁄dÑegi⁄ i†ba£=%p,Üí=0x%lx, domaö=0x%lxÉ«bÀd=%d\n", 
√xt_mem
->
ba£_addr
,Çext_mem->
Àn
,Çext_mem->
domaö_id
,Çext_mem->
íabÀd
);

497 
mem_ªgi⁄
 * 
√w_ªg
 = 
	`mm_boŸ_Æloc
((mem_region));

498 i‡(!
√w_ªg
) {

499 
	`∑nic
("CouldÇot createÇew coalesced memoryÑegion\n");

502 
	`mem£t
(
√w_ªg
, 0, (
mem_ªgi⁄
));

505 
√w_ªg
->
ba£_addr
 = 
mem
->base_addr;

506 
√w_ªg
->
Àn
 = 
mem
->À¿+ 
√xt_mem
->len;

507 
√w_ªg
->
domaö_id
 = 
mem
->domain_id;

508 
√w_ªg
->
íabÀd
 = 
mem
->enabled;

510 
	`NUMA_DEBUG
("Comböed Regi⁄ i†ba£=%p,Üí=0x%lx, domaö=0x%lxÉ«bÀd=%d\n", 
√w_ªg
->
ba£_addr
,Çew_ªg->
Àn
,Çew_ªg->
domaö_id
,Çew_ªg->
íabÀd
);

515 
	`li°_add_èû
(&
√w_ªg
->
íåy
, &
mem
->entry);

518 
	`li°_dñ
(&
mem
->
íåy
);

519 
	`li°_dñ
(&
√xt_mem
->
íåy
);

521 --
d
->
num_ªgi⁄s
;

522 
ª°¨t_sˇn
;

527 
i
++;

529 
	}
}

539 
	$cﬂÀs˚_ªgi⁄s
 (
nk_loˇlôy_öfo
 * 
loc
)

541 
i
;

543 
	`NUMA_DEBUG
("Coalesce Regions\n");

544 
i
 = 0; i < 
loc
->
num_domaös
; i++) {

545 
	`__cﬂÀs˚_ªgi⁄s
(
loc
->
domaös
[
i
]);

547 
	}
}

551 
	$assocüã_domaös
 (
nk_loˇlôy_öfo
 * 
loc
)

553 
	`NUMA_DEBUG
("Associate Domains\n");

554 i‡(
loc
->
numa_m©rix
) {

555 
	`__assocüã_domaös_¶ô
(
loc
);

557 
	`__assocüã_domaös_adhoc
(
loc
);

559 
	}
}

562 
mem_ªgi⁄
 *

563 
	$nk_gë_ba£_ªgi⁄_by_num
 (
num
)

565 
nk_loˇlôy_öfo
 * 
loc
 = &(
«utûus_öfo
.
sys
.
loˇlôy_öfo
);

567 
	`ASSERT
(
num
 < 
loc
->
num_domaös
);

569 
li°_hód
 * 
fú°
 = 
loc
->
domaös
[
num
]->
ªgi⁄s
.
√xt
;

570  
	`li°_íåy
(
fú°
, 
mem_ªgi⁄
, 
íåy
);

571 
	}
}

574 
mem_ªgi⁄
 *

575 
	$nk_gë_ba£_ªgi⁄_by_˝u
 (
˝u_id_t
 
˝u
)

577 
numa_domaö
 * 
domaö
 = 
	`nk_gë_«utûus_öfo
()->
sys
.
˝us
[
˝u
]->domain;

578 
li°_hód
 * 
fú°
 = 
domaö
->
ªgi⁄s
.
√xt
;

579  
	`li°_íåy
(
fú°
, 
mem_ªgi⁄
, 
íåy
);

580 
	}
}

584 
	$nk_my_numa_node
 ()

586  
	`≥r_˝u_gë
(
domaö
)->
id
;

587 
	}
}

591 
	$nk_dump_numa_öfo
 ()

593 
nk_loˇlôy_öfo
 * 
numa
 = &(
	`nk_gë_«utûus_öfo
()->
sys
.
loˇlôy_öfo
);

595 
	`¥ötk
("===================\n");

596 
	`¥ötk
(" NUMA INFO:\n");

597 
	`¥ötk
("===================\n");

599 
	`dump_numa_domaös
(
numa
);

601 
	`dump_numa_m©rix
(
numa
);

603 
	`¥ötk
("\n");

604 
	`¥ötk
("======================\n");

605 
	`¥ötk
(" END NUMA INFO:\n");

606 
	`¥ötk
("======================\n");

607 
	}
}

610 
	$nk_gë_num_domaös
 ()

612 
nk_loˇlôy_öfo
 * 
l
 = &(
	`nk_gë_«utûus_öfo
()->
sys
.
loˇlôy_öfo
);

614  
l
->
num_domaös
;

615 
	}
}

624 
	$nk_numa_öô
 ()

626 
sys_öfo
 * 
sys
 = &(
	`nk_gë_«utûus_öfo
()->sys);

628 
	`NUMA_DEBUG
("NUMA ARCH INIT\n");

630 i‡(
	`¨ch_numa_öô
(
sys
) != 0) {

631 
	`NUMA_ERROR
("Error initializingárch-specific NUMA\n");

638 i‡(
sys
->
loˇlôy_öfo
.
num_domaös
 == 0) {

640 
	`NUMA_DEBUG
("No domains inÜocality info - making it up\n");

642 
i
;

643 
numa_domaö
 * 
domaö
 = 
	`mm_boŸ_Æloc
((numa_domain));

645 i‡(!
domaö
) {

646 
	`NUMA_ERROR
("CouldÇot create main NUMA domain\n");

650 
	`mem£t
(
domaö
, 0, (
numa_domaö
));

652 
domaö
->
id
 = 0;

653 
	`INIT_LIST_HEAD
(&
domaö
->
ªgi⁄s
);

654 
	`INIT_LIST_HEAD
(&
domaö
->
adj_li°
);

656 
sys
->
loˇlôy_öfo
.
num_domaös
 = 1;

657 
sys
->
loˇlôy_öfo
.
domaös
[0] = 
domaö
;

659 
i
 = 0; i < 
	`mm_boŸ_num_ªgi⁄s
(); i++) {

660 
mem_m≠_íåy
 * 
m
 = 
	`mm_boŸ_gë_ªgi⁄
(
i
);

661 
mem_ªgi⁄
 * 
ªgi⁄
 = 
NULL
;

662 i‡(!
m
) {

663 
	`NUMA_ERROR
("Couldn'àgë mem‹y m≠Ñegi⁄ %u\n", 
i
);

667 i‡(
m
->
ty≥
 !
MULTIBOOT_MEMORY_AVAILABLE
) {

671 
ªgi⁄
 = 
	`mm_boŸ_Æloc
((
mem_ªgi⁄
));

672 i‡(!
ªgi⁄
) {

673 
	`NUMA_ERROR
("Couldn'tállocate memoryÑegion\n");

676 
	`mem£t
(
ªgi⁄
, 0, (
mem_ªgi⁄
));

678 
ªgi⁄
->
domaö_id
 = 0;

679 
ªgi⁄
->
ba£_addr
 = 
m
->
addr
;

680 
ªgi⁄
->
Àn
 = 
m
->len;

681 
ªgi⁄
->
íabÀd
 = 1;

682 
ªgi⁄
->
hŸ_∂uggabÀ
 = 0;

683 
ªgi⁄
->
n⁄vﬁ©ûe
 = 0;

685 
domaö
->
num_ªgi⁄s
++;

686 
domaö
->
addr_•a˚_size
 +
ªgi⁄
->
Àn
;

689 i‡(
	`li°_em±y
(&
domaö
->
ªgi⁄s
)) {

690 
	`li°_add
(&
ªgi⁄
->
íåy
, &
domaö
->
ªgi⁄s
);

692 
mem_ªgi⁄
 * 
ít
 = 
NULL
;

693 
	`li°_f‹_óch_íåy
(
ít
, &
domaö
->
ªgi⁄s
, 
íåy
) {

694 i‡(
ªgi⁄
->
ba£_addr
 < 
ít
->base_addr) {

695 
	`li°_add_èû
(&
ªgi⁄
->
íåy
, &
ít
->entry);

699 i‡(
ít
 !(
mem_ªgi⁄
 *)&
domaö
->
ªgi⁄s
) {

700 
	`li°_add_èû
(&
ªgi⁄
->
íåy
, &
domaö
->
ªgi⁄s
);

707 
i
 = 0; i < 
sys
->
num_˝us
; i++) {

708 
sys
->
˝us
[
i
]->
domaö
 = domain;

715 
	`assocüã_domaös
(&
sys
->
loˇlôy_öfo
);

718 
	`cﬂÀs˚_ªgi⁄s
(&
sys
->
loˇlôy_öfo
);

720 #ifde‡
NAUT_CONFIG_DEBUG_NUMA


721 
	`nk_dump_numa_öfo
();

725 
	}
}

	@paging.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/∑gög.h
>

25 
	~<«utûus/«ut_°rög.h
>

26 
	~<«utûus/mb_utûs.h
>

27 
	~<«utûus/idt.h
>

28 
	~<«utûus/˝u.h
>

29 
	~<«utûus/î∫o.h
>

30 
	~<«utûus/˝uid.h
>

31 
	~<«utûus/backåa˚.h
>

32 
	~<«utûus/ma¸os.h
>

33 
	~<«utûus/«ut_as£π.h
>

34 
	~<«utûus/numa.h
>

35 
	~<«utûus/mm.h
>

36 
	~<lib/bôm≠.h
>

37 
	~<«utûus/≥r˝u.h
>

39 #ifde‡
NAUT_CONFIG_XEON_PHI


40 
	~<«utûus/sfi.h
>

43 #ifde‡
NAUT_CONFIG_HVM_HRT


44 
	~<¨ch/hπ/hπ.h
>

47 #i‚de‡
NAUT_CONFIG_DEBUG_PAGING


48 #unde‡
DEBUG_PRINT


49 
	#DEBUG_PRINT
(
fmt
, 
¨gs
...)

	)

53 
uöt8_t
 
boŸ_mm_öa˘ive
;

55 
ul⁄g_t
 
pml4
;

58 * 
	gps2°r
[3] = {

59 [
PS_4K
] = "4KB",

60 [
PS_2M
] = "2MB",

61 [
PS_1G
] = "1GB",

65 
uöt8_t
 
˝u_öfo_ªady
;

78 
ölöe
 
ul⁄g_t


79 
	$Æign_addr
 (
ul⁄g_t
 
addr
, ul⁄g_à
Æign
)

81 
	`ASSERT
(!(
Æign
 & (align-1)));

82  (~(
Æign
 - 1)Ë& (
addr
 +álign);

83 
	}
}

86 
ölöe
 

87 
	$gig_∑ges_suµ‹ãd
 ()

89 
˝uid_ªt_t
 
ªt
;

90 
˝uid_amd_edx_Êags
 
Êags
;

91 
	`˝uid
(
CPUID_AMD_FEATURE_INFO
, &
ªt
);

92 
Êags
.
vÆ
 = 
ªt
.
d
;

93  
Êags
.
pg1gb
;

94 
	}
}

97 
∑ge_size_t


98 
	$œrge°_∑ge_size
 ()

100 i‡(
	`gig_∑ges_suµ‹ãd
()) {

101  
PS_1G
;

104  
PS_2M
;

105 
	}
}

152 
	$drûl_pd
 (
pde_t
 * 
pd
, 
addr_t
 
addr
,áddr_à
m≠_addr
, 
uöt64_t
 
Êags
)

154 
uöt_t
 
pd_idx
 = 
	`PADDR_TO_PD_IDX
(
addr
);

155 
±e_t
 * 
±
 = 0;

156 
addr_t
 
∑ge
 = 0;

158 
	`DEBUG_PRINT
("drûlögÖd,Öd idx: 0x%x\n", 
pd_idx
);

160 i‡(
	`PDE_PRESENT
(
pd
[
pd_idx
])) {

162 
	`DEBUG_PRINT
("pdÉ¡ry i†¥e£¡, sëtög (addr=%p,Êags=%x)\n", (*)
m≠_addr
,
Êags
);

163 
pd
[
pd_idx
] = 
m≠_addr
 | 
Êags
 | 
PTE_PAGE_SIZE_BIT
 | 
PTE_PRESENT_BIT
;

164 
	`övÕg
(
m≠_addr
);

168 i‡(
m≠_addr
) {

170 
	`DEBUG_PRINT
("¸ótög m™uÆ m≠pögÅÿ∑ddr: %p\n", 
m≠_addr
);

171 
∑ge
 = 
m≠_addr
;

173 
pd
[
pd_idx
] = 
∑ge
 | 
Êags
 | 
PTE_PAGE_SIZE_BIT
;

177 
	`∑nic
("tryingÅoállocate 2MBÖage withÇoáddressÖrovided!\n");

179 
	`DEBUG_PRINT
("pdÉntryÇotÅhere, creatingáÇew one\n");

180 
±
 = (
±e_t
*)
	`Æloc_∑ge
();

182 i‡(!
±
) {

183 
	`ERROR_PRINT
("ouào‡mem‹y i¿%s\n", 
__FUNCTION__
);

187 
	`mem£t
((*)
±
, 0, 
NUM_PT_ENTRIES
*(
±e_t
));

189 
pd
[
pd_idx
] = (
ul⁄g_t
)
±
 | 
PTE_PRESENT_BIT
 | 
PTE_WRITABLE_BIT
;

195 
	}
}

199 
	$drûl_pd±
 (
pd±e_t
 * 
pd±
, 
addr_t
 
addr
,áddr_à
m≠_addr
, 
uöt64_t
 
Êags
)

201 
uöt_t
 
pd±_idx
 = 
	`PADDR_TO_PDPT_IDX
(
addr
);

202 
pde_t
 * 
pd
 = 0;

204 
	`DEBUG_PRINT
("drûlögÖd±,Öd± idx: 0x%x\n", 
pd±_idx
);

206 i‡(
	`PDPTE_PRESENT
(
pd±
[
pd±_idx
])) {

208 
	`DEBUG_PRINT
("pdptÉntry isÖresent\n");

209 
pd
 = (
pde_t
*)(
pd±
[
pd±_idx
] & 
PTE_ADDR_MASK
);

213 
	`DEBUG_PRINT
("pdptÉntryÇotÅhere, creatingáÇewÖage directory\n");

214 
pd
 = (
pde_t
*)
	`mm_boŸ_Æloc_Æig√d
(
PAGE_SIZE_4KB
, PAGE_SIZE_4KB);

215 
	`DEBUG_PRINT
("∑gêdúáŒoˇãdáà%p\n", 
pd
);

217 i‡(!
pd
) {

218 
	`ERROR_PRINT
("ouào‡mem‹y i¿%s\n", 
__FUNCTION__
);

219  -
EINVAL
;

222 
	`mem£t
((*)
pd
, 0, 
NUM_PD_ENTRIES
*(
pde_t
));

224 
pd±
[
pd±_idx
] = (
ul⁄g_t
)
pd
 | 
PTE_PRESENT_BIT
 | 
PTE_WRITABLE_BIT
;

228 
	`DEBUG_PRINT
("thêíåy (addr: 0x%x): 0x%x\n", &
pd±
[
pd±_idx
],Ödpt[pdpt_idx]);

229  
	`drûl_pd
(
pd
, 
addr
, 
m≠_addr
, 
Êags
);

230 
	}
}

234 
	$drûl_∑ge_èbÀs
 (
addr_t
 
addr
,áddr_à
m≠_addr
, 
uöt64_t
 
Êags
)

236 
pml4e_t
 * 
_pml4
 = (pml4e_t*)
	`ªad_¸3
();

237 
uöt_t
 
pml4_idx
 = 
	`PADDR_TO_PML4_IDX
(
addr
);

238 
pd±e_t
 * 
pd±
 = 0;

240 i‡(
	`PML4E_PRESENT
(
_pml4
[
pml4_idx
])) {

242 
	`DEBUG_PRINT
("pml4Éntry isÖresent\n");

243 
pd±
 = (
pd±e_t
*)(
_pml4
[
pml4_idx
] & 
PTE_ADDR_MASK
);

247 
	`∑nic
("no PML4Éntry!\n");

249 
	`DEBUG_PRINT
("pml4ÉntryÇotÅhere, creatingáÇew one\n");

251 
pd±
 = (
pd±e_t
*)
	`mm_boŸ_Æloc_Æig√d
(
PAGE_SIZE_4KB
, PAGE_SIZE_4KB);

253 i‡(!
pd±
) {

254 
	`ERROR_PRINT
("ouào‡mem‹y i¿%s\n", 
__FUNCTION__
);

255  -
EINVAL
;

258 
	`mem£t
((*)
pd±
, 0, 
NUM_PDPT_ENTRIES
*(
pd±e_t
));

259 
_pml4
[
pml4_idx
] = (
ul⁄g_t
)
pd±
 | 
PTE_PRESENT_BIT
 | 
PTE_WRITABLE_BIT
;

262 
	`DEBUG_PRINT
("thêíåy (addr: 0x%x): 0x%x\n", &
_pml4
[
pml4_idx
], _pml4[pml4_idx]);

263  
	`drûl_pd±
(
pd±
, 
addr
, 
m≠_addr
, 
Êags
);

264 
	}
}

280 
	$nk_m≠_∑ge
 (
addr_t
 
vaddr
,áddr_à
∑ddr
, 
uöt64_t
 
Êags
, 
∑ge_size_t
 
ps
)

282 i‡(
	`drûl_∑ge_èbÀs
(
	`ROUND_DOWN_TO_PAGE
(
∑ddr
), ROUND_DOWN_TO_PAGE’addr), 
Êags
) != 0) {

283 
	`ERROR_PRINT
("CouldÇŸ m≠Öagê© vadd∏%∞∑dd∏%p\n", (*)
vaddr
, (*)
∑ddr
);

284  -
EINVAL
;

288 
	}
}

304 
	$nk_m≠_∑ge_noˇche
 (
addr_t
 
∑ddr
, 
uöt64_t
 
Êags
, 
∑ge_size_t
 
ps
)

306 i‡(
	`nk_m≠_∑ge
(
∑ddr
,Öaddr, 
Êags
|
PTE_CACHE_DISABLE_BIT
, 
ps
) != 0) {

307 
	`ERROR_PRINT
("CouldÇot map uncachedÖage\n");

308  -
EINVAL
;

312 
	}
}

322 
	$nk_pf_h™dÀr
 (
ex˝_íåy_t
 * 
ex˝
,

323 
ex˝_vec_t
 
ve˘‹
,

324 
addr_t
 
Áu…_addr
)

327 
˝u_id_t
 
id
 = 
˝u_öfo_ªady
 ? 
	`my_˝u_id
() : 0xffffffff;

329 #ifde‡
NAUT_CONFIG_HVM_HRT


330 i‡(
ex˝
->
îr‹_code
 =
UPCALL_MAGIC_ERROR
) {

331  
	`«utûus_hπ_upˇŒ_h™dÀr
(
NULL
, 0);

335 
	`¥ötk
("\n+++ Page Fault +++\n"

338 (*)
ex˝
->
rù
,

339 
Áu…_addr
,

340 
ex˝
->
îr‹_code
,

341 
id
);

343 
nk_ªgs
 * 
r
 = (nk_ªgs*)((*)
ex˝
 - 128);

344 
	`nk_¥öt_ªgs
(
r
);

345 
	`backåa˚
(
r
->
rbp
);

347 
	`∑nic
("+++ HALTING +++\n");

349 
	}
}

356 
	$__fûl_pml
 (
pml4e_t
 * 
pml
,

357 
∑ge_size_t
 
ps
,

358 
ul⁄g_t
 
ba£_addr
,

359 
ul⁄g_t
 
√¡s
,

360 
ul⁄g_t
 
Êags
)

362 
ul⁄g_t
 
i
;

364 
	`ASSERT
(
√¡s
 <
NUM_PML4_ENTRIES
);

366 
i
 = 0; i < 
√¡s
; i++) {

367 
pd±e_t
 * 
pd±
 = 
NULL
;

368 
pd±
 = 
	`mm_boŸ_Æloc_Æig√d
(
PAGE_SIZE_4KB
, PAGE_SIZE_4KB);

369 i‡(!
pd±
) {

370 
	`ERROR_PRINT
("CouldÇotállocateÖdpt\n");

373 
	`mem£t
((*)
pd±
, 0, 
PAGE_SIZE_4KB
);

374 
pml
[
i
] = (
ul⁄g_t
)
pd±
 | 
Êags
;

377 
	}
}

381 
	$__fûl_pd±
 (
pd±e_t
 * 
pd±
,

382 
∑ge_size_t
 
ps
,

383 
ul⁄g_t
 
ba£_addr
,

384 
ul⁄g_t
 
√¡s
,

385 
ul⁄g_t
 
Êags
)

387 
ul⁄g_t
 
i
;

389 
	`ASSERT
(
√¡s
 <
NUM_PDPT_ENTRIES
);

391 
i
 = 0; i < 
√¡s
; i++) {

393 i‡(
ps
 =
PS_1G
) {

394 
pd±
[
i
] = 
ba£_addr
 | 
Êags
 | 
PTE_PAGE_SIZE_BIT
;

396 
pde_t
 * 
pd
 = 
NULL
;

397 
pd
 = 
	`mm_boŸ_Æloc_Æig√d
(
PAGE_SIZE_4KB
, PAGE_SIZE_4KB);

398 i‡(!
pd
) {

399 
	`ERROR_PRINT
("CouldÇotállocateÖd\n");

402 
	`mem£t
(
pd
, 0, 
PAGE_SIZE_4KB
);

403 
pd±
[
i
] = (
ul⁄g_t
)
pd
 | 
Êags
;

406 
ba£_addr
 +
PAGE_SIZE_1GB
;

408 
	}
}

411 
	$__fûl_pd
 (
pde_t
 * 
pd
,

412 
∑ge_size_t
 
ps
,

413 
ul⁄g_t
 
ba£_addr
,

414 
ul⁄g_t
 
√¡s
,

415 
ul⁄g_t
 
Êags
)

417 
ul⁄g_t
 
i
;

419 
	`ASSERT
(
√¡s
 <
NUM_PD_ENTRIES
);

420 
	`ASSERT
(
ps
 =
PS_2M
 ||Ö†=
PS_4K
);

422 
i
 = 0; i < 
√¡s
; i++) {

424 i‡(
ps
 =
PS_2M
) {

425 
pd
[
i
] = 
ba£_addr
 | 
Êags
 | 
PTE_PAGE_SIZE_BIT
;

427 
±e_t
 * 
±
 = 
NULL
;

428 
±
 = 
	`mm_boŸ_Æloc_Æig√d
(
PAGE_SIZE_4KB
, PAGE_SIZE_4KB);

429 i‡(!
±
) {

430 
	`ERROR_PRINT
("CouldÇotállocateÖt\n");

433 
	`mem£t
(
±
, 0, 
PAGE_SIZE_4KB
);

434 
±
[
i
] = (
ul⁄g_t
Ìà| 
Êags
;

437 
ba£_addr
 +
PAGE_SIZE_2MB
;

440 
	}
}

444 
	$__fûl_±
 (
±e_t
 * 
±
,

445 
∑ge_size_t
 
ps
,

446 
ul⁄g_t
 
ba£_addr
,

447 
ul⁄g_t
 
√¡s
,

448 
ul⁄g_t
 
Êags
)

450 
ul⁄g_t
 
i
;

452 
	`ASSERT
(
ps
 =
PS_4K
);

453 
	`ASSERT
(
√¡s
 <
NUM_PT_ENTRIES
);

455 
i
 = 0; i < 
√¡s
; i++) {

456 
±
[
i
] = 
ba£_addr
 | 
Êags
;

457 
ba£_addr
 +
PAGE_SIZE_4KB
;

459 
	}
}

462 
	$__c⁄°ru˘_èbÀs_4k
 (
pml4e_t
 * 
pml
, 
ul⁄g_t
 
byãs
)

464 
ul⁄g_t
 
≈ages
 = (
byãs
 + 
PAGE_SIZE_4KB
 - 1)/PAGE_SIZE_4KB;

465 
ul⁄g_t
 
num_±s
 = (
≈ages
 + 
NUM_PT_ENTRIES
 - 1)/ NUM_PT_ENTRIES;

466 
ul⁄g_t
 
num_pds
 = (
num_±s
 + 
NUM_PD_ENTRIES
 - 1)/NUM_PD_ENTRIES;

467 
ul⁄g_t
 
num_pd±s
 = (
num_pds
 + 
NUM_PDPT_ENTRIES
 - 1)/NUM_PDPT_ENTRIES;

468 
ul⁄g_t
 
fûÀd_pd±s
 = 0;

469 
ul⁄g_t
 
fûÀd_pds
 = 0;

470 
ul⁄g_t
 
fûÀd_±s
 = 0;

471 
ul⁄g_t
 
fûÀd_pgs
 = 0;

472 
i
, 
j
, 
k
;

473 
ul⁄g_t
 
addr
 = 0;

475 
	`__fûl_pml
(
pml
, 
PS_4K
, 
addr
, 
num_pd±s
, 
PTE_PRESENT_BIT
 | 
PTE_WRITABLE_BIT
);

477 
i
 = 0; i < 
NUM_PML4_ENTRIES
 && 
fûÀd_pd±s
 < 
num_pd±s
; i++) {

479 
pd±e_t
 * 
pd±
 = (pd±e_t*)
	`PTE_ADDR
(
pml
[
i
]);

480 
	`__fûl_pd±
(
pd±
, 
PS_4K
, 
addr
, 
num_pds
, 
PTE_PRESENT_BIT
 | 
PTE_WRITABLE_BIT
);

482 
j
 = 0; j < 
NUM_PDPT_ENTRIES
 && 
fûÀd_pds
 < 
num_pds
; j++) {

484 
pde_t
 * 
pd
 = (pde_t*)
	`PTE_ADDR
(
pd±
[
j
]);

485 
	`__fûl_pd
(
pd
, 
PS_4K
, 
addr
, 
num_±s
, 
PTE_PRESENT_BIT
 | 
PTE_WRITABLE_BIT
);

487 
k
 = 0; k < 
NUM_PD_ENTRIES
 && 
fûÀd_±s
 < 
num_±s
; k++) {

489 
±e_t
 * 
±
 = (±e_t*)
	`PTE_ADDR
(
pd
[
k
]);

491 
ul⁄g_t
 
to_fûl
 = ((
≈ages
 - 
fûÀd_pgs
Ë> 
NUM_PT_ENTRIES
) ? NUM_PT_ENTRIES :

492 
≈ages
 - 
fûÀd_pgs
;

494 
	`__fûl_±
(
±
, 
PS_4K
, 
addr
, 
to_fûl
, 
PTE_PRESENT_BIT
 | 
PTE_WRITABLE_BIT
);

496 
fûÀd_pgs
 +
to_fûl
;

497 
addr
 +
PAGE_SIZE_4KB
*
to_fûl
;

499 ++
fûÀd_±s
;

502 ++
fûÀd_pds
;

505 ++
fûÀd_pd±s
;

507 
	}
}

511 
	$__c⁄°ru˘_èbÀs_2m
 (
pml4e_t
 * 
pml
, 
ul⁄g_t
 
byãs
)

513 
ul⁄g_t
 
≈ages
 = (
byãs
 + 
PAGE_SIZE_2MB
 - 1)/PAGE_SIZE_2MB;

514 
ul⁄g_t
 
num_pds
 = (
≈ages
 + 
NUM_PD_ENTRIES
 - 1)/NUM_PD_ENTRIES;

515 
ul⁄g_t
 
num_pd±s
 = (
num_pds
 + 
NUM_PDPT_ENTRIES
 - 1)/NUM_PDPT_ENTRIES;

516 
ul⁄g_t
 
fûÀd_pd±s
 = 0;

517 
ul⁄g_t
 
fûÀd_pds
 = 0;

518 
ul⁄g_t
 
fûÀd_pgs
 = 0;

519 
i
, 
j
;

520 
ul⁄g_t
 
addr
 = 0;

522 
	`__fûl_pml
(
pml
, 
PS_2M
, 
addr
, 
num_pd±s
, 
PTE_PRESENT_BIT
 | 
PTE_WRITABLE_BIT
);

524 
i
 = 0; i < 
NUM_PML4_ENTRIES
 && 
fûÀd_pd±s
 < 
num_pd±s
; i++) {

526 
pd±e_t
 * 
pd±
 = (pd±e_t*)
	`PTE_ADDR
(
pml
[
i
]);

527 
	`__fûl_pd±
(
pd±
, 
PS_2M
, 
addr
, 
num_pds
, 
PTE_PRESENT_BIT
 | 
PTE_WRITABLE_BIT
);

529 
j
 = 0; j < 
NUM_PDPT_ENTRIES
 && 
fûÀd_pds
 < 
num_pds
; j++) {

531 
pde_t
 * 
pd
 = (pde_t*)
	`PTE_ADDR
(
pd±
[
j
]);

533 
ul⁄g_t
 
to_fûl
 = ((
≈ages
 - 
fûÀd_pgs
Ë> 
NUM_PD_ENTRIES
) ? NUM_PD_ENTRIES :

534 
≈ages
 - 
fûÀd_pgs
;

536 
	`__fûl_pd
(
pd
, 
PS_2M
, 
addr
, 
to_fûl
, 
PTE_PRESENT_BIT
 | 
PTE_WRITABLE_BIT
);

538 
fûÀd_pgs
 +
to_fûl
;

539 
addr
 +
PAGE_SIZE_2MB
*
to_fûl
;

541 ++
fûÀd_pds
;

544 ++
fûÀd_pd±s
;

547 
	`ASSERT
(
fûÀd_pgs
 =
≈ages
);

548 
	}
}

552 
	$__c⁄°ru˘_èbÀs_1g
 (
pml4e_t
 * 
pml
, 
ul⁄g_t
 
byãs
)

554 
ul⁄g_t
 
≈ages
 = (
byãs
 + 
PAGE_SIZE_1GB
 - 1)/PAGE_SIZE_1GB;

555 
ul⁄g_t
 
num_pd±s
 = (
≈ages
 + 
NUM_PDPT_ENTRIES
 - 1)/NUM_PDPT_ENTRIES;

556 
ul⁄g_t
 
fûÀd_pd±s
 = 0;

557 
ul⁄g_t
 
fûÀd_pgs
 = 0;

558 
i
;

559 
ul⁄g_t
 
addr
 = 0;

561 
	`__fûl_pml
(
pml
, 
PS_1G
, 
addr
, 
num_pd±s
, 
PTE_PRESENT_BIT
 | 
PTE_WRITABLE_BIT
);

563 
i
 = 0; i < 
NUM_PML4_ENTRIES
 && 
fûÀd_pd±s
 < 
num_pd±s
; i++) {

565 
pd±e_t
 * 
pd±
 = (pd±e_t*)
	`PTE_ADDR
(
pml
[
i
]);

567 
ul⁄g_t
 
to_fûl
 = ((
≈ages
 - 
fûÀd_pgs
Ë> 
NUM_PDPT_ENTRIES
) ? NUM_PDPT_ENTRIES :

568 
≈ages
 - 
fûÀd_pgs
;

570 
	`__fûl_pd±
(
pd±
, 
PS_1G
, 
addr
, 
to_fûl
, 
PTE_PRESENT_BIT
 | 
PTE_WRITABLE_BIT
);

572 
fûÀd_pgs
 +
to_fûl
;

573 
addr
 +
PAGE_SIZE_1GB
*
to_fûl
;

575 ++
fûÀd_pd±s
;

577 
	}
}

581 
	$c⁄°ru˘_idít_m≠
 (
pml4e_t
 * 
pml
, 
∑ge_size_t
 
±y≥
, 
ul⁄g_t
 
byãs
)

583 
ul⁄g_t
 
ps
 = 
	`ps_ty≥_to_size
(
±y≥
);

585 
±y≥
) {

586 
PS_4K
:

587 
	`__c⁄°ru˘_èbÀs_4k
(
pml
, 
byãs
);

589 
PS_2M
:

590 
	`__c⁄°ru˘_èbÀs_2m
(
pml
, 
byãs
);

592 
PS_1G
:

593 
	`__c⁄°ru˘_èbÀs_1g
(
pml
, 
byãs
);

596 
	`ERROR_PRINT
("UndeföedÖagêty≥ (%u)\n", 
±y≥
);

599 
	}
}

607 
	$kîn_idít_m≠
 (
nk_mem_öfo
 * 
mem
, 
ul⁄g_t
 
mbd
)

609 
∑ge_size_t
 
Õs
 = 
	`œrge°_∑ge_size
();

610 
ul⁄g_t
 
œ°_p‚
 = 
	`mm_boŸ_œ°_p‚
();

611 
ul⁄g_t
 
ps
 = 
	`ps_ty≥_to_size
(
Õs
);

612 
pml4e_t
 * 
pml
 = 
NULL
;

615 
pml
 = 
	`mm_boŸ_Æloc_Æig√d
(
PAGE_SIZE_4KB
, PAGE_SIZE_4KB);

616 i‡(!
pml
) {

617 
	`ERROR_PRINT
("CouldÇotállocateÇew PML4\n");

620 
	`mem£t
(
pml
, 0, 
PAGE_SIZE_4KB
);

622 
	`¥ötk
("RemappingÖhys mem [%p - %p] with %sÖages\n",

624 (*)(
œ°_p‚
<<
PAGE_SHIFT
),

625 
ps2°r
[
Õs
]);

627 
	`c⁄°ru˘_idít_m≠
(
pml
, 
Õs
, 
œ°_p‚
<<
PAGE_SHIFT
);

630 
	`wrôe_¸3
((
ul⁄g_t
)
pml
);

631 
	}
}

635 
	$nk_∑gög_öô
 (
nk_mem_öfo
 * 
mem
, 
ul⁄g_t
 
mbd
)

637 
	`kîn_idít_m≠
(
mem
, 
mbd
);

638 
	}
}

	@pmc.c

23 
	~<«utûus/m§.h
>

24 
	~<«utûus/«utûus.h
>

25 
	~<«utûus/˝u.h
>

26 
	~<«utûus/pmc.h
>

27 
	~<«utûus/mm.h
>

30 
	#PMC_DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("PMC: " fmt, ##¨gs)

	)

31 
	#PMC_INFO
(
fmt
, 
¨gs
...Ë
	`¥ötk
("PMC: " fmt, ##¨gs)

	)

32 
	#PMC_ERR
(
fmt
, 
¨gs
...Ë
	`ERROR_PRINT
("PMC: " fmt, ##¨gs)

	)

33 
	#PMC_WARN
(
fmt
, 
¨gs
...Ë
	`WARN_PRINT
("PMC: " fmt, ##¨gs)

	)

35 
≥rf_¶Ÿ_t
 
	gpmc_¶Ÿs
[
NUM_PERF_SLOTS
];

37 
evít_¥›_t
 
	gevít_¥›s
[256] =

39 [
AMD_PMC_DCACHE_MISS
] = {"Data Cache Misses", 0x3f},

40 [
AMD_PMC_ICACHE_MISS
] = {"Instruction Cache Misses", 0x07},

41 [
AMD_PMC_L2_MISS
] = {"L2 Cache Misses", 0x07},

42 [
AMD_PMC_TLB_MISS
] = {"Unified TLB Misses", 0x07},

43 [
AMD_PMC_SMI_CNT
] = {"SMI Interrupts", 0x3f},

44 [
AMD_PMC_IFETCH_STALL
] = {"Instruction Fetch Stalls", 0x07},

45 [
AMD_PMC_BRANCH_MISS
] = {"Mispredicted Branches Retired", 0x3f},

46 [
AMD_PMC_ICACHE_INV
] = {"Instr. Cache Lines Invalidated", 0x07},

51 
ölöe
 
uöt64_t


52 
	$ªad_pmc_˘l
 (
uöt8_t
 
idx
)

54 i‡(
idx
 >
NUM_PERF_SLOTS
) {

55 
	`WARN_PRINT
("Aâem±Åÿac˚s†övÆid PMC CTL slŸ (%u)\n", 
idx
);

59  
	`m§_ªad
(
	`PERF_CTL_MSR_N
(
idx
));

60 
	}
}

62 
ölöe
 

63 
	$wrôe_pmc_˘l
 (
uöt8_t
 
idx
, 
uöt64_t
 
vÆ
)

65 i‡(
idx
 >
NUM_PERF_SLOTS
) {

66 
	`WARN_PRINT
("Aâem±Åÿac˚s†övÆid PMC CTL slŸ (%u)\n", 
idx
);

70 
	`m§_wrôe
(
	`PERF_CTL_MSR_N
(
idx
), 
vÆ
);

71 
	}
}

74 
ölöe
 
uöt64_t


75 
	$ªad_pmc_˘r
 (
uöt8_t
 
idx
)

77 i‡(
idx
 >
NUM_PERF_SLOTS
) {

78 
	`PMC_WARN
("Aâem±Åÿac˚s†övÆid PMC CTR slŸ (%u)\n", 
idx
);

82  
	`m§_ªad
(
	`PERF_CTR_MSR_N
(
idx
));

84 
	}
}

87 
ölöe
 

88 
	$wrôe_pmc_˘r
 (
uöt8_t
 
idx
, 
uöt64_t
 
vÆ
)

90 i‡(
idx
 >
NUM_PERF_SLOTS
) {

91 
	`PMC_WARN
("Aâem±Åÿac˚s†övÆid PMC CTR slŸ (%u)\n", 
idx
);

95 
	`m§_wrôe
(
	`PERF_CTR_MSR_N
(
idx
), 
vÆ
);

96 
	}
}

99 
≥rf_evít_t
 *

100 
	$assign_≥rf_evít
 (
uöt8_t
 
evít_id
, uöt8_à
unô_mask
)

102 
uöt8_t
 
i
;

103 
≥rf_evít_t
 * 
evít
 = 
NULL
;

104 
≥rf_¶Ÿ_t
 * 
¶Ÿ
 = 
NULL
;

106 
i
 = 0; i < 
NUM_PERF_SLOTS
; i++) {

108 
¶Ÿ
 = &
pmc_¶Ÿs
[
i
];

110 i‡(
¶Ÿ
->
°©us
 =
PMC_SLOT_FREE
 &&

111 
evít_¥›s
[
evít_id
].
¶Ÿ_mask
 & (1<<
i
)) {

113 
pmc_˘l_t
 
˘l
;

115 
	`PMC_INFO
("Assigning PMC slot %uÅoÖerformanceÉvent %x (%s) with unit mask 0x%x\n",

116 
i
,

117 
evít_id
,

118 
evít_¥›s
[
evít_id
].
«me
,

119 
unô_mask
);

121 
˘l
.
vÆ
 = 0;

122 
˘l
.
evít_£À˘0
 = (
uöt8_t
)
evít_id
;

123 
˘l
.
u§
 = 1;

124 
˘l
.
os
 = 1;

125 
˘l
.
unô_mask
 = unit_mask;

127 
¶Ÿ
->
°©us
 = 
PMC_SLOT_USED
;

129 
	`wrôe_pmc_˘l
(
i
, 
˘l
.
vÆ
);

131 
	`wrôe_pmc_˘r
(
i
, 0);

137 i‡(
i
 =
NUM_PERF_SLOTS
) {

138 
	`PMC_ERR
("CouldÇŸássig¿evíà0x%x,Çÿem±y slŸs\n", 
evít
);

139  
NULL
;

142 
evít
 = 
	`mÆloc
((
≥rf_evít_t
));

143 i‡(!
evít
) {

144 
	`PMC_ERR
("CouldÇotállocateÇewÖerfÉvent\n");

145  
NULL
;

148 
evít
->
id
 = 
evít_id
;

149 
evít
->
assig√d_idx
 = 
i
;

150 
evít
->
íabÀd
 = 0;

151 
evít
->
¥›
 = &
evít_¥›s
[
evít_id
];

153 
¶Ÿ
->
evít
 =Évent;

155  
evít
;

156 
	}
}

160 
	$íabÀ_≥rf_evít
 (
≥rf_evít_t
 * 
evít
)

162 
pmc_˘l_t
 
˘l
;

163 
	`ASSERT
(
evít
);

165 i‡(
evít
->
íabÀd
) {

166 
	`PMC_WARN
("Evíà0x%x i†ÆªadyÉ«bÀd\n", 
evít
->
id
);

170 
uöt8_t
 
idx
 = 
evít
->
assig√d_idx
;

172 
evít
->
íabÀd
 = 1;

174 
˘l
.
vÆ
 = 
	`ªad_pmc_˘l
(
idx
);

175 
˘l
.
í
 = 1;

177 
	`wrôe_pmc_˘l
(
idx
, 
˘l
.
vÆ
);

178 
	}
}

182 
	$dißbÀ_≥rf_evít
 (
≥rf_evít_t
 * 
evít
)

184 
pmc_˘l_t
 
˘l
;

185 
	`ASSERT
(
evít
);

187 i‡(
evít
->
íabÀd
 == 0) {

188 
	`PMC_WARN
("Evíà0x%x i†Æªady dißbÀd\n", 
evít
->
id
);

192 
uöt8_t
 
idx
 = 
evít
->
assig√d_idx
;

194 
evít
->
íabÀd
 = 0;

196 
˘l
.
vÆ
 = 
	`ªad_pmc_˘l
(
idx
);

197 
˘l
.
í
 = 0;

199 
	`wrôe_pmc_˘l
(
idx
, 
˘l
.
vÆ
);

200 
	}
}

204 
	$íabÀ_Æl_evíts
 ()

206 
i
;

207 
i
 = 0; i < 
NUM_PERF_SLOTS
; i++) {

208 
≥rf_¶Ÿ_t
 * 
¶Ÿ
 = &
pmc_¶Ÿs
[
i
];

209 i‡(
¶Ÿ
->
°©us
 =
PMC_SLOT_USED
) {

210 
	`íabÀ_≥rf_evít
(
¶Ÿ
->
evít
);

213 
	}
}

217 
	$dißbÀ_Æl_evíts
 ()

219 
i
;

220 
i
 = 0; i < 
NUM_PERF_SLOTS
; i++) {

221 
≥rf_¶Ÿ_t
 * 
¶Ÿ
 = &
pmc_¶Ÿs
[
i
];

222 i‡(
¶Ÿ
->
°©us
 =
PMC_SLOT_USED
) {

223 
	`dißbÀ_≥rf_evít
(
¶Ÿ
->
evít
);

226 
	}
}

230 
	$ª£t_Æl_cou¡îs
 ()

232 
i
;

233 
i
 = 0; i < 
NUM_PERF_SLOTS
; i++) {

234 
	`wrôe_pmc_˘r
(
i
, 0);

236 
	}
}

240 
	$ªÀa£_≥rf_evít
 (
≥rf_evít_t
 * 
evít
)

242 
	`ASSERT
(
evít
);

244 
≥rf_¶Ÿ_t
 * 
¶Ÿ
 = 
NULL
;

245 
uöt8_t
 
idx
 = 
evít
->
assig√d_idx
;

247 i‡(
idx
 >
NUM_PERF_SLOTS
) {

248 
	`PMC_ERR
("C™nŸÑñó£ PMC slŸ f‹ invÆid index %u\n", 
idx
);

252 
¶Ÿ
 = &
pmc_¶Ÿs
[
idx
];

254 i‡(
¶Ÿ
->
°©us
 =
PMC_SLOT_USED
) {

255 
¶Ÿ
->
°©us
 = 
PMC_SLOT_FREE
;

256 
¶Ÿ
->
evít
 = 
NULL
;

257 
	`wrôe_pmc_˘l
(
idx
, 0);

258 
	`wrôe_pmc_˘r
(
idx
, 0);

261 
	`‰ì
(
evít
);

262 
	}
}

265 
uöt64_t


266 
	$ªad_evít_cou¡
 (
≥rf_evít_t
 * 
evít
)

268 
	`ASSERT
(
evít
);

270 
uöt8_t
 
idx
 = 
evít
->
assig√d_idx
;

272  
	`ªad_pmc_˘r
(
idx
);

273 
	}
}

277 
	$≥rf_ªp‹t
 ()

279 
i
;

280 
≥rf_evít_t
 * 
evít
 = 
NULL
;

282 
	`PMC_INFO
("++++++++ Perf Monitor Event Report ++++++++\n");

284 
i
 = 0; i < 
NUM_PERF_SLOTS
; i++) {

286 
≥rf_¶Ÿ_t
 * 
¶Ÿ
 = &
pmc_¶Ÿs
[
i
];

288 i‡(
¶Ÿ
->
°©us
 =
PMC_SLOT_FREE
) {

292 
evít
 = 
¶Ÿ
->event;

294 
	`ASSERT
(
evít
);

296 
	`PMC_INFO
("SLOT [%u] (%s) %llu\n",

297 
i
,

298 
evít
->
¥›
->
«me
,

299 
	`ªad_evít_cou¡
(
evít
));

303 
	`PMC_INFO
("++++++++ Perf Monitor Report End ++++++++\n");

305 
	}
}

308 
	$pmc_öô
 ()

313 
	`mem£t
(
pmc_¶Ÿs
, 0, (pmc_slots));

316 
	`assign_≥rf_evít
(
AMD_PMC_TLB_MISS
, 0x77);

317 
	`assign_≥rf_evít
(
AMD_PMC_ICACHE_MISS
, 0x0);

318 
	`assign_≥rf_evít
(
AMD_PMC_DCACHE_MISS
, 0x1);

319 
	`assign_≥rf_evít
(
AMD_PMC_BRANCH_MISS
, 0);

320 
	`assign_≥rf_evít
(
AMD_PMC_ICACHE_INV
, 0);

324 
	}
}

	@printk.c

32 
	~<°ddef.h
>

33 
	~<°d¨g.h
>

34 
	~<«utûus/«ut_°rög.h
>

35 
	~<«utûus/«ut_ty≥s.h
>

36 
	~<«utûus/d›∫t.h
>

37 
	~<«utûus/•ölock.h
>

38 
	~<«utûus/¥ötk.h
>

39 
	~<«utûus/backåa˚.h
>

40 
	~<«utûus/bug.h
>

41 
	~<«utûus/limôs.h
>

42 
	~<«utûus/∑gög.h
>

43 
	~<«utûus/î∫o.h
>

44 
	~<«utûus/m©h.h
>

45 
	~<«utûus/vc.h
>

48 
	#do_putch¨
(
x
Ëdÿ{ 
	`nk_vc_putch¨
(x);} 0)

	)

49 
	#do_puts
(
x
Ëdÿ{ 
	`nk_vc_puts
(x); } 0)

	)

51 
•ölock_t
 
	g¥ötk_lock
;

53 
£rül_putch¨
(
uch¨_t
 
c
);

54 
£rül_puén
(c⁄° * 
 
);

56 
	s¥ötk_°©e
 {

57 
	mbuf
[
PRINTK_BUFMAX
];

58 
	mödex
;

63 
	$Êush
 (
¥ötk_°©e
 *
°©e
)

65 
i
;

67 
i
 = 0; i < 
°©e
->
ödex
; i++) {

68 
	`do_putch¨
(
°©e
->
buf
[
i
]);

71 
°©e
->
ödex
 = 0;

72 
	}
}

76 
	$¥ötk_ch¨
 (* 
¨g
, 
c
)

78 
¥ötk_°©e
 *
°©e
 = (¥ötk_°©ê*Ë
¨g
;

80 i‡(
c
 == '\n')

82 
°©e
->
buf
[°©e->
ödex
] = 0;

83 
	`do_puts
(
°©e
->
buf
);

84 
°©e
->
ödex
 = 0;

86 i‡((
c
 =0Ë|| (
°©e
->
ödex
 >
PRINTK_BUFMAX
))

88 
	`Êush
(
°©e
);

89 
	`do_putch¨
(
c
);

93 
°©e
->
buf
[°©e->
ödex
] = 
c
;

94 
°©e
->
ödex
++;

96 
	}
}

100 
	$v¥ötk
 (c⁄° * 
fmt
, 
va_li°
 
¨gs
)

102 
¥ötk_°©e
 
°©e
;

106 
°©e
.
ödex
 = 0;

107 
	`_d›∫t
(
fmt
, 
¨gs
, 0, 
¥ötk_ch¨
, (*Ë&
°©e
);

109 i‡(
°©e
.
ödex
 != 0)

110 
	`Êush
(&
°©e
);

116 
	}
}

120 
	$∑nic
 (c⁄° * 
fmt
, ...)

122 
va_li°
 
¨g
;

124 
	`va_°¨t
(
¨g
, 
fmt
);

125 
	`v¥ötk
(
fmt
, 
¨g
);

126 
	`va_íd
(
¨g
);

128 
__asm__
 
	`__vﬁ©ûe__
 ("cli");

130 
	}
}

135 
	$óæy_¥ötk
 (c⁄° *
fmt
, 
va_li°
 
¨gs
)

137  
	`v¥ötk
(
fmt
, 
¨gs
);

138 
	}
}

142 
	$¥ötk
 (c⁄° *
fmt
, ...)

144 
va_li°
 
¨gs
;

145 
îr
 = 0;

147 
	`va_°¨t
(
¨gs
, 
fmt
);

148 
îr
 = 
	`v¥ötk
(
fmt
, 
¨gs
);

149 
	`va_íd
(
¨gs
);

151  
îr
;

152 
	}
}

154 c⁄° 
	ghex_asc
[] = "0123456789abcdef";

156 
	#hex_asc_lo
(
x
Ë
hex_asc
[((xË& 0x0f)]

	)

157 
	#hex_asc_hi
(
x
Ë
hex_asc
[((xË& 0xf0Ë>> 4]

	)

159 
ölöe
 *
	$∑ck_hex_byã
(*
buf
, 
uöt8_t
 
byã
)

161 *
buf
++ = 
	`hex_asc_hi
(
byã
);

162 *
buf
++ = 
	`hex_asc_lo
(
byã
);

163  
buf
;

164 
	}
}

167 
	#TOLOWER
(
x
Ë((xË| 0x20)

	)

169 
	$sim∂e_guess_ba£
(c⁄° *
˝
)

171 i‡(
˝
[0] == '0') {

172 i‡(
	`TOLOWER
(
˝
[1]Ë='x' && 
	`isxdigô
(cp[2]))

179 
	}
}

187 
	$sim∂e_°πoul
(c⁄° *
˝
, **
ídp
, 
ba£
)

189 
ªsu…
 = 0;

191 i‡(!
ba£
)

192 
ba£
 = 
	`sim∂e_guess_ba£
(
˝
);

194 i‡(
ba£
 =16 && 
˝
[0] ='0' && 
	`TOLOWER
(cp[1]) == 'x')

195 
˝
 += 2;

197 
	`isxdigô
(*
˝
)) {

198 
vÆue
;

200 
vÆue
 = 
	`isdigô
(*
˝
Ë? *˝ - '0' : 
	`TOLOWER
(*cp) - 'a' + 10;

201 i‡(
vÆue
 >
ba£
)

203 
ªsu…
 =Ñesu… * 
ba£
 + 
vÆue
;

204 
˝
++;

207 i‡(
ídp
)

208 *
ídp
 = (*)
˝
;

209  
ªsu…
;

210 
	}
}

218 
	$sim∂e_°πﬁ
(c⁄° *
˝
, **
ídp
, 
ba£
)

220 if(*
˝
 == '-')

221  -
	`sim∂e_°πoul
(
˝
 + 1, 
ídp
, 
ba£
);

222  
	`sim∂e_°πoul
(
˝
, 
ídp
, 
ba£
);

223 
	}
}

231 
	$sim∂e_°πouŒ
(c⁄° *
˝
, **
ídp
, 
ba£
)

233 
ªsu…
 = 0;

235 i‡(!
ba£
)

236 
ba£
 = 
	`sim∂e_guess_ba£
(
˝
);

238 i‡(
ba£
 =16 && 
˝
[0] ='0' && 
	`TOLOWER
(cp[1]) == 'x')

239 
˝
 += 2;

241 
	`isxdigô
(*
˝
)) {

242 
vÆue
;

244 
vÆue
 = 
	`isdigô
(*
˝
Ë? *˝ - '0' : 
	`TOLOWER
(*cp) - 'a' + 10;

245 i‡(
vÆue
 >
ba£
)

247 
ªsu…
 =Ñesu… * 
ba£
 + 
vÆue
;

248 
˝
++;

251 i‡(
ídp
)

252 *
ídp
 = (*)
˝
;

253  
ªsu…
;

254 
	}
}

262 
	$sim∂e_°πﬁl
(c⁄° *
˝
, **
ídp
, 
ba£
)

264 if(*
˝
=='-')

265  -
	`sim∂e_°πouŒ
(
˝
 + 1, 
ídp
, 
ba£
);

266  
	`sim∂e_°πouŒ
(
˝
, 
ídp
, 
ba£
);

267 
	}
}

291 
	$°ri˘_°πoul
(c⁄° *
˝
, 
ba£
, *
ªs
)

293 *
èû
;

294 
vÆ
;

295 
size_t
 
Àn
;

297 *
ªs
 = 0;

298 
Àn
 = 
	`°æí
(
˝
);

299 i‡(
Àn
 == 0)

300  -
EINVAL
;

302 
vÆ
 = 
	`sim∂e_°πoul
(
˝
, &
èû
, 
ba£
);

303 i‡(
èû
 =
˝
)

304  -
EINVAL
;

305 i‡((*
èû
 == '\0') ||

306 ((
Àn
 =(
size_t
)(
èû
 - 
˝
) + 1) && (*tail == '\n'))) {

307 *
ªs
 = 
vÆ
;

311  -
EINVAL
;

312 
	}
}

326 
	$°ri˘_°πﬁ
(c⁄° *
˝
, 
ba£
, *
ªs
)

328 
ªt
;

329 i‡(*
˝
 == '-') {

330 
ªt
 = 
	`°ri˘_°πoul
(
˝
 + 1, 
ba£
, (*)
ªs
);

331 i‡(!
ªt
)

332 *
ªs
 = -(*res);

334 
ªt
 = 
	`°ri˘_°πoul
(
˝
, 
ba£
, (*)
ªs
);

337  
ªt
;

338 
	}
}

362 
	$°ri˘_°πouŒ
(c⁄° *
˝
, 
ba£
, *
ªs
)

364 *
èû
;

365 
vÆ
;

366 
size_t
 
Àn
;

368 *
ªs
 = 0;

369 
Àn
 = 
	`°æí
(
˝
);

370 i‡(
Àn
 == 0)

371  -
EINVAL
;

373 
vÆ
 = 
	`sim∂e_°πouŒ
(
˝
, &
èû
, 
ba£
);

374 i‡(
èû
 =
˝
)

375  -
EINVAL
;

376 i‡((*
èû
 == '\0') ||

377 ((
Àn
 =(
size_t
)(
èû
 - 
˝
) + 1) && (*tail == '\n'))) {

378 *
ªs
 = 
vÆ
;

382  -
EINVAL
;

383 
	}
}

397 
	$°ri˘_°πﬁl
(c⁄° *
˝
, 
ba£
, *
ªs
)

399 
ªt
;

400 i‡(*
˝
 == '-') {

401 
ªt
 = 
	`°ri˘_°πouŒ
(
˝
 + 1, 
ba£
, (*)
ªs
);

402 i‡(!
ªt
)

403 *
ªs
 = -(*res);

405 
ªt
 = 
	`°ri˘_°πouŒ
(
˝
, 
ba£
, (*)
ªs
);

408  
ªt
;

409 
	}
}

411 
	$skù_©oi
(c⁄° **
s
)

413 
i
=0;

415 
	`isdigô
(**
s
))

416 
i
 = i*10 + *((*
s
)++) - '0';

417  
i
;

418 
	}
}

430 * 
	$put_dec_åunc
(*
buf
, 
q
)

432 
d3
, 
d2
, 
d1
, 
d0
;

433 
d1
 = (
q
>>4) & 0xf;

434 
d2
 = (
q
>>8) & 0xf;

435 
d3
 = (
q
>>12);

437 
d0
 = 6*(
d3
 + 
d2
 + 
d1
Ë+ (
q
 & 0xf);

438 
q
 = (
d0
 * 0xcd) >> 11;

439 
d0
 = d0 - 10*
q
;

440 *
buf
++ = 
d0
 + '0';

441 
d1
 = 
q
 + 9*
d3
 + 5*
d2
 + d1;

442 i‡(
d1
 != 0) {

443 
q
 = (
d1
 * 0xcd) >> 11;

444 
d1
 = d1 - 10*
q
;

445 *
buf
++ = 
d1
 + '0';

447 
d2
 = 
q
 + 2*d2;

448 i‡((
d2
 !0Ë|| (
d3
 != 0)) {

449 
q
 = (
d2
 * 0xd) >> 7;

450 
d2
 = d2 - 10*
q
;

451 *
buf
++ = 
d2
 + '0';

453 
d3
 = 
q
 + 4*d3;

454 i‡(
d3
 != 0) {

455 
q
 = (
d3
 * 0xcd) >> 11;

456 
d3
 = d3 - 10*
q
;

457 *
buf
++ = 
d3
 + '0';

458 i‡(
q
 != 0)

459 *
buf
++ = 
q
 + '0';

463  
buf
;

464 
	}
}

466 * 
	$put_dec_fuŒ
(*
buf
, 
q
)

470 
d3
, 
d2
, 
d1
, 
d0
;

471 
d1
 = (
q
>>4) & 0xf;

472 
d2
 = (
q
>>8) & 0xf;

473 
d3
 = (
q
>>12);

483 
d0
 = 6*(
d3
 + 
d2
 + 
d1
Ë+ (
q
 & 0xf);

484 
q
 = (
d0
 * 0xcd) >> 11;

485 
d0
 = d0 - 10*
q
;

486 *
buf
++ = 
d0
 + '0';

487 
d1
 = 
q
 + 9*
d3
 + 5*
d2
 + d1;

488 
q
 = (
d1
 * 0xcd) >> 11;

489 
d1
 = d1 - 10*
q
;

490 *
buf
++ = 
d1
 + '0';

492 
d2
 = 
q
 + 2*d2;

493 
q
 = (
d2
 * 0xd) >> 7;

494 
d2
 = d2 - 10*
q
;

495 *
buf
++ = 
d2
 + '0';

497 
d3
 = 
q
 + 4*d3;

498 
q
 = (
d3
 * 0xcd) >> 11;

500 
d3
 = d3 - 10*
q
;

501 *
buf
++ = 
d3
 + '0';

502 *
buf
++ = 
q
 + '0';

503  
buf
;

504 
	}
}

506 
__noölöe
 * 
	$put_dec
(*
buf
, 
num
)

509 
ªm
;

510 i‡(
num
 < 100000)

511  
	`put_dec_åunc
(
buf
, 
num
);

512 
ªm
 = (Ë(
num
 % 100000);

513 
num
 =Çum / 100000;

514 
buf
 = 
	`put_dec_fuŒ
(buf, 
ªm
);

516 
	}
}

518 
	#ZEROPAD
 1

	)

519 
	#SIGN
 2

	)

520 
	#PLUS
 4

	)

521 
	#SPACE
 8

	)

522 
	#LEFT
 16

	)

523 
	#SMALL
 32

	)

524 
	#SPECIAL
 64

	)

526 
	ef‹m©_ty≥
 {

527 
	mFORMAT_TYPE_NONE
,

528 
	mFORMAT_TYPE_WIDTH
,

529 
	mFORMAT_TYPE_PRECISION
,

530 
	mFORMAT_TYPE_CHAR
,

531 
	mFORMAT_TYPE_STR
,

532 
	mFORMAT_TYPE_PTR
,

533 
	mFORMAT_TYPE_PERCENT_CHAR
,

534 
	mFORMAT_TYPE_INVALID
,

535 
	mFORMAT_TYPE_LONG_LONG
,

536 
	mFORMAT_TYPE_ULONG
,

537 
	mFORMAT_TYPE_LONG
,

538 
	mFORMAT_TYPE_UBYTE
,

539 
	mFORMAT_TYPE_BYTE
,

540 
	mFORMAT_TYPE_USHORT
,

541 
	mFORMAT_TYPE_SHORT
,

542 
	mFORMAT_TYPE_UINT
,

543 
	mFORMAT_TYPE_INT
,

544 
	mFORMAT_TYPE_NRCHARS
,

545 
	mFORMAT_TYPE_SIZE_T
,

546 
	mFORMAT_TYPE_PTRDIFF


549 
	s¥ötf_•ec
 {

550 
f‹m©_ty≥
 
	mty≥
;

551 
	mÊags
;

552 
	mfõld_width
;

553 
	mba£
;

554 
	m¥ecisi⁄
;

555 
	mquÆifõr
;

558 *
	$numbî
(*
buf
, *
íd
, 
num
,

559 
¥ötf_•ec
 
•ec
)

562 c⁄° 
digôs
[16] = "0123456789ABCDEF";

564 
tmp
[66];

565 
sign
;

566 
loˇ£
;

567 
√ed_pfx
 = ((
•ec
.
Êags
 & 
SPECIAL
Ë&& s≥c.
ba£
 != 10);

568 
i
;

572 
loˇ£
 = (
•ec
.
Êags
 & 
SMALL
);

573 i‡(
•ec
.
Êags
 & 
LEFT
)

574 
•ec
.
Êags
 &~
ZEROPAD
;

575 
sign
 = 0;

576 i‡(
•ec
.
Êags
 & 
SIGN
) {

577 i‡((sig√d Ë
num
 < 0) {

578 
sign
 = '-';

579 
num
 = - (signed )Çum;

580 
•ec
.
fõld_width
--;

581 } i‡(
•ec
.
Êags
 & 
PLUS
) {

582 
sign
 = '+';

583 
•ec
.
fõld_width
--;

584 } i‡(
•ec
.
Êags
 & 
SPACE
) {

585 
sign
 = ' ';

586 
•ec
.
fõld_width
--;

589 i‡(
√ed_pfx
) {

590 
•ec
.
fõld_width
--;

591 i‡(
•ec
.
ba£
 == 16)

592 
•ec
.
fõld_width
--;

596 
i
 = 0;

597 i‡(
num
 == 0)

598 
tmp
[
i
++] = '0';

604 i‡(
•ec
.
ba£
 != 10) {

605 
mask
 = 
•ec
.
ba£
 - 1;

606 
shi·
 = 3;

607 i‡(
•ec
.
ba£
 =16Ë
shi·
 = 4;

609 
tmp
[
i
++] = (
digôs
[(()
num
Ë& 
mask
] | 
loˇ£
);

610 
num
 >>
shi·
;

611 } 
num
);

613 
i
 = 
	`put_dec
(
tmp
, 
num
) -Åmp;

617 i‡(
i
 > 
•ec
.
¥ecisi⁄
)

618 
•ec
.
¥ecisi⁄
 = 
i
;

620 
•ec
.
fõld_width
 -•ec.
¥ecisi⁄
;

621 i‡(!(
•ec
.
Êags
 & (
ZEROPAD
+
LEFT
))) {

622 --
•ec
.
fõld_width
 >= 0) {

623 i‡(
buf
 < 
íd
)

624 *
buf
 = ' ';

625 ++
buf
;

629 i‡(
sign
) {

630 i‡(
buf
 < 
íd
)

631 *
buf
 = 
sign
;

632 ++
buf
;

635 i‡(
√ed_pfx
) {

636 i‡(
buf
 < 
íd
)

637 *
buf
 = '0';

638 ++
buf
;

639 i‡(
•ec
.
ba£
 == 16) {

640 i‡(
buf
 < 
íd
)

641 *
buf
 = ('X' | 
loˇ£
);

642 ++
buf
;

646 i‡(!(
•ec
.
Êags
 & 
LEFT
)) {

647 
c
 = (
•ec
.
Êags
 & 
ZEROPAD
) ? '0' : ' ';

648 --
•ec
.
fõld_width
 >= 0) {

649 i‡(
buf
 < 
íd
)

650 *
buf
 = 
c
;

651 ++
buf
;

655 
i
 <--
•ec
.
¥ecisi⁄
) {

656 i‡(
buf
 < 
íd
)

657 *
buf
 = '0';

658 ++
buf
;

661 --
i
 >= 0) {

662 i‡(
buf
 < 
íd
)

663 *
buf
 = 
tmp
[
i
];

664 ++
buf
;

667 --
•ec
.
fõld_width
 >= 0) {

668 i‡(
buf
 < 
íd
)

669 *
buf
 = ' ';

670 ++
buf
;

672  
buf
;

673 
	}
}

675 *
	$°rög
(*
buf
, *
íd
, *
s
, 
¥ötf_•ec
 
•ec
)

677 
Àn
, 
i
;

679 i‡(()
s
 < 
PAGE_SIZE_4KB
)

680 
s
 = "<NULL>";

682 
Àn
 = 
	`°∫Àn
(
s
, 
•ec
.
¥ecisi⁄
);

684 i‡(!(
•ec
.
Êags
 & 
LEFT
)) {

685 
Àn
 < 
•ec
.
fõld_width
--) {

686 i‡(
buf
 < 
íd
)

687 *
buf
 = ' ';

688 ++
buf
;

691 
i
 = 0; i < 
Àn
; ++i) {

692 i‡(
buf
 < 
íd
)

693 *
buf
 = *
s
;

694 ++
buf
; ++
s
;

696 
Àn
 < 
•ec
.
fõld_width
--) {

697 i‡(
buf
 < 
íd
)

698 *
buf
 = ' ';

699 ++
buf
;

701  
buf
;

702 
	}
}

704 *
	$symbﬁ_°rög
(*
buf
, *
íd
, *
±r
,

705 
¥ötf_•ec
 
•ec
, 
ext
)

707 
vÆue
 = (Ë
±r
;

708 #ifde‡
CONFIG_KALLSYMS


709 
sym
[
KSYM_SYMBOL_LEN
];

710 i‡(
ext
 != 'f' &&Éxt != 's')

711 
	`kÆlsyms_•röt_symbﬁ
(
sym
, 
vÆue
);

713 
	`kÆlsyms_lookup
(
vÆue
, 
NULL
, NULL, 
sym
);

714  
	`°rög
(
buf
, 
íd
, 
sym
, 
•ec
);

716 
•ec
.
fõld_width
 = 2*(*);

717 
•ec
.
Êags
 |
SPECIAL
 | 
SMALL
 | 
ZEROPAD
;

718 
•ec
.
ba£
 = 16;

719  
	`numbî
(
buf
, 
íd
, 
vÆue
, 
•ec
);

721 
	}
}

724 *
	$mac_addªss_°rög
(*
buf
, *
íd
, 
uöt8_t
 *
addr
,

725 
¥ötf_•ec
 
•ec
, c⁄° *
fmt
)

727 
mac_addr
[("xx:xx:xx:xx:xx:xx")];

728 *
p
 = 
mac_addr
;

729 
i
;

731 
i
 = 0; i < 6; i++) {

732 
p
 = 
	`∑ck_hex_byã
’, 
addr
[
i
]);

733 i‡(
fmt
[0] ='M' && 
i
 != 5)

734 *
p
++ = ':';

736 *
p
 = '\0';

738  
	`°rög
(
buf
, 
íd
, 
mac_addr
, 
•ec
);

739 
	}
}

741 *
	$ù4_°rög
(*
p
, c⁄° 
uöt8_t
 *
addr
, 
boﬁ_t
 
Àadög_zîos
)

743 
i
;

745 
i
 = 0; i < 4; i++) {

746 
ãmp
[3];

747 
digôs
 = 
	`put_dec_åunc
(
ãmp
, 
addr
[
i
]) -Åemp;

748 i‡(
Àadög_zîos
) {

749 i‡(
digôs
 < 3)

750 *
p
++ = '0';

751 i‡(
digôs
 < 2)

752 *
p
++ = '0';

755 
digôs
--)

756 *
p
++ = 
ãmp
[
digôs
];

757 i‡(
i
 < 3)

758 *
p
++ = '.';

761 *
p
 = '\0';

762  
p
;

763 
	}
}

765 *
	$ù6_°rög
(*
p
, c⁄° *
addr
, c⁄° *
fmt
)

767 
i
;

768 
i
 = 0; i < 8; i++) {

769 
p
 = 
	`∑ck_hex_byã
’, *
addr
++);

770 
p
 = 
	`∑ck_hex_byã
’, *
addr
++);

771 i‡(
fmt
[0] ='I' && 
i
 != 7)

772 *
p
++ = ':';

775 *
p
 = '\0';

776  
p
;

777 
	}
}

779 *
	$ù6_addr_°rög
(*
buf
, *
íd
, c⁄° 
uöt8_t
 *
addr
,

780 
¥ötf_•ec
 
•ec
, c⁄° *
fmt
)

782 
ù6_addr
[("xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:255.255.255.255")];

784 
	`ù6_°rög
(
ù6_addr
, 
addr
, 
fmt
);

786  
	`°rög
(
buf
, 
íd
, 
ù6_addr
, 
•ec
);

787 
	}
}

789 *
	$ù4_addr_°rög
(*
buf
, *
íd
, c⁄° 
uöt8_t
 *
addr
,

790 
¥ötf_•ec
 
•ec
, c⁄° *
fmt
)

792 
ù4_addr
[("255.255.255.255")];

794 
	`ù4_°rög
(
ù4_addr
, 
addr
, 
fmt
[0] == 'i');

796  
	`°rög
(
buf
, 
íd
, 
ù4_addr
, 
•ec
);

797 
	}
}

825 *
	$poöãr
(c⁄° *
fmt
, *
buf
, *
íd
, *
±r
,

826 
¥ötf_•ec
 
•ec
)

828 i‡(!
±r
)

829  
	`°rög
(
buf
, 
íd
, "“uŒ)", 
•ec
);

831 *
fmt
) {

835  
	`symbﬁ_°rög
(
buf
, 
íd
, 
±r
, 
•ec
, *
fmt
);

838  
	`mac_addªss_°rög
(
buf
, 
íd
, 
±r
, 
•ec
, 
fmt
);

848 
fmt
[1]) {

850  
	`ù6_addr_°rög
(
buf
, 
íd
, 
±r
, 
•ec
, 
fmt
);

852  
	`ù4_addr_°rög
(
buf
, 
íd
, 
±r
, 
•ec
, 
fmt
);

856 
•ec
.
Êags
 |
SMALL
;

857 i‡(
•ec
.
fõld_width
 == -1) {

858 
•ec
.
fõld_width
 = 2*(*);

859 
•ec
.
Êags
 |
ZEROPAD
;

861 
•ec
.
ba£
 = 16;

863  
	`numbî
(
buf
, 
íd
, (Ë
±r
, 
•ec
);

864 
	}
}

886 
	$f‹m©_decode
(c⁄° *
fmt
, 
¥ötf_•ec
 *
•ec
)

888 c⁄° *
°¨t
 = 
fmt
;

891 i‡(
•ec
->
ty≥
 =
FORMAT_TYPE_WIDTH
) {

892 i‡(
•ec
->
fõld_width
 < 0) {

893 
•ec
->
fõld_width
 = -spec->field_width;

894 
•ec
->
Êags
 |
LEFT
;

896 
•ec
->
ty≥
 = 
FORMAT_TYPE_NONE
;

897 
¥ecisi⁄
;

901 i‡(
•ec
->
ty≥
 =
FORMAT_TYPE_PRECISION
) {

902 i‡(
•ec
->
¥ecisi⁄
 < 0)

903 
•ec
->
¥ecisi⁄
 = 0;

905 
•ec
->
ty≥
 = 
FORMAT_TYPE_NONE
;

906 
quÆifõr
;

910 
•ec
->
ty≥
 = 
FORMAT_TYPE_NONE
;

912 ; *
fmt
 ; ++fmt) {

913 i‡(*
fmt
 == '%')

918 i‡(
fmt
 !
°¨t
 || !*fmt)

919  
fmt
 - 
°¨t
;

922 
•ec
->
Êags
 = 0;

925 
boﬁ_t
 
found
 = 
åue
;

927 ++
fmt
;

929 *
fmt
) {

930 '-': 
•ec
->
Êags
 |
LEFT
; ;

931 '+': 
•ec
->
Êags
 |
PLUS
; ;

932 ' ': 
•ec
->
Êags
 |
SPACE
; ;

933 '#': 
•ec
->
Êags
 |
SPECIAL
; ;

934 '0': 
•ec
->
Êags
 |
ZEROPAD
; ;

935 : 
found
 = 
Ál£
;

938 i‡(!
found
)

943 
•ec
->
fõld_width
 = -1;

945 i‡(
	`isdigô
(*
fmt
))

946 
•ec
->
fõld_width
 = 
	`skù_©oi
(&
fmt
);

947 i‡(*
fmt
 == '*') {

949 
•ec
->
ty≥
 = 
FORMAT_TYPE_WIDTH
;

950  ++
fmt
 - 
°¨t
;

953 
¥ecisi⁄
:

955 
•ec
->
¥ecisi⁄
 = -1;

956 i‡(*
fmt
 == '.') {

957 ++
fmt
;

958 i‡(
	`isdigô
(*
fmt
)) {

959 
•ec
->
¥ecisi⁄
 = 
	`skù_©oi
(&
fmt
);

960 i‡(
•ec
->
¥ecisi⁄
 < 0)

961 
•ec
->
¥ecisi⁄
 = 0;

962 } i‡(*
fmt
 == '*') {

964 
•ec
->
ty≥
 = 
FORMAT_TYPE_PRECISION
;

965  ++
fmt
 - 
°¨t
;

969 
quÆifõr
:

971 
•ec
->
quÆifõr
 = -1;

972 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L' ||

973 *
fmt
 == 'Z' || *fmt == 'z' || *fmt == 't') {

974 
•ec
->
quÆifõr
 = *
fmt
++;

975 i‡(
	`u∆ikñy
(
•ec
->
quÆifõr
 =*
fmt
)) {

976 i‡(
•ec
->
quÆifõr
 == 'l') {

977 
•ec
->
quÆifõr
 = 'L';

978 ++
fmt
;

979 } i‡(
•ec
->
quÆifõr
 == 'h') {

980 
•ec
->
quÆifõr
 = 'H';

981 ++
fmt
;

987 
•ec
->
ba£
 = 10;

988 *
fmt
) {

990 
•ec
->
ty≥
 = 
FORMAT_TYPE_CHAR
;

991  ++
fmt
 - 
°¨t
;

994 
•ec
->
ty≥
 = 
FORMAT_TYPE_STR
;

995  ++
fmt
 - 
°¨t
;

998 
•ec
->
ty≥
 = 
FORMAT_TYPE_PTR
;

999  
fmt
 - 
°¨t
;

1003 
•ec
->
ty≥
 = 
FORMAT_TYPE_NRCHARS
;

1004  ++
fmt
 - 
°¨t
;

1007 
•ec
->
ty≥
 = 
FORMAT_TYPE_PERCENT_CHAR
;

1008  ++
fmt
 - 
°¨t
;

1012 
•ec
->
ba£
 = 8;

1016 
•ec
->
Êags
 |
SMALL
;

1019 
•ec
->
ba£
 = 16;

1024 
•ec
->
Êags
 |
SIGN
;

1029 
•ec
->
ty≥
 = 
FORMAT_TYPE_INVALID
;

1030  
fmt
 - 
°¨t
;

1033 i‡(
•ec
->
quÆifõr
 == 'L')

1034 
•ec
->
ty≥
 = 
FORMAT_TYPE_LONG_LONG
;

1035 i‡(
•ec
->
quÆifõr
 == 'l') {

1036 i‡(
•ec
->
Êags
 & 
SIGN
)

1037 
•ec
->
ty≥
 = 
FORMAT_TYPE_LONG
;

1039 
•ec
->
ty≥
 = 
FORMAT_TYPE_ULONG
;

1040 } i‡(
•ec
->
quÆifõr
 == 'Z' || spec->qualifier == 'z') {

1041 
•ec
->
ty≥
 = 
FORMAT_TYPE_SIZE_T
;

1042 } i‡(
•ec
->
quÆifõr
 == 't') {

1043 
•ec
->
ty≥
 = 
FORMAT_TYPE_PTRDIFF
;

1044 } i‡(
•ec
->
quÆifõr
 == 'H') {

1045 i‡(
•ec
->
Êags
 & 
SIGN
)

1046 
•ec
->
ty≥
 = 
FORMAT_TYPE_BYTE
;

1048 
•ec
->
ty≥
 = 
FORMAT_TYPE_UBYTE
;

1049 } i‡(
•ec
->
quÆifõr
 == 'h') {

1050 i‡(
•ec
->
Êags
 & 
SIGN
)

1051 
•ec
->
ty≥
 = 
FORMAT_TYPE_SHORT
;

1053 
•ec
->
ty≥
 = 
FORMAT_TYPE_USHORT
;

1055 i‡(
•ec
->
Êags
 & 
SIGN
)

1056 
•ec
->
ty≥
 = 
FORMAT_TYPE_INT
;

1058 
•ec
->
ty≥
 = 
FORMAT_TYPE_UINT
;

1061  ++
fmt
 - 
°¨t
;

1062 
	}
}

1090 
	$v¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

1092 
num
;

1093 *
°r
, *
íd
, 
c
;

1094 
ªad
;

1095 
¥ötf_•ec
 
•ec
 = {0};

1099 i‡(
	`WARN_ON_ONCE
((Ë
size
 < 0))

1102 
°r
 = 
buf
;

1103 
íd
 = 
buf
 + 
size
;

1106 i‡(
íd
 < 
buf
) {

1107 
íd
 = ((*)-1);

1108 
size
 = 
íd
 - 
buf
;

1111 *
fmt
) {

1112 c⁄° *
ﬁd_fmt
 = 
fmt
;

1114 
ªad
 = 
	`f‹m©_decode
(
fmt
, &
•ec
);

1116 
fmt
 +
ªad
;

1118 
•ec
.
ty≥
) {

1119 
FORMAT_TYPE_NONE
: {

1120 
c›y
 = 
ªad
;

1121 i‡(
°r
 < 
íd
) {

1122 i‡(
c›y
 > 
íd
 - 
°r
)

1123 
c›y
 = 
íd
 - 
°r
;

1124 
	`mem˝y
(
°r
, 
ﬁd_fmt
, 
c›y
);

1126 
°r
 +
ªad
;

1130 
FORMAT_TYPE_WIDTH
:

1131 
•ec
.
fõld_width
 = 
	`va_¨g
(
¨gs
, );

1134 
FORMAT_TYPE_PRECISION
:

1135 
•ec
.
¥ecisi⁄
 = 
	`va_¨g
(
¨gs
, );

1138 
FORMAT_TYPE_CHAR
:

1139 i‡(!(
•ec
.
Êags
 & 
LEFT
)) {

1140 --
•ec
.
fõld_width
 > 0) {

1141 i‡(
°r
 < 
íd
)

1142 *
°r
 = ' ';

1143 ++
°r
;

1147 
c
 = (Ë
	`va_¨g
(
¨gs
, );

1148 i‡(
°r
 < 
íd
)

1149 *
°r
 = 
c
;

1150 ++
°r
;

1151 --
•ec
.
fõld_width
 > 0) {

1152 i‡(
°r
 < 
íd
)

1153 *
°r
 = ' ';

1154 ++
°r
;

1158 
FORMAT_TYPE_STR
:

1159 
°r
 = 
	`°rög
(°r, 
íd
, 
	`va_¨g
(
¨gs
, *), 
•ec
);

1162 
FORMAT_TYPE_PTR
:

1163 
°r
 = 
	`poöãr
(
fmt
+1, så, 
íd
, 
	`va_¨g
(
¨gs
, *),

1164 
•ec
);

1165 
	`iß um
(*
fmt
))

1166 
fmt
++;

1169 
FORMAT_TYPE_PERCENT_CHAR
:

1170 i‡(
°r
 < 
íd
)

1171 *
°r
 = '%';

1172 ++
°r
;

1175 
FORMAT_TYPE_INVALID
:

1176 i‡(
°r
 < 
íd
)

1177 *
°r
 = '%';

1178 ++
°r
;

1181 
FORMAT_TYPE_NRCHARS
: {

1182 
quÆifõr
 = 
•ec
.qualifier;

1184 i‡(
quÆifõr
 == 'l') {

1185 *
ù
 = 
	`va_¨g
(
¨gs
, *);

1186 *
ù
 = (
°r
 - 
buf
);

1187 } i‡(
quÆifõr
 == 'Z' ||

1188 
quÆifõr
 == 'z') {

1189 
size_t
 *
ù
 = 
	`va_¨g
(
¨gs
, size_t *);

1190 *
ù
 = (
°r
 - 
buf
);

1192 *
ù
 = 
	`va_¨g
(
¨gs
, *);

1193 *
ù
 = (
°r
 - 
buf
);

1199 
•ec
.
ty≥
) {

1200 
FORMAT_TYPE_LONG_LONG
:

1201 
num
 = 
	`va_¨g
(
¨gs
, );

1203 
FORMAT_TYPE_ULONG
:

1204 
num
 = 
	`va_¨g
(
¨gs
, );

1206 
FORMAT_TYPE_LONG
:

1207 
num
 = 
	`va_¨g
(
¨gs
, );

1209 
FORMAT_TYPE_SIZE_T
:

1210 
num
 = 
	`va_¨g
(
¨gs
, 
size_t
);

1212 
FORMAT_TYPE_PTRDIFF
:

1213 
num
 = 
	`va_¨g
(
¨gs
, 
±rdiff_t
);

1215 
FORMAT_TYPE_UBYTE
:

1216 
num
 = (Ë
	`va_¨g
(
¨gs
, );

1218 
FORMAT_TYPE_BYTE
:

1219 
num
 = (sig√d Ë
	`va_¨g
(
¨gs
, );

1221 
FORMAT_TYPE_USHORT
:

1222 
num
 = (Ë
	`va_¨g
(
¨gs
, );

1224 
FORMAT_TYPE_SHORT
:

1225 
num
 = (Ë
	`va_¨g
(
¨gs
, );

1227 
FORMAT_TYPE_INT
:

1228 
num
 = (Ë
	`va_¨g
(
¨gs
, );

1231 
num
 = 
	`va_¨g
(
¨gs
, );

1234 
°r
 = 
	`numbî
(°r, 
íd
, 
num
, 
•ec
);

1238 i‡(
size
 > 0) {

1239 i‡(
°r
 < 
íd
)

1240 *
°r
 = '\0';

1242 
íd
[-1] = '\0';

1246  
°r
-
buf
;

1248 
	}
}

1266 
	$vs˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

1268 
i
;

1270 
i
=
	`v¢¥ötf
(
buf
,
size
,
fmt
,
¨gs
);

1271  (
i
 >
size
) ? (size - 1) : i;

1272 
	}
}

1288 
	$¢¥ötf
(* 
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

1290 
va_li°
 
¨gs
;

1291 
i
;

1293 
	`va_°¨t
(
¨gs
, 
fmt
);

1294 
i
=
	`v¢¥ötf
(
buf
,
size
,
fmt
,
¨gs
);

1295 
	`va_íd
(
¨gs
);

1296  
i
;

1297 
	}
}

1310 
	$s˙¥ötf
(* 
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

1312 
va_li°
 
¨gs
;

1313 
i
;

1315 
	`va_°¨t
(
¨gs
, 
fmt
);

1316 
i
 = 
	`v¢¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

1317 
	`va_íd
(
¨gs
);

1318  (
i
 >
size
) ? (size - 1) : i;

1319 
	}
}

1336 
	$v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

1338  
	`v¢¥ötf
(
buf
, 
INT_MAX
, 
fmt
, 
¨gs
);

1339 
	}
}

1353 
	$•rötf
(* 
buf
, c⁄° *
fmt
, ...)

1355 
va_li°
 
¨gs
;

1356 
i
;

1358 
	`va_°¨t
(
¨gs
, 
fmt
);

1359 
i
=
	`v¢¥ötf
(
buf
, 
INT_MAX
, 
fmt
, 
¨gs
);

1360 
	`va_íd
(
¨gs
);

1361  
i
;

1362 
	}
}

1371 
	$vssˇnf
(c⁄° * 
buf
, c⁄° * 
fmt
, 
va_li°
 
¨gs
)

1373 c⁄° *
°r
 = 
buf
;

1374 *
√xt
;

1375 
digô
;

1376 
num
 = 0;

1377 
quÆifõr
;

1378 
ba£
;

1379 
fõld_width
;

1380 
is_sign
 = 0;

1382 *
fmt
 && *
°r
) {

1387 i‡(
	`is•a˚
(*
fmt
)) {

1388 
	`is•a˚
(*
fmt
))

1389 ++
fmt
;

1390 
	`is•a˚
(*
°r
))

1391 ++
°r
;

1395 i‡(*
fmt
 != '%' && *fmt) {

1396 i‡(*
fmt
++ !*
°r
++)

1401 i‡(!*
fmt
)

1403 ++
fmt
;

1408 i‡(*
fmt
 == '*') {

1409 !
	`is•a˚
(*
fmt
) && *fmt != '%' && *fmt)

1410 
fmt
++;

1411 !
	`is•a˚
(*
°r
) && *str)

1412 
°r
++;

1417 
fõld_width
 = -1;

1418 i‡(
	`isdigô
(*
fmt
))

1419 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

1422 
quÆifõr
 = -1;

1423 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L' ||

1424 *
fmt
 == 'Z' || *fmt == 'z') {

1425 
quÆifõr
 = *
fmt
++;

1426 i‡(
	`u∆ikñy
(
quÆifõr
 =*
fmt
)) {

1427 i‡(
quÆifõr
 == 'h') {

1428 
quÆifõr
 = 'H';

1429 
fmt
++;

1430 } i‡(
quÆifõr
 == 'l') {

1431 
quÆifõr
 = 'L';

1432 
fmt
++;

1436 
ba£
 = 10;

1437 
is_sign
 = 0;

1439 i‡(!*
fmt
 || !*
°r
)

1442 *
fmt
++) {

1445 *
s
 = (*Ë
	`va_¨g
(
¨gs
,*);

1446 i‡(
fõld_width
 == -1)

1447 
fõld_width
 = 1;

1449 *
s
++ = *
°r
++;

1450 } --
fõld_width
 > 0 && *
°r
);

1451 
num
++;

1456 *
s
 = (*Ë
	`va_¨g
(
¨gs
, *);

1457 if(
fõld_width
 == -1)

1458 
fõld_width
 = 
INT_MAX
;

1460 
	`is•a˚
(*
°r
))

1461 
°r
++;

1464 *
°r
 && !
	`is•a˚
(*°rË&& 
fõld_width
--) {

1465 *
s
++ = *
°r
++;

1467 *
s
 = '\0';

1468 
num
++;

1474 *
i
 = (*)
	`va_¨g
(
¨gs
,*);

1475 *
i
 = 
°r
 - 
buf
;

1479 
ba£
 = 8;

1483 
ba£
 = 16;

1486 
ba£
 = 0;

1488 
is_sign
 = 1;

1493 i‡(*
°r
++ != '%')

1494  
num
;

1498  
num
;

1504 
	`is•a˚
(*
°r
))

1505 
°r
++;

1507 
digô
 = *
°r
;

1508 i‡(
is_sign
 && 
digô
 == '-')

1509 
digô
 = *(
°r
 + 1);

1511 i‡(!
digô


1512 || (
ba£
 =16 && !
	`isxdigô
(
digô
))

1513 || (
ba£
 =10 && !
	`isdigô
(
digô
))

1514 || (
ba£
 =8 && (!
	`isdigô
(
digô
) || digit > '7'))

1515 || (
ba£
 =0 && !
	`isdigô
(
digô
)))

1518 
quÆifõr
) {

1520 i‡(
is_sign
) {

1521 sig√d *
s
 = (sig√d *Ë
	`va_¨g
(
¨gs
,signed *);

1522 *
s
 = (sig√d Ë
	`sim∂e_°πﬁ
(
°r
,&
√xt
,
ba£
);

1524 *
s
 = (*Ë
	`va_¨g
(
¨gs
, *);

1525 *
s
 = (Ë
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

1529 i‡(
is_sign
) {

1530 *
s
 = (*Ë
	`va_¨g
(
¨gs
,*);

1531 *
s
 = (Ë
	`sim∂e_°πﬁ
(
°r
,&
√xt
,
ba£
);

1533 *
s
 = (*Ë
	`va_¨g
(
¨gs
, *);

1534 *
s
 = (Ë
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

1538 i‡(
is_sign
) {

1539 *
l
 = (*Ë
	`va_¨g
(
¨gs
,*);

1540 *
l
 = 
	`sim∂e_°πﬁ
(
°r
,&
√xt
,
ba£
);

1542 *
l
 = (*Ë
	`va_¨g
(
¨gs
,*);

1543 *
l
 = 
	`sim∂e_°πoul
(
°r
,&
√xt
,
ba£
);

1547 i‡(
is_sign
) {

1548 *
l
 = (*Ë
	`va_¨g
(
¨gs
,*);

1549 *
l
 = 
	`sim∂e_°πﬁl
(
°r
,&
√xt
,
ba£
);

1551 *
l
 = (*Ë
	`va_¨g
(
¨gs
,*);

1552 *
l
 = 
	`sim∂e_°πouŒ
(
°r
,&
√xt
,
ba£
);

1558 
size_t
 *
s
 = (size_t*Ë
	`va_¨g
(
¨gs
,size_t*);

1559 *
s
 = (
size_t
Ë
	`sim∂e_°πoul
(
°r
,&
√xt
,
ba£
);

1563 i‡(
is_sign
) {

1564 *
i
 = (*Ë
	`va_¨g
(
¨gs
, *);

1565 *
i
 = (Ë
	`sim∂e_°πﬁ
(
°r
,&
√xt
,
ba£
);

1567 *
i
 = (*Ë
	`va_¨g
(
¨gs
, *);

1568 *
i
 = (Ë
	`sim∂e_°πoul
(
°r
,&
√xt
,
ba£
);

1572 
num
++;

1574 i‡(!
√xt
)

1576 
°r
 = 
√xt
;

1584 i‡(*
fmt
 == '%' && *(fmt + 1) == 'n') {

1585 *
p
 = (*)
	`va_¨g
(
¨gs
, *);

1586 *
p
 = 
°r
 - 
buf
;

1589  
num
;

1590 
	}
}

1598 
	$ssˇnf
(c⁄° * 
buf
, c⁄° * 
fmt
, ...)

1600 
va_li°
 
¨gs
;

1601 
i
;

1603 
	`va_°¨t
(
¨gs
,
fmt
);

1604 
i
 = 
	`vssˇnf
(
buf
,
fmt
,
¨gs
);

1605 
	`va_íd
(
¨gs
);

1606  
i
;

1607 
	}
}

1613 
	$w¨n_¶ow∑th
 (c⁄° * 
fûe
, 
löe
, c⁄° * 
fmt
, ...)

1615 
va_li°
 
¨gs
;

1616 
ˇŒî
 = ()
	`__buûtö_ªtu∫_addªss
(0);

1618 
	`¥ötk
("WARNING:áà%s:%d %s()\n", 
fûe
, 
löe
);

1620 
	`va_°¨t
(
¨gs
, 
fmt
);

1621 
	`v¥ötk
(
fmt
, 
¨gs
);

1622 
	`va_íd
(
¨gs
);

1623 
	}
}

	@queue.c

23 
	~<«utûus/queue.h
>

24 
	~<«utûus/•ölock.h
>

25 
	~<«utûus/öåösics.h
>

26 
	~<«utûus/mm.h
>

30 
nk_queue_t
*

31 
	$nk_queue_¸óã
 ()

33 
nk_queue_t
 * 
q
 = 
NULL
;

34 
q
 = 
	`mÆloc
((
nk_queue_t
));

35 i‡(
	`u∆ikñy
(!
q
)) {

36  
NULL
;

38 
	`mem£t
(
q
, 0, (
nk_queue_t
));

40 
	`INIT_LIST_HEAD
(&(
q
->
queue
));

42 
	`•ölock_öô
(&(
q
->
lock
));

44  
q
;

45 
	}
}

49 
	$nk_queue_de°roy
 (
nk_queue_t
 * 
q
, 
uöt8_t
 
‰ì_íåõs
)

51 
nk_queue_íåy_t
 * 
tmp
 = 
NULL
;

52 
nk_queue_íåy_t
 * 
ñm
 = 
NULL
;

54 
	`li°_f‹_óch_íåy_ß„
(
ñm
, 
tmp
, &(
q
->
queue
), 
node
) {

55 
	`li°_dñ_öô
(&(
ñm
->
node
));

56 i‡(
‰ì_íåõs
) {

57 
	`‰ì
(
ñm
);

61 
	`‰ì
(
q
);

62 
	}
}

	@random.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/øndom.h
>

25 
	~<«utûus/˝u.h
>

26 
	~<«utûus/≥r˝u.h
>

27 
	~<«utûus/smp.h
>

28 
	~<«utûus/úq.h
>

29 
	~<«utûus/•ölock.h
>

30 
	~<«utûus/øndom.h
>

31 
	~<«utûus/mm.h
>

32 
	~<dev/≠ic.h
>

36 
	$nk_ønd_£ed
 (
uöt64_t
 
£ed
) {

37 
nk_ønd_öfo
 * 
ønd
 = 
	`≥r_˝u_gë
(rand);

38 
uöt8_t
 
Êags
 = 
	`•ö_lock_úq_ßve
(&
ønd
->
lock
);

39 
ønd
->
xi
 = 
£ed
;

40 
ønd
->
£ed
 = seed;

41 
ønd
->
n
 = 0;

42 
	`•ö_u∆ock_úq_ª°‹e
(&
ønd
->
lock
, 
Êags
);

43 
	}
}

52 
	$nk_ønd_£t_xi
 (
uöt64_t
 
xi
)

54 
nk_ønd_öfo
 * 
ønd
 = 
	`≥r_˝u_gë
(rand);

55 
ønd
->
xi
 = xi;

56 
ønd
->
n
++;

57 
	}
}

60 
	#_AB
(
x
,
n
Ë(()(((xË>> (n)Ë& 0xff))

	)

71 
	$gë_ønd_byã
 ()

73 
≠ic_dev
 * 
≠ic
 = 
	`≥r_˝u_gë
(apic);

74 
nk_ønd_öfo
 * 
ønd
 = 
	`≥r_˝u_gë
(rand);

75 
uöt64_t
 
cy˛es
;

76 
uöt32_t
 
vÆ
;

77 
b
 = 0xff;

78 
b2
 = 0;

79 
uöt8_t
 
i
;

82 
i
 = 0; i < 8; i++) {

83 
vÆ
 = 
	`≠ic_ªad
(
≠ic
, 
	`APIC_GET_IRR
(
i
)Ë^ (
ønd
->
£ed
 & 0xffffffff);

84 
b
 ^~(
	`_AB
(
vÆ
, 0) ^

85 
	`_AB
(
vÆ
, 1) ^

86 
	`_AB
(
vÆ
, 2) ^

87 
	`_AB
(
vÆ
, 3));

90 
cy˛es
 = 
	`rdtsc
();

92 
i
 = 0; i < 8; i++) {

93 
b2
 ^
	`_AB
(
cy˛es
, 
i
);

96  
b
 + 
b2
;

97 
	}
}

101 
	$nk_gë_ønd_byãs
 (
uöt8_t
 * 
buf
, 
Àn
)

103 i‡(!
buf
) {

107 
Àn
--) {

108 *
buf
++ = 
	`gë_ønd_byã
();

110 
	}
}

114 
	$nk_ønd_öô
 (
˝u
 * cpu)

116 
˝u
->
ønd
 = 
	`mÆloc
((
nk_ønd_öfo
));

117 i‡(!
˝u
->
ønd
) {

118 
	`ERROR_PRINT
("CouldÇotállocate CPUÑandom info\n");

121 
	`mem£t
(
˝u
->
ønd
, 0, (
nk_ønd_öfo
));

123 
	`•ölock_öô
(&
˝u
->
ønd
->
lock
);

126 
	}
}

	@rbtree.c

22 
	~<«utûus/rbåì.h
>

25 
	$__rb_rŸ©e_À·
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

27 
rb_node
 *
right
 = 
node
->
rb_right
;

28 
rb_node
 *
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

30 i‡((
node
->
rb_right
 = 
right
->
rb_À·
))

31 
	`rb_£t_∑ª¡
(
right
->
rb_À·
, 
node
);

32 
right
->
rb_À·
 = 
node
;

34 
	`rb_£t_∑ª¡
(
right
, 
∑ª¡
);

36 i‡(
∑ª¡
)

38 i‡(
node
 =
∑ª¡
->
rb_À·
)

39 
∑ª¡
->
rb_À·
 = 
right
;

41 
∑ª¡
->
rb_right
 = 
right
;

44 
roŸ
->
rb_node
 = 
right
;

45 
	`rb_£t_∑ª¡
(
node
, 
right
);

46 
	}
}

48 
	$__rb_rŸ©e_right
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

50 
rb_node
 * 
À·
 = 
node
->
rb_À·
;

51 
rb_node
 * 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

53 i‡((
node
->
rb_À·
 = 
À·
->
rb_right
)) {

54 
	`rb_£t_∑ª¡
(
À·
->
rb_right
, 
node
);

57 
À·
->
rb_right
 = 
node
;

59 
	`rb_£t_∑ª¡
(
À·
, 
∑ª¡
);

61 i‡(
∑ª¡
) {

62 i‡(
node
 =
∑ª¡
->
rb_right
) {

63 
∑ª¡
->
rb_right
 = 
À·
;

65 
∑ª¡
->
rb_À·
 = 
À·
;

68 
roŸ
->
rb_node
 = 
À·
;

71 
	`rb_£t_∑ª¡
(
node
, 
À·
);

72 
	}
}

74 
	$nk_rb_ö£π_cﬁ‹
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

76 
rb_node
 *
∑ª¡
, *
g∑ª¡
;

78 (
∑ª¡
 = 
	`rb_∑ª¡
(
node
)Ë&& 
	`rb_is_ªd
(parent))

80 
g∑ª¡
 = 
	`rb_∑ª¡
(
∑ª¡
);

82 i‡(
∑ª¡
 =
g∑ª¡
->
rb_À·
)

85 
rb_node
 *
un˛e
 = 
g∑ª¡
->
rb_right
;

86 i‡(
un˛e
 && 
	`rb_is_ªd
(uncle))

88 
	`rb_£t_bœck
(
un˛e
);

89 
	`rb_£t_bœck
(
∑ª¡
);

90 
	`rb_£t_ªd
(
g∑ª¡
);

91 
node
 = 
g∑ª¡
;

96 i‡(
∑ª¡
->
rb_right
 =
node
)

98 
rb_node
 *
tmp
;

99 
	`__rb_rŸ©e_À·
(
∑ª¡
, 
roŸ
);

100 
tmp
 = 
∑ª¡
;

101 
∑ª¡
 = 
node
;

102 
node
 = 
tmp
;

105 
	`rb_£t_bœck
(
∑ª¡
);

106 
	`rb_£t_ªd
(
g∑ª¡
);

107 
	`__rb_rŸ©e_right
(
g∑ª¡
, 
roŸ
);

110 
rb_node
 *
un˛e
 = 
g∑ª¡
->
rb_À·
;

111 i‡(
un˛e
 && 
	`rb_is_ªd
(uncle))

113 
	`rb_£t_bœck
(
un˛e
);

114 
	`rb_£t_bœck
(
∑ª¡
);

115 
	`rb_£t_ªd
(
g∑ª¡
);

116 
node
 = 
g∑ª¡
;

121 i‡(
∑ª¡
->
rb_À·
 =
node
)

123 
rb_node
 *
tmp
;

124 
	`__rb_rŸ©e_right
(
∑ª¡
, 
roŸ
);

125 
tmp
 = 
∑ª¡
;

126 
∑ª¡
 = 
node
;

127 
node
 = 
tmp
;

130 
	`rb_£t_bœck
(
∑ª¡
);

131 
	`rb_£t_ªd
(
g∑ª¡
);

132 
	`__rb_rŸ©e_À·
(
g∑ª¡
, 
roŸ
);

136 
	`rb_£t_bœck
(
roŸ
->
rb_node
);

137 
	}
}

140 
	$__rb_îa£_cﬁ‹
(
rb_node
 *
node
, rb_nodê*
∑ª¡
,

141 
rb_roŸ
 *
roŸ
)

143 
rb_node
 *
Ÿhî
;

145 (!
node
 || 
	`rb_is_bœck
“ode)Ë&&Çodê!
roŸ
->
rb_node
)

147 i‡(
∑ª¡
->
rb_À·
 =
node
)

149 
Ÿhî
 = 
∑ª¡
->
rb_right
;

150 i‡(
	`rb_is_ªd
(
Ÿhî
))

152 
	`rb_£t_bœck
(
Ÿhî
);

153 
	`rb_£t_ªd
(
∑ª¡
);

154 
	`__rb_rŸ©e_À·
(
∑ª¡
, 
roŸ
);

155 
Ÿhî
 = 
∑ª¡
->
rb_right
;

157 i‡((!
Ÿhî
->
rb_À·
 || 
	`rb_is_bœck
(other->rb_left)) &&

158 (!
Ÿhî
->
rb_right
 || 
	`rb_is_bœck
(other->rb_right)))

160 
	`rb_£t_ªd
(
Ÿhî
);

161 
node
 = 
∑ª¡
;

162 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

166 i‡(!
Ÿhî
->
rb_right
 || 
	`rb_is_bœck
(other->rb_right))

168 
rb_node
 *
o_À·
;

169 i‡((
o_À·
 = 
Ÿhî
->
rb_À·
))

170 
	`rb_£t_bœck
(
o_À·
);

171 
	`rb_£t_ªd
(
Ÿhî
);

172 
	`__rb_rŸ©e_right
(
Ÿhî
, 
roŸ
);

173 
Ÿhî
 = 
∑ª¡
->
rb_right
;

175 
	`rb_£t_cﬁ‹
(
Ÿhî
, 
	`rb_cﬁ‹
(
∑ª¡
));

176 
	`rb_£t_bœck
(
∑ª¡
);

177 i‡(
Ÿhî
->
rb_right
)

178 
	`rb_£t_bœck
(
Ÿhî
->
rb_right
);

179 
	`__rb_rŸ©e_À·
(
∑ª¡
, 
roŸ
);

180 
node
 = 
roŸ
->
rb_node
;

186 
Ÿhî
 = 
∑ª¡
->
rb_À·
;

187 i‡(
	`rb_is_ªd
(
Ÿhî
))

189 
	`rb_£t_bœck
(
Ÿhî
);

190 
	`rb_£t_ªd
(
∑ª¡
);

191 
	`__rb_rŸ©e_right
(
∑ª¡
, 
roŸ
);

192 
Ÿhî
 = 
∑ª¡
->
rb_À·
;

194 i‡((!
Ÿhî
->
rb_À·
 || 
	`rb_is_bœck
(other->rb_left)) &&

195 (!
Ÿhî
->
rb_right
 || 
	`rb_is_bœck
(other->rb_right)))

197 
	`rb_£t_ªd
(
Ÿhî
);

198 
node
 = 
∑ª¡
;

199 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

203 i‡(!
Ÿhî
->
rb_À·
 || 
	`rb_is_bœck
(other->rb_left))

205 
rb_node
 *
o_right
;

206 i‡((
o_right
 = 
Ÿhî
->
rb_right
))

207 
	`rb_£t_bœck
(
o_right
);

208 
	`rb_£t_ªd
(
Ÿhî
);

209 
	`__rb_rŸ©e_À·
(
Ÿhî
, 
roŸ
);

210 
Ÿhî
 = 
∑ª¡
->
rb_À·
;

212 
	`rb_£t_cﬁ‹
(
Ÿhî
, 
	`rb_cﬁ‹
(
∑ª¡
));

213 
	`rb_£t_bœck
(
∑ª¡
);

214 i‡(
Ÿhî
->
rb_À·
)

215 
	`rb_£t_bœck
(
Ÿhî
->
rb_À·
);

216 
	`__rb_rŸ©e_right
(
∑ª¡
, 
roŸ
);

217 
node
 = 
roŸ
->
rb_node
;

222 i‡(
node
)

223 
	`rb_£t_bœck
(
node
);

224 
	}
}

226 
	$nk_rb_îa£
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

228 
rb_node
 *
chûd
, *
∑ª¡
;

229 
cﬁ‹
;

231 i‡(!
node
->
rb_À·
)

232 
chûd
 = 
node
->
rb_right
;

233 i‡(!
node
->
rb_right
)

234 
chûd
 = 
node
->
rb_À·
;

237 
rb_node
 *
ﬁd
 = 
node
, *
À·
;

239 
node
 =Çode->
rb_right
;

240 (
À·
 = 
node
->
rb_À·
Ë!
NULL
)

241 
node
 = 
À·
;

242 
chûd
 = 
node
->
rb_right
;

243 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

244 
cﬁ‹
 = 
	`rb_cﬁ‹
(
node
);

246 i‡(
chûd
)

247 
	`rb_£t_∑ª¡
(
chûd
, 
∑ª¡
);

248 i‡(
∑ª¡
 =
ﬁd
) {

249 
∑ª¡
->
rb_right
 = 
chûd
;

250 
∑ª¡
 = 
node
;

252 
∑ª¡
->
rb_À·
 = 
chûd
;

254 
node
->
rb_∑ª¡_cﬁ‹
 = 
ﬁd
->rb_parent_color;

255 
node
->
rb_right
 = 
ﬁd
->rb_right;

256 
node
->
rb_À·
 = 
ﬁd
->rb_left;

258 i‡(
	`rb_∑ª¡
(
ﬁd
))

260 i‡(
	`rb_∑ª¡
(
ﬁd
)->
rb_À·
 == old)

261 
	`rb_∑ª¡
(
ﬁd
)->
rb_À·
 = 
node
;

263 
	`rb_∑ª¡
(
ﬁd
)->
rb_right
 = 
node
;

265 
roŸ
->
rb_node
 = 
node
;

267 
	`rb_£t_∑ª¡
(
ﬁd
->
rb_À·
, 
node
);

268 i‡(
ﬁd
->
rb_right
)

269 
	`rb_£t_∑ª¡
(
ﬁd
->
rb_right
, 
node
);

270 
cﬁ‹
;

273 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

274 
cﬁ‹
 = 
	`rb_cﬁ‹
(
node
);

276 i‡(
chûd
)

277 
	`rb_£t_∑ª¡
(
chûd
, 
∑ª¡
);

278 i‡(
∑ª¡
)

280 i‡(
∑ª¡
->
rb_À·
 =
node
)

281 
∑ª¡
->
rb_À·
 = 
chûd
;

283 
∑ª¡
->
rb_right
 = 
chûd
;

286 
roŸ
->
rb_node
 = 
chûd
;

288 
cﬁ‹
:

289 i‡(
cﬁ‹
 =
RB_BLACK
 && 
∑ª¡
)

290 
	`__rb_îa£_cﬁ‹
(
chûd
, 
∑ª¡
, 
roŸ
);

291 
	}
}

297 
rb_node
 *
	$nk_rb_fú°
(
rb_roŸ
 *
roŸ
)

299 
rb_node
 *
n
;

301 
n
 = 
roŸ
->
rb_node
;

302 i‡(!
n
)

303  
NULL
;

304 
n
->
rb_À·
)

305 
n
 =Ç->
rb_À·
;

306  
n
;

307 
	}
}

310 
rb_node
 *
	$nk_rb_œ°
(
rb_roŸ
 *
roŸ
)

312 
rb_node
 *
n
;

314 
n
 = 
roŸ
->
rb_node
;

315 i‡(!
n
)

316  
NULL
;

317 
n
->
rb_right
)

318 
n
 =Ç->
rb_right
;

319  
n
;

320 
	}
}

323 
rb_node
 *
	$nk_rb_√xt
(
rb_node
 *
node
)

325 
rb_node
 *
∑ª¡
;

329 i‡(
node
->
rb_right
) {

330 
node
 =Çode->
rb_right
;

331 
node
->
rb_À·
)

332 
node
Úode->
rb_À·
;

333  
node
;

342 (
∑ª¡
 = 
	`rb_∑ª¡
(
node
)Ë&&Çodê=∑ª¡->
rb_right
)

343 
node
 = 
∑ª¡
;

345  
∑ª¡
;

346 
	}
}

349 
rb_node
 *
	$nk_rb_¥ev
(
rb_node
 *
node
)

351 
rb_node
 *
∑ª¡
;

355 i‡(
node
->
rb_À·
) {

356 
node
 =Çode->
rb_À·
;

357 
node
->
rb_right
)

358 
node
Úode->
rb_right
;

359  
node
;

364 (
∑ª¡
 = 
	`rb_∑ª¡
(
node
)Ë&&Çodê=∑ª¡->
rb_À·
)

365 
node
 = 
∑ª¡
;

367  
∑ª¡
;

368 
	}
}

371 
	$nk_rb_ª∂a˚_node
(
rb_node
 *
vi˘im
, rb_nodê*
√w
,

372 
rb_roŸ
 *
roŸ
)

374 
rb_node
 *
∑ª¡
 = 
	`rb_∑ª¡
(
vi˘im
);

377 i‡(
∑ª¡
) {

378 i‡(
vi˘im
 =
∑ª¡
->
rb_À·
)

379 
∑ª¡
->
rb_À·
 = 
√w
;

381 
∑ª¡
->
rb_right
 = 
√w
;

383 
roŸ
->
rb_node
 = 
√w
;

385 i‡(
vi˘im
->
rb_À·
)

386 
	`rb_£t_∑ª¡
(
vi˘im
->
rb_À·
, 
√w
);

387 i‡(
vi˘im
->
rb_right
)

388 
	`rb_£t_∑ª¡
(
vi˘im
->
rb_right
, 
√w
);

391 *
√w
 = *
vi˘im
;

392 
	}
}

	@realmode.c

24 
	~<«utûus/«utûus.h
>

25 
	~<«utûus/•ölock.h
>

26 
	~<«utûus/úq.h
>

27 
	~<«utûus/ªÆmode.h
>

29 #i‚de‡
NAUT_CONFIG_DEBUG_REAL_MODE_INTERFACE


30 #unde‡
DEBUG_PRINT


31 
	#DEBUG_PRINT
(
fmt
, 
¨gs
...)

	)

34 
	#ERROR
(
fmt
, 
¨gs
...Ë
	`ERROR_PRINT
("ªÆmode: " fmt, ##¨gs)

	)

35 
	#DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("ªÆmode: " fmt, ##¨gs)

	)

36 
	#INFO
(
fmt
, 
¨gs
...Ë
	`INFO_PRINT
("ªÆmode: " fmt, ##¨gs)

	)

38 
•ölock_t
 
	g°©e_lock
;

39 
	gö_¥ogªss
 = 0;

42 
_nk_ªÆ_mode_öt
(
nk_ªÆ_mode_öt_¨gs
 *);

43 
_nk_ªÆ_mode_öt_END
;

45 
	$nk_ªÆ_mode_£t_¨g_deÁu…s
(
nk_ªÆ_mode_öt_¨gs
 *
¨gs
)

47 
	`mem£t
(
¨gs
,0,(*args));

49 
¨gs
->
•
 = 0x7000;

50 
¨gs
->
bp
 = 0x7000;

52 
¨gs
->
cs
 = 
NAUT_CONFIG_REAL_MODE_INTERFACE_SEGMENT
;

53 
¨gs
->
ds
 = 
NAUT_CONFIG_REAL_MODE_INTERFACE_SEGMENT
;

54 
¨gs
->
ss
 = 
NAUT_CONFIG_REAL_MODE_INTERFACE_SEGMENT
;

55 
¨gs
->
fs
 = 
NAUT_CONFIG_REAL_MODE_INTERFACE_SEGMENT
;

56 
¨gs
->
gs
 = 
NAUT_CONFIG_REAL_MODE_INTERFACE_SEGMENT
;

57 
¨gs
->
es
 = 
NAUT_CONFIG_REAL_MODE_INTERFACE_SEGMENT
;

59 
	}
}

63 
	$nk_ªÆ_mode_öô
()

65 
uöt64_t
 
size
 = (uöt64_t)(&
_nk_ªÆ_mode_öt_END
) -

66 (
uöt64_t
)&
_nk_ªÆ_mode_öt
 + 1;

67 *
èrgë
 = (*)(
NAUT_CONFIG_REAL_MODE_INTERFACE_SEGMENT
 * 16);

69 
	`•ölock_öô
(&
°©e_lock
);

70 
	`DEBUG
("CopyingÅhunk from %pÅoÅargetáddress %p (size=0x%lx)\n",

71 &
_nk_ªÆ_mode_öt
, 
èrgë
, 
size
);

72 
	`mem˝y
(
èrgë
,
_nk_ªÆ_mode_öt
,
size
);

73 
	`INFO
("real mode inited\n");

75 
	}
}

77 
	$nk_ªÆ_mode_deöô
()

79 
	`INFO
("real mode deinited\n");

81 
	}
}

82 
	$nk_ªÆ_mode_°¨t
()

85 
	`DEBUG
("wait for start\n");

86 
	`•ö_lock
(&
°©e_lock
);

87 
ö_¥ogªss
 = 1;

88 
	`DEBUG
("started\n");

90 
	}
}

92 
	$nk_ªÆ_mode_öt
(
nk_ªÆ_mode_öt_¨gs
 *
¨gs
)

94 i‡(!
ö_¥ogªss
) {

95 
	`ERROR
("Invocation ofÇk_real_mode_int beforeÇk_real_mode_start\n");

100 
uöt8_t
 
Êags
 = 
	`úq_dißbÀ_ßve
();

102 
	`DEBUG
("Interrupts off,ÅhunkáboutÅo be called\n");

105 (*
thunk
)(
nk_ªÆ_mode_öt_¨gs
 *) =

106 ((*)(
nk_ªÆ_mode_öt_¨gs
 *))(
NAUT_CONFIG_REAL_MODE_INTERFACE_SEGMENT
*16);

108 
	`thunk
(
¨gs
);

110 
	`DEBUG
("Thunk hasÑeturned\n");

114 
	`úq_íabÀ_ª°‹e
(
Êags
);

118 
	}
}

121 
	$nk_ªÆ_mode_föish
()

123 
	`DEBUG
("finish called\n");

125 i‡(!
ö_¥ogªss
) {

126 
	`ERROR
("CallingÇk_real_mode_finish whenÇo invocation is inÖrogress\n");

130 
ö_¥ogªss
 = 0;

132 
	`•ö_u∆ock
(&
°©e_lock
);

135 
	}
}

	@rwlock.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/rwlock.h
>

25 
	~<«utûus/•ölock.h
>

26 
	~<«utûus/öåösics.h
>

27 
	~<«utûus/thªad.h
>

28 
	~<«utûus/mm.h
>

30 #i‚de‡
NAUT_CONFIG_DEBUG_SYNCH


31 #unde‡
DEBUG_PRINT


32 
	#DEBUG_PRINT
(
fmt
, 
¨gs
...)

	)

42 
nk_yõld
();

45 
	$nk_rwlock_öô
 (
nk_rwlock_t
 * 
l
)

47 
	`DEBUG_PRINT
("rwlock inô (%p)\n", (*)
l
);

48 
l
->
ªadîs
 = 0;

49 
	`•ölock_öô
(&
l
->
lock
);

51 
	}
}

55 
	$nk_rwlock_rd_lock
 (
nk_rwlock_t
 * 
l
)

57 
	`NK_PROFILE_ENTRY
();

58 
	`DEBUG_PRINT
("rwlockÑódÜock: %p\n", (*)
l
);

59 
Êags
 = 
	`•ö_lock_úq_ßve
(&
l
->
lock
);

60 ++
l
->
ªadîs
;

61 
	`•ö_u∆ock_úq_ª°‹e
(&
l
->
lock
, 
Êags
);

62 
	`NK_PROFILE_EXIT
();

64 
	}
}

68 
	$nk_rwlock_rd_u∆ock
 (
nk_rwlock_t
 * 
l
)

70 
	`NK_PROFILE_ENTRY
();

71 
	`DEBUG_PRINT
("rwlockÑód u∆ock: %p\n", (*)
l
);

72 
Êags
 = 
	`•ö_lock_úq_ßve
(&
l
->
lock
);

73 --
l
->
ªadîs
;

74 
	`•ö_u∆ock_úq_ª°‹e
(&
l
->
lock
, 
Êags
);

75 
	`NK_PROFILE_EXIT
();

77 
	}
}

81 
	$nk_rwlock_wr_lock
 (
nk_rwlock_t
 * 
l
)

83 
	`NK_PROFILE_ENTRY
();

84 
	`DEBUG_PRINT
("rwlock wrôêlock: %p\n", (*)
l
);

87 
	`•ö_lock
(&
l
->
lock
);

89 i‡(
	`likñy
(
l
->
ªadîs
 == 0)) {

92 
	`•ö_u∆ock
(&
l
->
lock
);

97 
	`NK_PROFILE_EXIT
();

99 
	}
}

103 
	$nk_rwlock_wr_u∆ock
 (
nk_rwlock_t
 * 
l
)

105 
	`NK_PROFILE_ENTRY
();

106 
	`DEBUG_PRINT
("rwlock wrôêu∆ock: %p\n", (*)
l
);

107 
	`•ö_u∆ock
(&
l
->
lock
);

108 
	`NK_PROFILE_EXIT
();

110 
	}
}

113 
uöt8_t


114 
	$nk_rwlock_wr_lock_úq_ßve
 (
nk_rwlock_t
 * 
l
)

116 
Êags
;

117 
	`NK_PROFILE_ENTRY
();

118 
	`DEBUG_PRINT
("rwlock wrôêlock (úq): %p\n", (*)
l
);

121 
Êags
 = 
	`•ö_lock_úq_ßve
(&
l
->
lock
);

123 i‡(
	`likñy
(
l
->
ªadîs
 == 0 )) {

126 
	`•ö_u∆ock_úq_ª°‹e
(&
l
->
lock
, 
Êags
);

130 
	`NK_PROFILE_EXIT
();

131  
Êags
;

132 
	}
}

136 
	$nk_rwlock_wr_u∆ock_úq_ª°‹e
 (
nk_rwlock_t
 * 
l
, 
uöt8_t
 
Êags
)

138 
	`NK_PROFILE_ENTRY
();

139 
	`DEBUG_PRINT
("rwlock wrôêu∆ock (úq): %p\n", (*)
l
);

140 
	`•ö_u∆ock_úq_ª°‹e
(&
l
->
lock
, 
Êags
);

141 
	`NK_PROFILE_EXIT
();

143 
	}
}

147 
	$ªadî1
 (* 
ö
, ** 
out
)

149 
nk_rwlock_t
 * 
æ
 = (nk_rwlock_t*)
ö
;

150 
n
 = 1000;

151 
i
 = 0;

152 
	`nk_rwlock_rd_lock
(
æ
);

153 
i
++;

154 
	`nk_rwlock_rd_u∆ock
(
æ
);

156 
	}
}

159 
	$ªadî2
 (* 
ö
, ** 
out
)

161 
n
 = 2000;

162 
i
 = 0;

163 
nk_rwlock_t
 * 
æ
 = (nk_rwlock_t*)
ö
;

164 
	`nk_rwlock_rd_lock
(
æ
);

165 
i
++;

166 
	`nk_rwlock_rd_u∆ock
(
æ
);

167 
	}
}

170 
	$wrôî
 (* 
ö
, ** 
out
)

172 
nk_rwlock_t
 * 
æ
 = (nk_rwlock_t*)
ö
;

173 
n
 = 0;

174 
uöt8_t
 
Êags
 = 
	`nk_rwlock_wr_lock_úq_ßve
(
æ
);

175 
n
++;

176 
	`nk_rwlock_wr_u∆ock_úq_ª°‹e
(
æ
, 
Êags
);

177 
	}
}

181 
	$nk_rwlock_ã°
 ()

183 
nk_rwlock_t
 * 
æ
 = 
NULL
;

184 
æ
 = 
	`mÆloc
((
nk_rwlock_t
));

185 i‡(!
æ
) {

186 
	`ERROR_PRINT
("CouldÇotállocateÑwlock\n");

190 
	`nk_rwlock_öô
(
æ
);

192 
	`nk_thªad_°¨t
(
ªadî1
, 
æ
, 
NULL
, 1, 
TSTACK_DEFAULT
, NULL, 1);

193 
	`nk_thªad_°¨t
(
ªadî2
, 
æ
, 
NULL
, 1, 
TSTACK_DEFAULT
, NULL, 2);

194 
	`nk_thªad_°¨t
(
wrôî
, 
æ
, 
NULL
, 1, 
TSTACK_DEFAULT
, NULL, 3);

196 
	}
}

	@scheduler.c

43 
	~<«utûus/«utûus.h
>

44 
	~<«utûus/thªad.h
>

45 
	~<«utûus/timî.h
>

46 
	~<«utûus/scheduÀr.h
>

47 
	~<«utûus/úq.h
>

48 
	~<«utûus/˝u.h
>

49 
	~<«utûus/˝uid.h
>

50 
	~<«utûus/øndom.h
>

51 
	~<«utûus/backåa˚.h
>

52 
	~<dev/≠ic.h
>

54 
	#INSTRUMENT
 0

	)

56 
	#SANITY_CHECKS
 0

	)

58 
	#DUMP_THREAD_RT_STATE
 0

	)

59 
	#DUMP_SCHED_STATE
 0

	)

61 
	#INFO
(
fmt
, 
¨gs
...Ë
	`INFO_PRINT
("ScheduÀr: " fmt, ##¨gs)

	)

62 
	#ERROR
(
fmt
, 
¨gs
...Ë
	`ERROR_PRINT
("ScheduÀr: " fmt, ##¨gs)

	)

65 
	#DEBUG
(
fmt
, 
¨gs
...)

	)

66 
	#DEBUG_DUMP
(
π
,
¥e
)

	)

67 #ifde‡
NAUT_CONFIG_DEBUG_SCHED


68 #unde‡
DEBUG


69 #unde‡
DEBUG_DUMP


70 
	#DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("ScheduÀr: " fmt, ##¨gs)

	)

71 #i‡
DUMP_THREAD_RT_STATE


72 
	#DEBUG_DUMP
(
π
,
¥e
Ë
	`π_thªad_dump
‘t,¥e)

	)

74 
	#DEBUG_DUMP
(
π
,
¥e
)

	)

79 #i‚de‡
MIN


80 
	#MIN
(
x
, 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

83 #i‚de‡
MAX


84 
	#MAX
(
x
, 
y
Ë(((xË>(y)Ë? (xË: (y))

	)

88 
	#UTIL_ONE
 1000000ULL

	)

91 
	#MAX_QUEUE
 (
NAUT_CONFIG_MAX_THREADS
)

	)

94 
	#GLOBAL_LOCK_CONF
 
uöt8_t
 
_globÆ_Êags
=0

	)

95 
	#GLOBAL_LOCK
(Ë
_globÆ_Êags
 = 
	`•ö_lock_úq_ßve
(&
globÆ_sched_°©e
.
lock
)

	)

96 
	#GLOBAL_UNLOCK
(Ë
	`•ö_u∆ock_úq_ª°‹e
(&
globÆ_sched_°©e
.
lock
,
_globÆ_Êags
)

	)

98 
	#LOCAL_LOCK_CONF
 
uöt8_t
 
_loˇl_Êags
=0

	)

99 
	#LOCAL_LOCK
(
s
Ë
_loˇl_Êags
 = 
	`•ö_lock_úq_ßve
(&((s)->
lock
))

	)

100 
	#LOCAL_UNLOCK
(
s
Ë
	`•ö_u∆ock_úq_ª°‹e
(&((s)->
lock
),
_loˇl_Êags
)

	)

102 #i‡
SANITY_CHECKS


103 
	#PAD
 0

	)

104 
	#MALLOC
(
x
Ë({ *
p
 = 
	`mÆloc
((x)+2*
PAD
); i‡(!pË{ 
	`∑nic
("FaûedÅÿAŒoˇã %d byãs\n",x); } 
	`mem£t
’,0,(x)+2*PAD);Ö+PAD; })

	)

105 
	#FREE
(
x
Ëdÿ{i‡(xË{ 
	`‰ì
(x-
PAD
); x=0;} } 0)

	)

107 
	#MALLOC
(
x
Ë
	`mÆloc
(x)

	)

108 
	#FREE
(
x
Ë
	`‰ì
(x)

	)

111 
	#ZERO
(
x
Ë
	`mem£t
(x, 0, (*x))

	)

119 
	snk_sched_globÆ_°©e
 {

120 
•ölock_t
 
	mlock
;

121 
π_li°
 *
	mthªad_li°
;

122 
uöt64_t
 
	mnum_thªads
;

123 
	mª≠ög
;

126 vﬁ©ûê
uöt64_t
 
	gsync_cou¡
=0;

127 vﬁ©ûê
uöt64_t
 
	gtsc_°¨t
=-1ULL;

129 
nk_sched_globÆ_°©e
 
	gglobÆ_sched_°©e
;

135 
nk_sched_thªad_°©e
 
	tπ_thªad
;

136 
	sπ_node
 {

137 
π_thªad
 *
	mthªad
;

138 
π_node
 *
	m√xt
;

139 
π_node
 *
	m¥ev
;

140 } 
	tπ_node
;

142 
π_node
* 
π_node_öô
(
π_thªad
 *
t
);

143 
π_node_deöô
(
π_node
 *
n
);

145 
	sπ_li°
 {

146 
π_node
 *
	mhód
;

147 
π_node
 *
	mèû
;

148 } 
	tπ_li°
;

150 
π_li°
* 
π_li°_öô
();

151 
π_li°_deöô
(
π_li°
 *
l
);

152 
π_li°_íqueue
(
π_li°
 *
l
, 
π_thªad
 *
t
);

153 
π_thªad
* 
π_li°_dequeue
(
π_li°
 *
l
);

154 
π_thªad
* 
π_li°_ªmove
(
π_li°
 *
l
, 
π_node
 *
n
);

155 
π_thªad
* 
π_li°_ªmove_£¨ch
(
π_li°
 *
l
,Ñt_thªad *
t
);

156 
π_li°_m≠
(
π_li°
 *
l
, (*
func
)(
π_thªad
 *
t
, *
¥iv
), *priv);

157 
	`π_li°_em±y
(
π_li°
 *
l
);

161 íum { 
RUNNABLE_QUEUE
 = 0,

162 
PENDING_QUEUE
 = 1,

163 
APERIODIC_QUEUE
 = 2} 
	tqueue_ty≥
;

168 
	sπ_queue
 {

169 
queue_ty≥
 
ty≥
;

170 
uöt64_t
 
size
;

171 
uöt64_t
 
hód
;

172 
uöt64_t
 
èû
;

173 
π_thªad
 *
thªads
[
MAX_QUEUE
];

174 } 
	tπ_queue
 ;

176 
	`π_queue_íqueue
(
π_queue
 *
queue
, 
π_thªad
 *
thªad
);

177 
π_thªad
* 
	`π_queue_dequeue
(
π_queue
 *
queue
);

178 
π_thªad
* 
	`π_queue_≥ek
(
π_queue
 *
queue
, 
uöt64_t
 
pos
);

179 
π_thªad
* 
	`π_queue_ªmove
(
π_queue
 *
queue
,Ñt_thªad *
thªad
);

180 
	`π_queue_em±y
(
π_queue
 *
queue
);

181 
	`π_queue_dump
(
π_queue
 *
queue
, *
¥e
);

191 
	sπ_¥i‹ôy_queue
 {

192 
queue_ty≥
 
ty≥
;

193 
uöt64_t
 
size
;

194 
π_thªad
 *
thªads
[
MAX_QUEUE
];

195 } 
	tπ_¥i‹ôy_queue
 ;

197 
	`π_¥i‹ôy_queue_íqueue
(
π_¥i‹ôy_queue
 *
queue
, 
π_thªad
 *
thªad
);

198 
π_thªad
* 
	`π_¥i‹ôy_queue_dequeue
(
π_¥i‹ôy_queue
 *
queue
);

199 
π_thªad
* 
	`π_¥i‹ôy_queue_≥ek
(
π_¥i‹ôy_queue
 *
queue
, 
uöt64_t
 
pos
);

200 
π_thªad
* 
	`π_¥i‹ôy_queue_ªmove
(
π_¥i‹ôy_queue
 *
queue
,Ñt_thªad *
thªad
);

201 
	`π_¥i‹ôy_queue_em±y
(
π_¥i‹ôy_queue
 *
queue
);

202 
	`π_¥i‹ôy_queue_dump
(
π_¥i‹ôy_queue
 *
queue
, *
¥e
);

208 
	stsc_öfo
 {

209 
uöt64_t
 
sync_time
;

210 
uöt64_t
 
sync_time_cy˛es
;

211 
uöt64_t
 
£t_time
;

212 
uöt64_t
 
°¨t_time
;

213 
uöt64_t
 
íd_time
;

214 } 
	ttsc_öfo
;

217 
	snk_sched_≥r˝u_°©e
 {

218 
•ölock_t
 
lock
;

219 
nk_sched_c⁄fig
 
cfg
;

220 
π_thªad
 *
cuºít
;

221 
π_¥i‹ôy_queue
 
ru¬abÀ
;

222 
π_¥i‹ôy_queue
 
≥ndög
;

223 #i‡
NAUT_CONFIG_APERIODIC_ROUND_ROBIN


224 
π_queue
 
≠îiodic
;

226 #i‡
NAUT_CONFIG_APERIODIC_LOTTERY


227 
uöt64_t
 
tŸÆ_¥ob
;

228 
π_queue
 
≠îiodic
;

230 #i‡
NAUT_CONFIG_APERIODIC_DYNAMIC_LIFETIME
 || 
NAUT_CONFIG_APERIODIC_DYNAMIC_QUANTUM


231 
π_¥i‹ôy_queue
 
≠îiodic
;

234 
tsc_öfo
 
tsc
;

236 
uöt64_t
 
¶ack
;

238 
uöt64_t
 
num_the·s
;

240 #i‡
INSTRUMENT


241 
uöt64_t
 
ªsched_Á°_num
;

242 
uöt64_t
 
ªsched_Á°_sum
;

243 
uöt64_t
 
ªsched_Á°_sum2
;

244 
uöt64_t
 
ªsched_Á°_mö
;

245 
uöt64_t
 
ªsched_Á°_max
;

246 
uöt64_t
 
ªsched_¶ow_num
;

247 
uöt64_t
 
ªsched_¶ow_sum
;

248 
uöt64_t
 
ªsched_¶ow_sum2
;

249 
uöt64_t
 
ªsched_¶ow_mö
;

250 
uöt64_t
 
ªsched_¶ow_max
;

251 
uöt64_t
 
ªsched_¶ow_noswôch_num
;

252 
uöt64_t
 
ªsched_¶ow_noswôch_sum
;

253 
uöt64_t
 
ªsched_¶ow_noswôch_sum2
;

254 
uöt64_t
 
ªsched_¶ow_noswôch_mö
;

255 
uöt64_t
 
ªsched_¶ow_noswôch_max
;

258 } 
	tπ_scheduÀr
;

260 #i‡
INSTRUMENT


261 
	#INST_SCHED_IN
(
WHAT
Ë
uöt64_t
 
_ö°_°¨t
 = 
	`rdtsc
()

	)

262 
	#INST_SCHED_OUT
(
WHAT
) \

264 
uöt64_t
 
ö°_diff
 = 
	`rdtsc
(Ë- 
_ö°_°¨t
; \

265 
scheduÀr
->
WHAT
 ## 
_num
++; \

266 
scheduÀr
->
WHAT
##
_sum
+=
ö°_diff
; \

267 
scheduÀr
->
WHAT
##
_sum2
+=
ö°_diff
*inst_diff; \

268 i‡(
scheduÀr
->
WHAT
##
_max
 < 
ö°_diff
) { \

269 
scheduÀr
->
WHAT
##
_max
 = 
ö°_diff
; \

271 i‡(!
scheduÀr
->
WHAT
##
_mö
 || scheduÀr->WHAT##_mö > 
ö°_diff
) { \

272 
scheduÀr
->
WHAT
##
_mö
 = 
ö°_diff
; \

274 
	}

	)
}

276 
	#INST_DUMP
(
WHAT
,
BUF
,
LEN
) \

277 
	`¢¥ötf
(
BUF
,
LEN
,"+Ñf:(n=%lu,a=%lu,v=%lu,m=%lu,M=%lu)Ñs:(n=%lu,a=%lu,v=%lu,m=%lu,M=%lu)Ñs-ns:(n=%lu,a=%lu,v=%lu,m=%lu,M=%lu)\n", \

278 
WHAT
->
ªsched_Á°_num
, \

279 
WHAT
->
ªsched_Á°_num
>0 ? WHAT->
ªsched_Á°_sum
/WHAT->resched_fast_num : 0, \

280 
WHAT
->
ªsched_Á°_num
>0 ? ((WHAT->
ªsched_Á°_sum2
)-(WHAT->
ªsched_Á°_sum
*WHAT->resched_fast_sum)/WHAT->resched_fast_num)/WHAT->resched_fast_num : 0, \

281 
WHAT
->
ªsched_Á°_mö
, \

282 
WHAT
->
ªsched_Á°_max
, \

283 
WHAT
->
ªsched_¶ow_num
, \

284 
WHAT
->
ªsched_¶ow_num
>0 ? WHAT->
ªsched_¶ow_sum
/WHAT->resched_slow_num : 0, \

285 
WHAT
->
ªsched_¶ow_num
>0 ? ((WHAT->
ªsched_¶ow_sum2
)-(WHAT->
ªsched_¶ow_sum
*WHAT->resched_slow_sum)/WHAT->resched_slow_num)/WHAT->resched_slow_num : 0, \

286 
WHAT
->
ªsched_¶ow_mö
, \

287 
WHAT
->
ªsched_¶ow_max
, \

288 
WHAT
->
ªsched_¶ow_noswôch_num
, \

289 
WHAT
->
ªsched_¶ow_noswôch_num
>0 ? WHAT->
ªsched_¶ow_noswôch_sum
/WHAT->resched_slow_noswitch_num : 0, \

290 
WHAT
->
ªsched_¶ow_noswôch_num
>0 ? ((WHAT->
ªsched_¶ow_noswôch_sum2
)-(WHAT->
ªsched_¶ow_noswôch_sum
*WHAT->resched_slow_noswitch_sum)/WHAT->resched_slow_noswitch_num)/WHAT->resched_slow_noswitch_num : 0, \

291 
WHAT
->
ªsched_¶ow_noswôch_mö
, \

292 
WHAT
->
ªsched_¶ow_noswôch_max
); \

293 

	)

295 
	#INST_SCHED_IN
(
s
)

	)

296 
	#INST_SCHED_OUT
(
s
)

	)

297 
	#INST_DUMP
(
s
,
b
,
n
)

	)

301 #i‡
NAUT_CONFIG_APERIODIC_ROUND_ROBIN
 || 
NAUT_CONFIG_APERIODIC_LOTTERY


308 #i‡
NAUT_CONFIG_APERIODIC_ROUND_ROBIN


309 
	#GET_NEXT_APERIODIC
(
s
Ë
	`round_robö_gë_√xt_≠îiodic
(s)

	)

310 
	#PUT_APERIODIC
(
s
,
t
Ë
	`round_robö_put_≠îiodic
(s,t)

	)

311 
	#REMOVE_APERIODIC
(
s
,
t
Ë
	`round_robö_ªmove_≠îiodic
(s,t)

	)

313 
	#GET_NEXT_APERIODIC
(
s
Ë
	`lŸãry_gë_√xt_≠îiodic
(s)

	)

314 
	#PUT_APERIODIC
(
s
,
t
Ë
	`lŸãry_put_≠îiodic
(s,t)

	)

315 
	#REMOVE_APERIODIC
(
s
,
t
Ë
	`lŸãry_ªmove_≠îiodic
(s,t)

	)

317 
	#HAVE_APERIODIC
(
s
Ë(!
	`π_queue_em±y
(&(s)->
≠îiodic
))

	)

318 #ifde‡
NAUT_CONFIG_DEBUG_SCHED


319 #i‡
DUMP_SCHED_STATE


320 
	#DUMP_APERIODIC
(
s
,
p
Ë
	`π_queue_dump
(&(s)->
≠îiodic
,p)

	)

322 
	#DUMP_APERIODIC
(
s
,
p
)

	)

325 
	#DUMP_APERIODIC
(
s
,
p
)

	)

327 
	#PEEK_APERIODIC
(
s
,
k
Ë
	`π_queue_≥ek
(&(s)->
≠îiodic
,k)

	)

328 
	#SIZE_APERIODIC
(
s
Ë((s)->
≠îiodic
.
size
)

	)

330 
	#GET_NEXT_APERIODIC
(
s
Ë
	`π_¥i‹ôy_queue_dequeue
(&(s)->
≠îiodic
)

	)

331 
	#PUT_APERIODIC
(
s
,
t
Ë
	`π_¥i‹ôy_queue_íqueue
(&(s)->
≠îiodic
,t)

	)

332 
	#REMOVE_APERIODIC
(
s
,
t
Ë
	`π_¥i‹ôy_queue_ªmove
(&(s)->
≠îiodic
,t)

	)

333 
	#PEEK_APERIODIC
(
s
,
k
Ë
	`π_¥i‹ôy_queue_≥ek
(&(s)->
≠îiodic
,k)

	)

334 
	#SIZE_APERIODIC
(
s
Ë((s)->
≠îiodic
.
size
)

	)

335 
	#HAVE_APERIODIC
(
s
Ë(!
	`π_¥i‹ôy_queue_em±y
(&(s)->
≠îiodic
))

	)

336 #ifde‡
NAUT_CONFIG_DEBUG_SCHED


337 #i‡
DUMP_SCHED_STATE


338 
	#DUMP_APERIODIC
(
s
,
p
Ë
	`π_¥i‹ôy_queue_dump
(&(s)->
≠îiodic
,p)

	)

340 
	#DUMP_APERIODIC
(
s
,
p
)

	)

343 
	#DUMP_APERIODIC
(
s
,
p
)

	)

347 
	#GET_NEXT_RT_PENDING
(
s
Ë
	`π_¥i‹ôy_queue_dequeue
(&(s)->
≥ndög
)

	)

348 
	#PUT_RT_PENDING
(
s
,
t
Ë
	`π_¥i‹ôy_queue_íqueue
(&(s)->
≥ndög
,t)

	)

349 
	#REMOVE_RT_PENDING
(
s
,
t
Ë
	`π_¥i‹ôy_queue_ªmove
(&(s)->
≥ndög
,t)

	)

350 
	#HAVE_RT_PENDING
(
s
Ë(!
	`π_¥i‹ôy_queue_em±y
(&(s)->
≥ndög
))

	)

351 
	#PEEK_RT_PENDING
(
s
Ë(s->
≥ndög
.
thªads
[0])

	)

352 #ifde‡
NAUT_CONFIG_DEBUG_SCHED


353 #i‡
DUMP_SCHED_STATE


354 
	#DUMP_RT_PENDING
(
s
,
p
Ë
	`π_¥i‹ôy_queue_dump
(&(s)->
≥ndög
,p)

	)

356 
	#DUMP_RT_PENDING
(
s
,
p
)

	)

359 
	#DUMP_RT_PENDING
(
s
,
p
)

	)

362 
	#GET_NEXT_RT
(
s
Ë
	`π_¥i‹ôy_queue_dequeue
(&(s)->
ru¬abÀ
)

	)

363 
	#PUT_RT
(
s
,
t
Ë
	`π_¥i‹ôy_queue_íqueue
(&(s)->
ru¬abÀ
,t)

	)

364 
	#REMOVE_RT
(
s
,
t
Ë
	`π_¥i‹ôy_queue_ªmove
(&(s)->
ru¬abÀ
,t)

	)

365 
	#HAVE_RT
(
s
Ë(!
	`π_¥i‹ôy_queue_em±y
(&(s)->
ru¬abÀ
))

	)

366 
	#PEEK_RT
(
s
Ë(s->
ru¬abÀ
.
thªads
[0])

	)

367 #ifde‡
NAUT_CONFIG_DEBUG_SCHED


368 #i‡
DUMP_SCHED_STATE


369 
	#DUMP_RT
(
s
,
p
Ë
	`π_¥i‹ôy_queue_dump
(&(s)->
ru¬abÀ
,p)

	)

371 
	#DUMP_RT
(
s
,
p
)

	)

374 
	#DUMP_RT
(
s
,
p
)

	)

383 
nk_sched_c⁄°øöts
 
	tπ_c⁄°øöts
;

384 
nk_sched_c⁄°øöt_ty≥_t
 
	tπ_ty≥
;

386 íum { 
	mARRIVED
,

387 
	mADMITTED
,

388 
	mCHANGING
,

389 
	mYIELDING
,

390 
	mSLEEPING
,

392 
	mEXITING
,

394 
	mDENIED
,

395 } 
	tπ_°©us
;

397 
	snk_sched_thªad_°©e
 {

399 
nk_sched_c⁄°øöts
 
	mc⁄°øöts
;

401 
π_°©us
 
	m°©us
;

403 
queue_ty≥
 
	mq_ty≥
;

405 
	mis_öå
;

407 
uöt64_t
 
	m°¨t_time
;

408 
uöt64_t
 
	mcur_run_time
;

409 
uöt64_t
 
	mrun_time
;

412 
uöt64_t
 
	mdódlöe
;

415 
uöt64_t
 
	mexô_time
;

418 
uöt64_t
 
	m¨rivÆ_cou¡
;

419 
uöt64_t
 
	mªsched_cou¡
;

420 
uöt64_t
 
	mªsched_l⁄g_cou¡
;

421 
uöt64_t
 
	mswôch_ö_cou¡
;

422 
uöt64_t
 
	mmiss_cou¡
;

423 
uöt64_t
 
	mmiss_time_sum
;

424 
uöt64_t
 
	mmiss_time_sum2
;

427 
nk_thªad
 *
	mthªad
;

430 
π_node
 *
	mli°
;

432 } 
	tπ_thªad
 ;

434 
π_thªad_dump
(
π_thªad
 *
thªad
, *
¥efix
);

435 
π_thªad_admô
(
π_scheduÀr
 *
scheduÀr
, 
π_thªad
 *
thªad
, 
uöt64_t
 
now
);

436 
π_thªad_check_dódlöes
(
π_thªad
 *
t
, 
π_scheduÀr
 *
scheduÀr
, 
uöt64_t
 
now
);

437 
π_thªad_upd©e_≥riodic
(
π_thªad
 *
t
, 
π_scheduÀr
 *
scheduÀr
, 
uöt64_t
 
now
);

438 
π_thªad_upd©e_•‹adic
(
π_thªad
 *
t
, 
π_scheduÀr
 *
scheduÀr
, 
uöt64_t
 
now
);

439 
π_thªad_upd©e_≠îiodic
(
π_thªad
 *
thªad
, 
π_scheduÀr
 *
scheduÀr
, 
uöt64_t
 
now
);

443 
uöt64_t
 
cur_time
();

446 
£t_timî
(
π_scheduÀr
 *
scheduÀr
,

447 
π_thªad
 *
thªad
,

448 
uöt64_t
 
now
);

450 
h™dÀ_•ecül_swôch
(
π_°©us
 
wh©
, 
have_lock
, 
uöt8_t
 
Êags
, 
•ölock_t
 *
lock_to_ªÀa£
);

452 
ölöe
 
uöt64_t
 
gë_mö_≥r
(
π_¥i‹ôy_queue
 *
ru¬abÀ
,Ñt_¥i‹ôy_queuê*
queue
, 
π_thªad
 *
thªad
);

453 
ölöe
 
uöt64_t
 
gë_avg_≥r
(
π_¥i‹ôy_queue
 *
ru¬abÀ
,Ñt_¥i‹ôy_queuê*
≥ndög
, 
π_thªad
 *
thªad
);

454 
ölöe
 
uöt64_t
 
gë_≥riodic_utû_rms_limô
(uöt64_à
cou¡
);

455 
ölöe
 
gë_≥riodic_utû
(
π_scheduÀr
 *
sched
, 
uöt64_t
 *
utû
, uöt64_à*
cou¡
);

456 
ölöe
 
gë_•‹adic_utû
(
π_scheduÀr
 *
sched
, 
uöt64_t
 
now
, uöt64_à*
utû
, uöt64_à*
cou¡
);

457 
ölöe
 
uöt64_t
 
gë_øndom
();

461 
	$¥öt_thªad
(
π_thªad
 *
r
, *
¥iv
)

463 
nk_thªad_t
 * 
t
 = 
r
->
thªad
;

464 
˝u
 = ()(
uöt64_t
)
¥iv
;

466 
	#US
(
ns
Ë(“s)/1000ULL)

	)

467 
	#MS
(
ns
Ë(“s)/1000000ULL)

	)

469 
	#CO
(
ns
Ë
	`MS
“s)

	)

471 i‡(
˝u
==
t
->
cuºít_˝u
 || cpu<0) {

473 
	`nk_vc_¥ötf
("%llut %lur %lluc%s %s %s %s %llus %lluc %llur %llud %llue",

474 
t
->
tid
,

475 
t
->
ªfcou¡
,

476 
t
->
cuºít_˝u
,

477 
t
->
bound_˝u
>=0 ? "b" : "",

478 
t
->
is_idÀ
 ? "(idÀ)" :Å->
«me
[0]==0 ? "(noname)" :Å->name,

479 
t
->
°©us
==
NK_THR_INIT
 ? "ini" :

480 
t
->
°©us
==
NK_THR_RUNNING
 ? "RUN" :

481 
t
->
°©us
==
NK_THR_WAITING
 ? "wai" :

482 
t
->
°©us
==
NK_THR_SUSPENDED
 ? "sus" :

483 
t
->
°©us
==
NK_THR_EXITED
 ? "exi" : "UNK",

484 
r
->
°©us
==
ARRIVED
 ? "arr" :

485 
r
->
°©us
==
ADMITTED
 ? "adm" :

486 
r
->
°©us
==
CHANGING
 ? "cha" :

487 
r
->
°©us
==
YIELDING
 ? "yie" :

488 
r
->
°©us
==
EXITING
 ? "exi" :

489 
r
->
°©us
==
SLEEPING
 ? "sle" :

490 
r
->
°©us
==
DENIED
 ? "den" : "UNK",

491 
	`CO
(
r
->
°¨t_time
),

492 
	`CO
(
r
->
cur_run_time
),

493 
	`CO
(
r
->
run_time
),

494 
	`CO
(
r
->
dódlöe
),

495 
	`CO
(
r
->
exô_time
));

497 
r
->
c⁄°øöts
.
ty≥
) {

498 
APERIODIC
:

499 
	`nk_vc_¥ötf
("á≥riodic(%uç, %Œu)", 
r
->
c⁄°øöts
.
öãºu±_¥i‹ôy_˛ass
,
	`CO
‘->c⁄°øöts.
≠îiodic
.
¥i‹ôy
));

501 
SPORADIC
:

502 
	`nk_vc_¥ötf
(" sp‹adic(%uç, %Œu)", 
r
->
c⁄°øöts
.
öãºu±_¥i‹ôy_˛ass
,
	`CO
‘->c⁄°øöts.
•‹adic
.
size
));

504 
PERIODIC
:

505 
	`nk_vc_¥ötf
("Öîiodic(%uç, %Œu,%Œu)", 
r
->
c⁄°øöts
.
öãºu±_¥i‹ôy_˛ass
,
	`CO
‘->c⁄°øöts.
≥riodic
.
≥riod
), CO‘->c⁄°øöts.≥riodic.
¶i˚
));

509 
	`nk_vc_¥ötf
(" stats: %llua %llure %llurl %llusw %llum",

510 
r
->
¨rivÆ_cou¡
,

511 
r
->
ªsched_cou¡
,

512 
r
->
ªsched_l⁄g_cou¡
,

513 
r
->
swôch_ö_cou¡
,

514 
r
->
miss_cou¡
);

516 
	`nk_vc_¥ötf
("\n");

519 
	}
}

522 
uöt64_t
 
	gª≠_cou¡
;

523 
π_thªad
 *
	gª≠_poﬁ
[
MAX_QUEUE
];

525 
	$¥e_ª≠_thªad
(
π_thªad
 *
r
, *
¥iv
)

527 
nk_thªad_t
 * 
t
 = 
r
->
thªad
;

528 
π_node
 * 
ãmp
;

530 i‡(
ª≠_cou¡
<
MAX_QUEUE
 && !
t
->
ªfcou¡
 &&Å->
°©us
==
NK_THR_EXITED
 && 
r
->°©us==
EXITING
) {

531 
	`DEBUG
("RópögÅid %Œu (%s)\n",
t
->
tid
,t->
«me
);

532 
ª≠_poﬁ
[
ª≠_cou¡
++] = 
r
;

534 
	}
}

537 
	$nk_sched_dump_c‹es
(
˝u_¨g
)

539 
LOCAL_LOCK_CONF
;

541 
˝u
;

543 *
öå_modñ
="UNK";

545 #ifde‡
NAUT_CONFIG_INTERRUPT_THREAD


546 #ifde‡
NAUT_CONFIG_INTERRUPT_THREAD_ALLOW_IDLE


547 
öå_modñ
 = "it+ii";

549 
öå_modñ
 = "it";

552 
öå_modñ
 = "ip";

555 
sys_öfo
 * 
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

556 
π_scheduÀr
 *
s
;

558 
˝u
=0;˝u<
sys
->
num_˝us
;cpu++) {

559 i‡(
˝u_¨g
<0 || cpu_¨g==
˝u
) {

560 
buf
[256];

561 
≠ic_dev
 *
≠ic
 = 
sys
->
˝us
[
˝u
]->apic;

563 
s
 = 
sys
->
˝us
[
˝u
]->
sched_°©e
;

564 
	`LOCAL_LOCK
(
s
);

565 
	`¢¥ötf
(
buf
,256,"%dc %s %unl %luin %luex %lut %s %utp %lup %lur %lua %lum (%s) (%luul %lusp %luap %luaq %luadp) (%luapic)\n",

566 
˝u
,

567 
öå_modñ
,

568 
sys
->
˝us
[
˝u
]->
öãºu±_√°ög_Àvñ
,

569 
sys
->
˝us
[
˝u
]->
öãºu±_cou¡
,

570 
sys
->
˝us
[
˝u
]->
ex˚±i⁄_cou¡
,

571 
s
->
cuºít
->
thªad
->
tid
,

572 
s
->
cuºít
->
thªad
->
is_idÀ
 ? "(idÀ)" : s->cuºít->thªad->
«me
[0] ? s->current->thread->name : "(noname)",

573 
s
->
cuºít
->
thªad
->
sched_°©e
->
c⁄°øöts
.
öãºu±_¥i‹ôy_˛ass
,

574 
s
->
≥ndög
.
size
, s->
ru¬abÀ
.size, s->
≠îiodic
.size,

575 
s
->
num_the·s
,

577 #i‡
NAUT_CONFIG_APERIODIC_ROUND_ROBIN


581 #i‡
NAUT_CONFIG_APERIODIC_DYNAMIC_QUANTUM


585 #i‡
NAUT_CONFIG_APERIODIC_DYNAMIC_LIFETIME


589 #i‡
NAUT_CONFIG_APERIODIC_LOTTERY


592 
s
->
cfg
.
utû_limô
,

593 
s
->
cfg
.
•‹adic_ª£rv©i⁄
, s->cfg.
≠îiodic_ª£rv©i⁄
,

594 
s
->
cfg
.
≠îiodic_qu™tum
, s->cfg.
≠îiodic_deÁu…_¥i‹ôy
,

595 
≠ic
->
timî_cou¡
);

596 #i‡
INSTRUMENT


597 
buf2
[256];

598 
	`INST_DUMP
(
s
,
buf2
,256);

600 
	`LOCAL_UNLOCK
(
s
);

602 
	`nk_vc_¥ötf
(
buf
);

603 #i‡
INSTRUMENT


604 
	`nk_vc_¥ötf
(
buf2
);

608 
	}
}

610 
	$nk_sched_dump_time
(
˝u_¨g
)

612 
˝u
;

614 
sys_öfo
 * 
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

615 
tsc_öfo
 *
tsc0
 = &
sys
->
˝us
[0]->
sched_°©e
->
tsc
;

617 
˝u
=0;˝u<
sys
->
num_˝us
;cpu++) {

618 i‡(
˝u_¨g
<0 || cpu_¨g==
˝u
) {

620 
≠ic_dev
 *
≠ic
 = 
sys
->
˝us
[
˝u
]->apic;

621 
tsc_öfo
 *
tsc
 = &
sys
->
˝us
[
˝u
]->
sched_°©e
->tsc;

623 
	`nk_vc_¥ötf
("%dc %luhz %luppt %lucpu %lucpt %luts %luct %lutc %lust %lustc %ldstr %ldstrc\n",

624 
˝u
, 
≠ic
->
bus_‰eq_hz
,ápic->
ps_≥r_tick
,

625 
≠ic
->
cy˛es_≥r_us
,ápic->
cy˛es_≥r_tick
,

626 
≠ic
->
timî_£t
,ápic->
cuºít_ticks
,ápic->
timî_cou¡
,

627 
tsc
->
sync_time
,Åsc->
sync_time_cy˛es
,

628 
tsc
->
sync_time
 - 
tsc0
->sync_time,

629 
tsc
->
sync_time_cy˛es
 - 
tsc0
->sync_time_cycles);

632 
	}
}

634 
	$nk_sched_dump_thªads
(
˝u
)

636 
GLOBAL_LOCK_CONF
;

637 
sys_öfo
 *
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

638 
≠ic_dev
 *
≠ic
 = 
sys
->
˝us
[
	`my_˝u_id
()]->apic;

640 
	`GLOBAL_LOCK
();

642 
	`π_li°_m≠
(
globÆ_sched_°©e
.
thªad_li°
,
¥öt_thªad
,(*)()
˝u
);

644 
	`GLOBAL_UNLOCK
();

645 
	}
}

647 
	sthªad_quîy
 {

648 
uöt64_t
 
	mtid
;

649 
nk_thªad_t
 *
	mthªad
;

652 
	$föd_thªad
(
π_thªad
 *
r
, *
¥iv
)

654 
nk_thªad_t
 * 
t
 = 
r
->
thªad
;

655 
thªad_quîy
 *
q
 = (thªad_quîy *)
¥iv
;

657 i‡(
t
->
tid
 =
q
->tid) {

658 
q
->
thªad
 = 
t
;

660 
	}
}

663 
nk_thªad
 *
	$nk_föd_thªad_by_tid
(
uöt64_t
 
tid
)

665 
GLOBAL_LOCK_CONF
;

666 
sys_öfo
 *
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

667 
≠ic_dev
 *
≠ic
 = 
sys
->
˝us
[
	`my_˝u_id
()]->apic;

668 
thªad_quîy
 
q
;

670 
q
.
tid
=tid;

671 
q
.
thªad
=0;

673 
	`GLOBAL_LOCK
();

675 
	`π_li°_m≠
(
globÆ_sched_°©e
.
thªad_li°
,
föd_thªad
,(*)&
q
);

677 
	`GLOBAL_UNLOCK
();

679  
q
.
thªad
;

680 
	}
}

682 
	$nk_sched_ª≠
(
unc⁄d
)

684 
GLOBAL_LOCK_CONF
;

685 
sys_öfo
 *
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

686 
≠ic_dev
 *
≠ic
 = 
sys
->
˝us
[
	`my_˝u_id
()]->apic;

687 
uöt64_t
 
i
;

689 i‡(!
unc⁄d
 && 
globÆ_sched_°©e
.
num_thªads
 < ((
NAUT_CONFIG_MAX_THREADS
 * 95)/100)) {

695 i‡(!
	`__sync_boﬁ_com∑ª_™d_sw≠
(&
globÆ_sched_°©e
.
ª≠ög
,0,1)) {

700 
ª≠_cou¡
 = 0;

702 
	`GLOBAL_LOCK
();

707 
	`π_li°_m≠
(
globÆ_sched_°©e
.
thªad_li°
,
¥e_ª≠_thªad
,0);

709 
	`GLOBAL_UNLOCK
();

712 
i
=0;i<
ª≠_cou¡
;i++) {

713 
	`nk_thªad_de°roy
(
ª≠_poﬁ
[
i
]->
thªad
);

717 
globÆ_sched_°©e
.
ª≠ög
 = 0;

718 
	}
}

720 
	$nk_sched_thªad_°©e_deöô
(
nk_thªad
 *
thªad
)

722 
	`FREE
(
thªad
->
sched_°©e
);

723 
thªad
->
sched_°©e
=0;

724 
	}
}

726 
nk_sched_thªad_°©e
 *
	$nk_sched_thªad_°©e_öô
(
nk_thªad
 *
thªad
,

727 
nk_sched_c⁄°øöts
 *
c⁄°øöts
)

729 
nk_sched_thªad_°©e
 *
t
 = (nk_sched_thªad_°©ê*)
	`MALLOC
((nk_sched_thread_state));

730 
sys_öfo
 *
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

731 
π_scheduÀr
 *
sched
 = 
sys
->
˝us
[
	`my_˝u_id
()]->
sched_°©e
;

732 
nk_sched_c⁄°øöts
 *
c
;

733 
nk_sched_c⁄°øöts
 
deÁu…_c⁄°øöts
 =

734 { .
ty≥
 = 
APERIODIC
,

735 .
≠îiodic
.
¥i‹ôy
 = 
sched
->
cfg
.
≠îiodic_deÁu…_¥i‹ôy
 };

737 i‡(!
t
) {

738 
	`ERROR
("Cannotállocate schedulerÅhread state\n");

739  
NULL
;

742 
	`ZERO
(
t
);

744 i‡(!
c⁄°øöts
) {

745 
c⁄°øöts
 = &
deÁu…_c⁄°øöts
;

748 
t
->
c⁄°øöts
 = *constraints;

750 
c
 = &
t
->
c⁄°øöts
;

752 
t
->
°©us
 = 
ARRIVED
;

754 
t
->
°¨t_time
 = 0;

755 
t
->
run_time
 = 0;

756 
t
->
dódlöe
 = 0;

759 i‡(
c
->
ty≥
 =
PERIODIC
) {

760 
t
->
dódlöe
 = 
	`cur_time
(Ë+ 
c
->
≥riodic
.
≥riod
;

761 } i‡(
c
->
ty≥
 =
SPORADIC
) {

762 
t
->
dódlöe
 = 
	`cur_time
(Ë+ 
c
->
•‹adic
.deadline;

765 
t
->
thªad
 =Åhread;

767  
t
;

768 
	}
}

770 
	$öôül_∂a˚mít
(
nk_thªad_t
 *
t
)

772 i‡(
t
->
bound_˝u
>=0) {

773  
t
->
bound_˝u
;

775 
sys_öfo
 * 
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

776  ()(
	`gë_øndom
(Ë% 
sys
->
num_˝us
);

778 
	}
}

780 
	$nk_sched_thªad_po°_¸óã
(
nk_thªad_t
 * 
t
)

782 
GLOBAL_LOCK_CONF
;

784 
	`nk_sched_ª≠
(0);

786 
t
->
cuºít_˝u
 = 
	`öôül_∂a˚mít
(t);

788 
	`GLOBAL_LOCK
();

790 i‡(
	`π_li°_íqueue
(
globÆ_sched_°©e
.
thªad_li°
, 
t
->
sched_°©e
)) {

791 
	`ERROR
("FailedÅoáddÇewÅhreadÅo globalÅhreadÜist\n");

792 
	`GLOBAL_UNLOCK
();

795 
globÆ_sched_°©e
.
num_thªads
++;

797 
	`DEBUG
("Post Create ofÅhread %p (%d) [numthreads=%d]\n",

798 
t
,Å->
tid
, 
globÆ_sched_°©e
.
num_thªads
);

800 
	`GLOBAL_UNLOCK
();

802 
	}
}

805 
	$nk_sched_thªad_¥e_de°roy
(
nk_thªad_t
 * 
t
)

807 
π_thªad
 *
r
;

808 
GLOBAL_LOCK_CONF
;

810 
	`GLOBAL_LOCK
();

812 i‡(!(
r
=
	`π_li°_ªmove
(
globÆ_sched_°©e
.
thªad_li°
,
t
->
sched_°©e
->
li°
))) {

813 
	`ERROR
("FailedÅoÑemoveÅhread from globalÜist....\n");

814 
	`GLOBAL_UNLOCK
();

818 
globÆ_sched_°©e
.
num_thªads
--;

820 
	`GLOBAL_UNLOCK
();

822 
	`‰ì
(
r
);

825 
	}
}

827 #i‡
NAUT_CONFIG_APERIODIC_ROUND_ROBIN


829 
ölöe
 
	$round_robö_put_≠îiodic
(
π_scheduÀr
 *
s
, 
π_thªad
 *
t
)

831  
	`π_queue_íqueue
(&
s
->
≠îiodic
,
t
);

832 
	}
}

834 
ölöe
 
π_thªad
 *
	$round_robö_gë_√xt_≠îiodic
(
π_scheduÀr
 *
s
)

836 
π_thªad
 *
r
 = 
	`π_queue_dequeue
(&
s
->
≠îiodic
);

839 i‡(
r
->
thªad
->
is_idÀ
 && 
s
->
≠îiodic
.
size
>=1) {

840 
	`π_queue_íqueue
(&
s
->
≠îiodic
,
r
);

841 
r
 = 
	`π_queue_dequeue
(&
s
->
≠îiodic
);

844  
r
;

845 
	}
}

847 
ölöe
 
π_thªad
 *
	$round_robö_ªmove_≠îiodic
(
π_scheduÀr
 *
s
, 
π_thªad
 *
t
)

849  
	`π_queue_ªmove
(&
s
->
≠îiodic
,
t
);

850 
	}
}

854 
ölöe
 
uöt64_t
 
	$gë_øndom
()

856 
uöt64_t
 
t
;

857 
	`nk_gë_ønd_byãs
((
uöt8_t
 *)&
t
,(t));

858  
t
;

859 
	}
}

861 #i‡
NAUT_CONFIG_APERIODIC_LOTTERY


864 
ölöe
 
	$lŸãry_put_≠îiodic
(
π_scheduÀr
 *
s
, 
π_thªad
 *
t
)

866 
rc
 = 
	`π_queue_íqueue
(&
s
->
≠îiodic
,
t
);

868 i‡(!
rc
) {

869 
s
->
tŸÆ_¥ob
 +
t
->
c⁄°øöts
.
≠îiodic
.
¥i‹ôy
;

873  
rc
;

875 
	}
}

878 
ölöe
 
π_thªad
 *
	$lŸãry_gë_√xt_≠îiodic
(
π_scheduÀr
 *
s
)

881 
π_thªad
 *
t
=
NULL
;

882 
uöt64_t
 
cur
;

883 
uöt64_t
 
pos
;

884 
π_queue
 *
q
=&
s
->
≠îiodic
;

885 
uöt64_t
 
èrgë_¥ob
;

886 
uöt64_t
 
cum_¥ob
;

888 
	`ASSERT
(
s
->
tŸÆ_¥ob
);

889 
	`ASSERT
(
q
->
size
);

891 
èrgë_¥ob
 = 
	`gë_øndom
(Ë% 
s
->
tŸÆ_¥ob
;

893 
cur
=0, 
cum_¥ob
=0;

894 
cur
<
q
->
size
;

895 
cur
++) {

896 
pos
 = (
q
->
èû
 + 
cur
Ë% 
MAX_QUEUE
;

897 
cum_¥ob
 +
q
->
thªads
[
pos
]->
c⁄°øöts
.
≠îiodic
.
¥i‹ôy
;

898 i‡(
cum_¥ob
>=
èrgë_¥ob
) {

900 i‡(
q
->
thªads
[
pos
]->
thªad
->
is_idÀ
 && q->
size
>1) {

902 i‡(
cur
<(
q
->
size
-1)) {

904 
cur
++;

908 
cur
--;

911 
pos
 = (
q
->
èû
 + 
cur
Ë% 
MAX_QUEUE
;

917 i‡(
cur
==
q
->
size
) {

918 
	`∑nic
("Cannot findÅhread inÜottery scheduler\n");

923 
t
 = 
q
->
thªads
[
pos
];

930 
uöt64_t
 
i
, 
p
, 
n
;

931 
i
=
cur
;

932 
i
<(
q
->
size
-1);

933 
i
++) {

935 
p
 = (
q
->
èû
 + 
i
Ë% 
MAX_QUEUE
;

936 
n
 = (
q
->
èû
 + 
i
 + 1 ) % 
MAX_QUEUE
;

937 
q
->
thªads
[
p
] = q->thªads[
n
];

941 
q
->
hód
 = (q->hód + 
MAX_QUEUE
 - 1) % MAX_QUEUE;

943 
q
->
size
--;

945 
s
->
tŸÆ_¥ob
 -
t
->
c⁄°øöts
.
≠îiodic
.
¥i‹ôy
;

948  
t
;

949 
	}
}

951 
ölöe
 
π_thªad
 *
	$lŸãry_ªmove_≠îiodic
(
π_scheduÀr
 *
s
, 
π_thªad
 *
t
)

953 
π_thªad
 *
r
 = 
	`π_queue_ªmove
(&
s
->
≠îiodic
,
t
);

955 i‡(
r
) {

956 
s
->
tŸÆ_¥ob
 -
t
->
c⁄°øöts
.
≠îiodic
.
¥i‹ôy
;

959  
r
;

960 
	}
}

964 
	$_sched_make_ru¬abÀ
(
nk_thªad
 *
thªad
, 
˝u
, 
admô
, 
have_lock
)

966 
LOCAL_LOCK_CONF
;

967 
sys_öfo
 * 
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

968 
π_thªad
 *
t
 = 
thªad
->
sched_°©e
;

969 
π_scheduÀr
 *
s
;

971 i‡(
	`u∆ikñy
(
˝u
 <
CPU_ANY
 ||

972 
˝u
 >
sys
->
num_˝us
)) {

973 
s
 = 
	`≥r_˝u_gë
(
sched_°©e
);

975 
s
 = 
sys
->
˝us
[
˝u
]->
sched_°©e
;

978 i‡(!
s
) {

982 i‡(!
have_lock
) {

983 
	`LOCAL_LOCK
(
s
);

986 i‡(
admô
) {

987 i‡(
	`π_thªad_admô
(
s
,
t
,
	`cur_time
())) {

988 
	`DEBUG
("FailedÅoádmitÅhread\n");

989 
out_bad
;

991 
	`DEBUG
("AdmôãdÅhªad %∞—id=%d)\n",
thªad
,thªad->
tid
);

997 
t
->
c⁄°øöts
.
ty≥
) {

998 
APERIODIC
:

999 i‡(
	`PUT_APERIODIC
(
s
,
t
)) {

1000 
	`ERROR
("FaûedÅÿmakên⁄-RTÅhªadÑu¬abÀ (%Œu)\n",
s
->
≠îiodic
.
size
);

1002 
out_bad
;

1004 
thªad
->
°©us
 = 
NK_THR_SUSPENDED
;

1005 
thªad
->
sched_°©e
->
°©us
 = 
ADMITTED
;

1007 
	`DUMP_APERIODIC
(
s
, "aperiodicáfter makeÑunnable");

1008 
out_good
;

1011 
SPORADIC
:

1012 
PERIODIC
:

1013 i‡(
	`PUT_RT_PENDING
(
s
,
t
)) {

1014 
	`ERROR
("FailedÅo make RTÅhreadÖending\n");

1015 
out_bad
;

1017 
thªad
->
°©us
 = 
NK_THR_SUSPENDED
;

1018 
thªad
->
sched_°©e
->
°©us
 = 
ADMITTED
;

1019 
	`DUMP_RT_PENDING
(
s
, "pendingáfter makeÑunnable");

1020 
out_good
;

1025 
out_bad
:

1026 i‡(!
have_lock
) {

1027 
	`LOCAL_UNLOCK
(
s
);

1030 
out_good
:

1031 i‡(!
have_lock
) {

1032 
	`LOCAL_UNLOCK
(
s
);

1035 
	}
}

1037 
	$nk_sched_make_ru¬abÀ
(
nk_thªad
 *
thªad
, 
˝u
, 
admô
)

1039  
	`_sched_make_ru¬abÀ
(
thªad
,
˝u
,
admô
,0);

1040 
	}
}

1043 
	$nk_sched_exô
(
•ölock_t
 *
lock_to_ªÀa£
)

1045 
	`h™dÀ_•ecül_swôch
(
EXITING
,0,0,
lock_to_ªÀa£
);

1047 
	`∑nic
("ReturnedÅo finishedÅhread!\n");

1048 
	}
}

1051 
π_li°
* 
	$π_li°_öô
()

1053 
π_li°
 *
li°
 = (π_li° *)
	`MALLOC
((rt_list));

1054 i‡(
li°
) {

1055 
li°
->
hód
 = 
NULL
;

1056 
li°
->
èû
 = 
NULL
;

1058  
li°
;

1059 
	}
}

1061 
	$π_li°_deöô
(
π_li°
 *
l
)

1063 
π_node
 *
cur
 = 
l
->
hód
;

1064 
π_node
 *
√xt
 = 
l
->
hód
;

1066 
cur
) {

1067 
√xt
 = 
cur
->next;

1068 
	`π_node_deöô
(
cur
);

1069 
cur
 = 
√xt
;

1071 
	`FREE
(
l
);

1072 
	}
}

1075 
π_node
* 
	$π_node_öô
(
π_thªad
 *
t
)

1077 
π_node
 *
node
 = (π_nodê*)
	`MALLOC
((rt_node));

1078 i‡(
node
) {

1079 
node
->
thªad
 = 
t
;

1080 
node
->
√xt
 = 
NULL
;

1081 
node
->
¥ev
 = 
NULL
;

1083  
node
;

1084 
	}
}

1086 
	$π_node_deöô
(
π_node
 *
n
)

1088 
	`FREE
(
n
);

1089 
	}
}

1091 
	$π_li°_em±y
(
π_li°
 *
l
)

1093  (
l
->
hód
 =
NULL
);

1094 
	}
}

1096 
	$π_li°_íqueue
(
π_li°
 *
l
, 
π_thªad
 *
t
)

1098 i‡(
l
 =
NULL
) {

1099 
	`ERROR
("RT_LIST IS UNINITIALIZED.\n");

1103 i‡(
l
->
hód
 =
NULL
) {

1104 
l
->
hód
 = 
	`π_node_öô
(
t
);

1105 i‡(!
l
->
hód
) {

1108 
l
->
èû
 =Ü->
hód
;

1109 
t
->
li°
 = 
l
->
hód
;

1114 
π_node
 *
n
 = 
l
->
èû
;

1115 
l
->
èû
 = 
	`π_node_öô
(
t
);

1116 i‡(!
l
->
èû
) {

1120 
l
->
èû
->
¥ev
 = 
n
;

1121 
n
->
√xt
 = 
l
->
èû
;

1122 
t
->
li°
 = 
l
->
èû
;

1125 
	}
}

1128 
π_thªad
* 
	$π_li°_dequeue
(
π_li°
 *
l
)

1130 i‡(
l
 =
NULL
) {

1131 
	`ERROR
("RT_LIST IS UNINITIALIZED.\n");

1132  
NULL
;

1135 i‡(
l
->
hód
 =
NULL
) {

1136  
NULL
;

1139 
π_node
 *
n
 = 
l
->
hód
;

1140 
π_thªad
 *
t

n
->
thªad
;

1142 
l
->
hód
 = 
n
->
√xt
;

1143 
l
->
hód
->
¥ev
 = 
NULL
;

1144 
n
->
√xt
 = 
NULL
;

1145 
n
->
¥ev
 = 
NULL
;

1146 
	`π_node_deöô
(
n
);

1147 
t
->
li°
 = 0;

1148  
t
;

1149 
	}
}

1151 
π_li°_m≠
(
π_li°
 *
l
, (
func
)(
π_thªad
 *
t
, *
¥iv
), *priv)

1153 
π_node
 *
n
 = 
l
->
hód
;

1154 
n
 !
NULL
) {

1155 
	`func
(
n
->
thªad
,
¥iv
);

1156 
n
 =Ç->
√xt
;

1158 
	}
}

1160 
π_thªad
* 
	$π_li°_ªmove
(
π_li°
 *
l
, 
π_node
 *
n
)

1162 
π_node
 *
tmp
 = 
n
->
√xt
;

1163 
π_thªad
 *
f
;

1165 i‡(
n
->
√xt
 !
NULL
) {

1166 
n
->
√xt
->
¥ev
 =Ç->prev;

1168 
l
->
èû
 = 
n
->
¥ev
;

1170 i‡(
n
->
¥ev
 !
NULL
) {

1171 
n
->
¥ev
->
√xt
 = 
tmp
;

1173 
l
->
hód
 = 
tmp
;

1175 
n
->
√xt
 = 
NULL
;

1176 
n
->
¥ev
 = 
NULL
;

1177 
f
 = 
n
->
thªad
;

1178 
	`π_node_deöô
(
n
);

1179  
f
;

1180 
	}
}

1183 
π_thªad
* 
	$π_li°_ªmove_£¨ch
(
π_li°
 *
l
, 
π_thªad
 *
t
)

1185 
π_node
 *
n
 = 
l
->
hód
;

1186 
n
 !
NULL
) {

1187 i‡(
n
->
thªad
 =
t
) {

1188  
	`π_li°_ªmove
(
l
,
n
);

1190 
n
 =Ç->
√xt
;

1192  
NULL
;

1193 
	}
}

1198 
	$π_queue_íqueue
(
π_queue
 *
queue
, 
π_thªad
 *
thªad
)

1200 i‡(
queue
->
size
==
MAX_QUEUE
) {

1203 
queue
->
thªads
[queue->
hód
] = 
thªad
;

1204 
queue
->
hód
 = (queue->hód + 1 ) % 
MAX_QUEUE
;

1205 
queue
->
size
++;

1208 
	}
}

1210 
π_thªad
* 
	$π_queue_dequeue
(
π_queue
 *
queue
)

1212 i‡(
queue
->
size
==0) {

1215 
π_thªad
 *
r
 = 
queue
->
thªads
[queue->
èû
];

1216 
queue
->
èû
 = (queue->èû+1Ë% 
MAX_QUEUE
;

1217 
queue
->
size
--;

1218  
r
;

1220 
	}
}

1222 
π_thªad
* 
	$π_queue_ªmove
(
π_queue
 *
queue
, 
π_thªad
 *
thªad
)

1224 i‡(
queue
->
size
==0) {

1227 
uöt64_t
 
now
, 
cur
, 
√xt
;

1229 
now
=0;now<
queue
->
size
;now++) {

1230 
cur
 = (
queue
->
èû
 + 
now
Ë% 
MAX_QUEUE
;

1231 i‡(
queue
->
thªads
[
cur
] =
thªad
) {

1236 i‡(
now
==
queue
->
size
) {

1242 ;
now
<
queue
->
size
-1;now++) {

1243 
cur
 = (
queue
->
èû
 + 
now
Ë% 
MAX_QUEUE
;

1244 
√xt
 = (
queue
->
èû
 + 
now
 + 1Ë% 
MAX_QUEUE
;

1245 
queue
->
thªads
[
cur
] = queue->thªads[
√xt
];

1249 
queue
->
hód
 = (queue->hód + 
MAX_QUEUE
 - 1) % MAX_QUEUE;

1251 
queue
->
size
--;

1253  
thªad
;

1255 
	}
}

1257 
π_thªad
 *
	$π_queue_≥ek
(
π_queue
 *
queue
, 
uöt64_t
 
pos
)

1259 i‡(
pos
>=
queue
->
size
) {

1262  
queue
->
thªads
[(queue->
èû
+
pos
)%
MAX_QUEUE
];

1264 
	}
}

1266 
	$π_queue_em±y
(
π_queue
 *
queue
)

1268  
queue
->
size
==0;

1269 
	}
}

1271 
	$π_queue_dump
(
π_queue
 *
queue
, *
¥e
)

1273 
now
;

1274 
cur
;

1275 
	`DEBUG
("======%s==BEGIN=====\n",
¥e
);

1276 
now
=0;now<
queue
->
size
;now++) {

1277 
cur
 = (
queue
->
èû
 + 
now
Ë% 
MAX_QUEUE
;

1278 
	`DEBUG
(" %Œu %†(%Œu)\n",
queue
->
thªads
[
cur
]->
thªad
->
tid
,

1279 
queue
->
thªads
[
cur
]->
thªad
->
is_idÀ
 ? "*idle*" :

1280 
queue
->
thªads
[
cur
]->
thªad
->
«me
[0] ? queue->thªads[cur]->thªad->«mê: "“ÿ«me)" ,queue->thªads[cur]->
dódlöe
);

1282 
	`DEBUG
("======%s==END=====\n",
¥e
);

1283 
	}
}

1285 #i‡
SANITY_CHECKS


1286 
	#∑ª¡
(
i
Ë({ 
uöt64_t
 
_t
 = ((iË? (((iË- 1Ë>> 1Ë: 0); i‡(_t>=
MAX_QUEUE
Ë
	`∑nic
("∑ª¡Åoÿbig\n"); _t; })

	)

1287 
	#À·_chûd
(
i
Ë({ 
uöt64_t
 
_t
 = (((iË<< 1Ë+ 1); i‡(_t>=
MAX_QUEUE
Ë
	`∑nic
("À·Åoÿbig\n"); _t; })

	)

1288 
	#right_chûd
(
i
Ë({ 
uöt64_t
 
_t
 = (((iË<< 1Ë+ 2); i‡(_t>=
MAX_QUEUE
Ë
	`∑nic
("righàtoÿbig\n"); _t; })

	)

1290 
	#∑ª¡
(
i
Ë((iË? (((iË- 1Ë>> 1Ë: 0)

	)

1291 
	#À·_chûd
(
i
Ë(((iË<< 1Ë+ 1)

	)

1292 
	#right_chûd
(
i
Ë(((iË<< 1Ë+ 2)

	)

1295 
	$π_¥i‹ôy_queue_dump
(
π_¥i‹ôy_queue
 *
queue
, *
¥e
)

1297 
now
;

1298 
	`DEBUG
("======%s==BEGIN=====\n",
¥e
);

1299 
now
=0;now<
queue
->
size
;now++) {

1300 
	`DEBUG
(" %Œu %†(%Œu)\n",
queue
->
thªads
[
now
]->
thªad
->
tid
,

1301 
queue
->
thªads
[
now
]->
thªad
->
is_idÀ
 ? "*idle*" :

1302 
queue
->
thªads
[
now
]->
thªad
->
«me
[0] ? queue->thªads[now]->thªad->«mê: "“ÿ«me)" ,queue->thªads[now]->
dódlöe
);

1304 
	`DEBUG
("======%s==END=====\n",
¥e
);

1305 
	}
}

1307 
	$π_¥i‹ôy_queue_íqueue
(
π_¥i‹ôy_queue
 *
queue
, 
π_thªad
 *
thªad
)

1309 i‡(
queue
->
size
 =
MAX_QUEUE
) {

1310 
	`ERROR
("Too manyÅhreads forÖriority queue %s\n",

1311 
queue
->
ty≥
==
RUNNABLE_QUEUE
 ? "Runnable" :

1312 
queue
->
ty≥
==
PENDING_QUEUE
 ? "Pending" :

1313 
queue
->
ty≥
==
APERIODIC_QUEUE
 ? "Aperiodic Runnable" : "UNKNOWN");

1318 
uöt64_t
 
pos
 = 
queue
->
size
++;

1319 
queue
->
thªads
[
pos
] = 
thªad
;

1322 
queue
->
thªads
[
	`∑ª¡
(
pos
)]->
dódlöe
 > 
thªad
->deadline

1323 && 
pos
 !
	`∑ª¡
(pos)) {

1324 
queue
->
thªads
[
pos
] = queue->thªads[
	`∑ª¡
(pos)];

1325 
pos
 = 
	`∑ª¡
(pos);

1328 
thªad
->
q_ty≥
 = 
queue
->
ty≥
;

1329 
queue
->
thªads
[
pos
] = 
thªad
;

1333 
	}
}

1339 
π_thªad
* 
	$π_¥i‹ôy_queue_dequeue
(
π_¥i‹ôy_queue
 *
queue
)

1341 *
q°r
;

1343 i‡(
queue
->
ty≥
 =
RUNNABLE_QUEUE
) {

1344 
q°r
= "Runnable";

1345 } i‡(
queue
->
ty≥
 =
PENDING_QUEUE
) {

1346 
q°r
 = "Pending";

1347 } i‡(
queue
->
ty≥
 =
APERIODIC_QUEUE
) {

1348 
q°r
 = "Aperiodic Runnable";

1350 
	`ERROR
("Unknown Queue\n");

1351  
NULL
;

1354 i‡(
queue
->
size
 < 1) {

1355 
	`ERROR
("%†QUEUE EMPTY! CAN'T DEQUEUE!\n", 
q°r
);

1356  
NULL
;

1359 
π_thªad
 *
mö
, *
œ°
;

1360 
now
, 
chûd
;

1363 
mö
 = 
queue
->
thªads
[0];

1364 
œ°
 = 
queue
->
thªads
[--queue->
size
];

1367 
now
 = 0; 
	`À·_chûd
“owË< 
queue
->
size
;Çow = 
chûd
) {

1369 
chûd
 = 
	`À·_chûd
(
now
);

1371 i‡(
chûd
 < 
queue
->
size
 &&

1372 
queue
->
thªads
[
	`right_chûd
(
now
)]->
dódlöe
 < queue->thªads[
	`À·_chûd
(now)]->deadline) {

1374 
chûd
 = 
	`right_chûd
(
now
);

1377 i‡(
œ°
->
dódlöe
 > 
queue
->
thªads
[
chûd
]->deadline) {

1378 
queue
->
thªads
[
now
] = queue->thªads[
chûd
];

1384 
queue
->
thªads
[
now
] = 
œ°
;

1386  
mö
;

1388 
	}
}

1390 
π_thªad
* 
	$π_¥i‹ôy_queue_ªmove
(
π_¥i‹ôy_queue
 *
queue
, 
π_thªad
 *
thªad
)

1394 
π_¥i‹ôy_queue
 
ãmp
 = *
queue
;

1395 
π_thªad
 *
cur
;

1396 
found
=0;

1398 
queue
->
size
=0;

1400 !
	`π_¥i‹ôy_queue_em±y
(&
ãmp
)) {

1401 
cur
=
	`π_¥i‹ôy_queue_dequeue
(&
ãmp
);

1402 i‡(
cur
 && cur!=
thªad
) {

1403 i‡(
	`π_¥i‹ôy_queue_íqueue
(
queue
,
cur
)) {

1404 
	`ERROR
("FailedÅoÑe-enqueue inÑemovalÖrocess...\n");

1407 
found
 = 1;

1410 i‡(!
found
) {

1413  
thªad
;

1415 
	}
}

1417 
π_thªad
 *
	$π_¥i‹ôy_queue_≥ek
(
π_¥i‹ôy_queue
 *
queue
, 
uöt64_t
 
pos
)

1419 i‡(
pos
>=
queue
->
size
) {

1422  
queue
->
thªads
[
pos
];

1424 
	}
}

1426 
	$π_¥i‹ôy_queue_em±y
(
π_¥i‹ôy_queue
 *
queue
)

1428  
queue
->
size
==0;

1429 
	}
}

1431 
	$π_thªad_dump
(
π_thªad
 *
thªad
, *
¥e
)

1434 i‡(
thªad
->
c⁄°øöts
.
ty≥
 =
PERIODIC
) {

1435 
	`DEBUG
("%s: Thªad %Œu \"%s\" %s: PERIODIC (%Œu, %Œu): START TIME: %Œu RUN TIME: %Œu EXIT TIME: %Œu DEADLINE: %Œu CURRENT TIME: %Œu\n", 
¥e
, 
thªad
->thªad->
tid
,Åhªad->thªad->
«me
,thªad->thªad->
is_idÀ
 ? "*idÀ*" : "",Åhªad->
c⁄°øöts
.
≥riodic
.
≥riod
,Åhªad->c⁄°øöts.≥riodic.
¶i˚
,Åhªad->
°¨t_time
,Åhªad->
run_time
,Åhªad->
exô_time
,Åhªad->
dódlöe
, 
	`cur_time
() );

1436 } i‡(
thªad
->
c⁄°øöts
.
ty≥
 =
SPORADIC
) {

1437 
	`DEBUG
("%s: Thªad %Œu \"%s\" %s: SPORADIC (%Œu): START TIME: %Œu RUN TIME: %Œu EXIT TIME: %Œu DEADLINE: %Œu CURRENT TIME: %Œu\n", 
¥e
, 
thªad
->thªad->
tid
,Åhªad->thªad->
«me
,Åhªad->thªad->
is_idÀ
 ? "*idÀ*" : "",thªad->
c⁄°øöts
.
•‹adic
.
size
,thªad->
°¨t_time
,Åhªad->
run_time
,Åhªad->
exô_time
,Åhªad->
dódlöe
, 
	`cur_time
() );

1439 
	`DEBUG
("%s: Thªad %Œu \"%s\" %s: APERIODIC (%Œu): START TIME: %Œu RUN TIME: %Œu EXIT TIME: %Œu DEADLINE: %Œu CURRENT TIME: %Œu\n", 
¥e
, 
thªad
->thªad->
tid
,Åhªad->thªad->
«me
,Åhªad->thªad->
is_idÀ
 ? "*idÀ*" : "",Åhªad->
c⁄°øöts
.
≠îiodic
.
¥i‹ôy
,Åhªad->
°¨t_time
,Åhªad->
run_time
,Åhªad->
exô_time
,Åhªad->
dódlöe
, 
	`cur_time
() );

1443 
	}
}

1446 
	$£t_timî
(
π_scheduÀr
 *
scheduÀr
, 
π_thªad
 *
thªad
, 
uöt64_t
 
now
)

1448 
sys_öfo
 *
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

1449 
≠ic_dev
 *
≠ic
 = 
sys
->
˝us
[
	`my_˝u_id
()]->apic;

1451 
uöt64_t
 
√xt_¨rivÆ
 = -1;

1452 
uöt64_t
 
√xt_¥ìm±
 = -1;

1454 i‡(
	`HAVE_RT_PENDING
(
scheduÀr
)) {

1456 
√xt_¨rivÆ
 = 
	`PEEK_RT_PENDING
(
scheduÀr
)->
dódlöe
;

1459 i‡(
thªad
) {

1460 
uöt64_t
 
ªmaöög_time
;

1461 
thªad
->
c⁄°øöts
.
ty≥
) {

1462 
APERIODIC
:

1463 
√xt_¥ìm±
 = 
now
 + 
scheduÀr
->
cfg
.
≠îiodic_qu™tum
;

1465 
SPORADIC
:

1466 
	`ASSERT
(
thªad
->
c⁄°øöts
.
•‹adic
.
size
 >thªad->
run_time
);

1467 
ªmaöög_time
 = 
thªad
->
c⁄°øöts
.
•‹adic
.
size
 -Åhªad->
run_time
;

1468 
√xt_¥ìm±
 = 
now
 + 
ªmaöög_time
;

1470 
PERIODIC
:

1471 
	`ASSERT
(
thªad
->
c⁄°øöts
.
≥riodic
.
¶i˚
 >thªad->
run_time
);

1472 
ªmaöög_time
 = 
thªad
->
c⁄°øöts
.
≥riodic
.
¶i˚
 -Åhªad->
run_time
;

1473 
√xt_¥ìm±
 = 
now
 + 
ªmaöög_time
;

1476 
thªad
->
°¨t_time
 = 
now
;

1483 
scheduÀr
->
tsc
.
°¨t_time
 = 
now
;

1484 
scheduÀr
->
tsc
.
£t_time
 = 
	`MIN
(
√xt_¨rivÆ
,
√xt_¥ìm±
);

1486 
uöt32_t
 
ticks
 = 
	`≠ic_ªÆtime_to_ticks
(
≠ic
,

1487 
scheduÀr
->
tsc
.
£t_time
 - 
now
 + scheduÀr->
¶ack
);

1489 i‡(
	`cur_time
(Ë>
scheduÀr
->
tsc
.
£t_time
) {

1490 
	`DEBUG
("Time ofÇext clock hasálreadyÖassed (cur_time=%llu, set_time=%llu)\n",

1491 
	`cur_time
(), 
scheduÀr
->
tsc
.
£t_time
);

1492 
ticks
 = 1;

1495 i‡(
ticks
 & 0x80000000) {

1496 
	`ERROR
("Ticks is unlikely,Örobably overflow\n");

1502 
	`≠ic_upd©e_⁄eshŸ_timî
(
≠ic
,

1503 
ticks
,

1504 
IF_EARLIER
);

1507 
	}
}

1509 
ölöe
 
	$£t_öãºu±_¥i‹ôy
(
π_thªad
 *
t
)

1511 #ifde‡
NAUT_CONFIG_INTERRUPT_THREAD


1514 i‡(
t
->
is_öå
) {

1516 
	`wrôe_¸8
(0x0);

1519 
	`wrôe_¸8
(0xe);

1524 
	`wrôe_¸8
((
uöt64_t
)
t
->
c⁄°øöts
.
öãºu±_¥i‹ôy_˛ass
);

1526 
	}
}

1528 
	#DUMP_ENTRY_CONTEXT
() \

1529 
	`ERROR
("ENTRY CONTEXT\n"); \

1530 
	`ERROR
(" have_lock = %d\n",
have_lock
); \

1531 
	`ERROR
(" goög_to_¶ì∞%d\n",
goög_to_¶ìp
); \

1532 
	`ERROR
(" goög_to_exô = %d\n",
goög_to_exô
); \

1533 
	`ERROR
(" ch™gög = %d\n",
ch™gög
); \

1534 
	`ERROR
(" yõldög = %d\n",
yõldög
); \

1535 
	`ERROR
(" idÀ = %d\n",
idÀ
); \

1536 
	`ERROR
("Åimed_ouà%d\n",
timed_out
); \

1537 
	`ERROR
("ápic_timî = %d\n",
≠ic_timî
); \

1538 
	`ERROR
("ápic_kick = %d\n",
≠ic_kick
);

	)

1552 
nk_thªad
 *
	$_sched_√ed_ªsched
(
have_lock
, 
f‹˚_ªsched
)

1554 
LOCAL_LOCK_CONF
;

1556 i‡(
	`¥ìm±_is_dißbÀd
()) {

1557 i‡(
f‹˚_ªsched
) {

1558 
	`DEBUG
("ForcedÑeschedule withÖreemption off\n");

1560 
	`DEBUG
("Preemption disabled,ávoidingÑeschedulingÖassánd staying with currentÅhread\n");

1565 
	`INST_SCHED_IN
();

1567 
uöt64_t
 
now
 = 
	`cur_time
();

1569 
sys_öfo
 *
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

1570 
π_scheduÀr
 *
scheduÀr
 = 
sys
->
˝us
[
	`my_˝u_id
()]->
sched_°©e
;

1571 
≠ic_dev
 *
≠ic
 = 
sys
->
˝us
[
	`my_˝u_id
()]->apic;

1572 
nk_thªad
 *
c
 = 
	`gë_cur_thªad
();

1573 
π_thªad
 *
π_c
 = 
c
->
sched_°©e
;

1576 i‡(!
have_lock
) {

1577 
	`LOCAL_LOCK
(
scheduÀr
);

1580 
scheduÀr
->
tsc
.
íd_time
 = 
now
;

1582 
π_c
->
run_time
 +
now
 -Ñt_c->
°¨t_time
;

1584 
π_c
->
cur_run_time
 +
now
 -Ñt_c->
°¨t_time
;

1586 
π_thªad
 *
π_n
;

1588 
goög_to_¶ìp
 = 
π_c
->
°©us
==
SLEEPING
;

1589 
goög_to_exô
 = 
π_c
->
°©us
==
EXITING
;

1590 
ch™gög
 = 
π_c
->
°©us
==
CHANGING
;

1591 
yõldög
 = 
π_c
->
°©us
==
YIELDING
;

1592 
idÀ
 = 
π_c
->
thªad
->
is_idÀ
;

1593 
timed_out
 = 
scheduÀr
->
tsc
.
£t_time
 < 
now
;

1594 
≠ic_timî
 = 
≠ic
->
ö_timî_öãºu±
;

1595 
≠ic_kick
 = 
≠ic
->
ö_kick_öãºu±
;

1598 
	#CUR_IS_SPECIAL
 (
goög_to_¶ìp
 || 
goög_to_exô
 || 
ch™gög
)

	)

1599 
	#CUR_IS_NOT_SPECIAL
 (!(
CUR_IS_SPECIAL
))

	)

1600 
	#CUR_SPECIAL_STR
 (
goög_to_¶ìp
 ? "SÀïög" : 
goög_to_exô
 ? "Exôög" : 
ch™gög
 ? "Ch™gög" : "NŸS≥cül")

	)

1601 
	#CUR_NOT_SPECIAL_STR
 (
yõldög
 ? "Yõldög" : "Pªem±ög")

	)

1607 
	`DEBUG
("√ed_ªsched (cur=%d, sÀï=%d,Éxô=%d, ch™gög=%d)\n", 
c
->
tid
, 
goög_to_¶ìp
,
goög_to_exô
, 
ch™gög
);

1609 
π_c
->
ªsched_cou¡
++;

1611 i‡(!
timed_out
 && !
≠ic_timî
 && !
≠ic_kick


1612 && 
CUR_IS_NOT_SPECIAL


1613 && !
yõldög


1614 && !
idÀ
) {

1619 
	`DEBUG
("OuàE¨ly:Çow=%lx së_time=%lx\n",
now
,
scheduÀr
->
tsc
.
£t_time
);

1620 
out_good_óæy
;

1628 
	`DEBUG
("√ed_ªsched (now=%Œu cur=%Œu, idÀ=%d, sÀï=%d,Éxô=%d, ch™gög=%d yõldög=%d sètus=%dÑt_°©us=%d)\n", 
now
, 
c
->
tid
, 
idÀ
, 
goög_to_¶ìp
,
goög_to_exô
, 
ch™gög
, 
yõldög
, 
π_c
->
thªad
->
°©us
,Ñt_c->status);

1631 
	`DUMP_RT_PENDING
(
scheduÀr
,"pending before handling");

1632 
	`DUMP_RT
(
scheduÀr
,"runnable before handling");

1633 
	`DUMP_APERIODIC
(
scheduÀr
,"aperiodic before handling");

1637 
	`HAVE_RT_PENDING
(
scheduÀr
) &&

1638 
	`PEEK_RT_PENDING
(
scheduÀr
)->
dódlöe
 <
now
) {

1639 
π_thªad
 *
π_a
 = 
	`GET_NEXT_RT_PENDING
(
scheduÀr
);

1640 i‡(!
π_a
) {

1641 
	`ERROR
("Race inárrivals\n");

1644 
π_a
->
¨rivÆ_cou¡
++;

1645 i‡(
π_a
->
c⁄°øöts
.
ty≥
==
PERIODIC
) {

1648 
π_a
->
dódlöe
 =Ñt_a->dódlöê+Ñt_a->
c⁄°øöts
.
≥riodic
.
≥riod
;

1649 
π_a
->
run_time
 = 0;

1652 
π_a
->
dódlöe
 =Ñt_a->
c⁄°øöts
.
•‹adic
.deadline;

1654 
	`DEBUG_DUMP
(
π_a
,"Arrival");

1658 i‡(
	`PUT_RT
(
scheduÀr
, 
π_a
)) {

1659 
∑nic_queue
;

1663 
	`DEBUG
("Finished handlingÖending\n");

1667 
π_c
->
c⁄°øöts
.
ty≥
) {

1669 
APERIODIC
:

1674 
	`π_thªad_upd©e_≠îiodic
(
π_c
,
scheduÀr
,
now
);

1676 i‡(
CUR_IS_NOT_SPECIAL
) {

1680 
	`DEBUG
("Së cuºíà≠îiodi¯thªad (%luËtÿsu•íded\n",
π_c
->
thªad
->
tid
);

1681 
π_c
->
thªad
->
°©us
=
NK_THR_SUSPENDED
;

1682 i‡(
	`PUT_APERIODIC
(
scheduÀr
, 
π_c
)) {

1683 
∑nic_queue
;

1688 
	`DEBUG_DUMP
(
π_c
,
CUR_SPECIAL_STR
);

1692 i‡(
	`HAVE_RT
(
scheduÀr
)) {

1695 
	`DEBUG
("RTÅhreadsávailable\n");

1696 
π_n
 = 
	`GET_NEXT_RT
(
scheduÀr
);

1697 i‡(
π_n
 !
NULL
) {

1698 
	`DEBUG_DUMP
(
π_n
,"Next (Aperiodic->RT)");

1699 
out_good
;

1701 
	`ERROR
("RACE CONDITION DETECTED: No RTÅhreads found on switch fromáperiodic\n");

1709 
π_n
 = 
	`GET_NEXT_APERIODIC
(
scheduÀr
);

1710 i‡(
π_n
 =
NULL
) {

1711 
∑nic_no_≠îiodic
;

1714 
	`DEBUG_DUMP
(
π_n
,"Next (Aperiodic->Aperiodic)");

1715 
out_good
;

1718 
SPORADIC
:

1720 i‡(
ch™gög
 &&

1721 
	`HAVE_RT
(
scheduÀr
) &&

1722 
	`PEEK_RT
(
scheduÀr
Ë=
π_c
) {

1728 
π_n
 = 
	`GET_NEXT_RT
(
scheduÀr
);

1731 
π_n
->
thªad
->
°©us
=
NK_THR_SUSPENDED
;

1733 
	`DEBUG_DUMP
(
π_n
,"ChangingFast (Aperiodic->Periodic)");

1734 
out_good
;

1738 i‡(
π_c
->
run_time
 >π_c->
c⁄°øöts
.
•‹adic
.
size
) {

1742 
	`π_thªad_check_dódlöes
(
π_c
,
scheduÀr
,
now
);

1748 i‡(
CUR_IS_NOT_SPECIAL
) {

1750 
π_c
->
c⁄°øöts
.
ty≥
=
APERIODIC
;

1751 
π_c
->
c⁄°øöts
.
≠îiodic
.
¥i‹ôy
Ùt_c->c⁄°øöts.
•‹adic
.
≠îiodic_¥i‹ôy
;

1752 
π_c
->
thªad
->
°©us
=
NK_THR_SUSPENDED
;

1753 i‡(
	`PUT_APERIODIC
(
scheduÀr
, 
π_c
)) {

1754 
∑nic_queue
;

1759 
	`DEBUG_DUMP
(
π_c
,
CUR_SPECIAL_STR
);

1764 i‡(
	`HAVE_RT
(
scheduÀr
)) {

1765 
π_n
 = 
	`GET_NEXT_RT
(
scheduÀr
);

1766 i‡(
π_n
 !
NULL
) {

1767 
	`DEBUG_DUMP
(
π_n
,"Next (Aperiodic->RT)");

1768 
out_good
;

1770 
	`ERROR
("RACE CONDITION DETECTED: No RTÅhreads found on switch from sporadic onÅimeout\n");

1775 
	`DEBUG
("No RTÅasksávailable\n");

1778 
π_n
 = 
	`GET_NEXT_APERIODIC
(
scheduÀr
);

1780 i‡(
π_n
 =
NULL
) {

1781 
∑nic_no_≠îiodic
;

1784 
	`DEBUG_DUMP
(
π_n
,"Next (Sporadic->Aperiodic)");

1786 
out_good
;

1790 
	`DEBUG
("SporadicÅaskÇot done yet\n");

1793 i‡(
	`HAVE_RT
(
scheduÀr
)) {

1795 i‡(
CUR_IS_SPECIAL
 ||

1796 (
π_c
->
dódlöe
 > 
	`PEEK_RT
(
scheduÀr
)->deadline)) {

1798 
π_n
 = 
	`GET_NEXT_RT
(
scheduÀr
);

1799 i‡(
π_n
 !
NULL
) {

1802 
	`DEBUG
("HigherÖriority RTÅask found\n");

1803 i‡(
CUR_IS_NOT_SPECIAL
) {

1804 
	`DEBUG
("Putting self back on RTÑun queue\n");

1805 
π_c
->
thªad
->
°©us
=
NK_THR_SUSPENDED
;

1806 i‡(
	`PUT_RT
(
scheduÀr
, 
π_c
)) {

1807 
∑nic_queue
;

1814 
	`DEBUG_DUMP
(
π_n
,"Next (Sporadic->RT)");

1815 
out_good
;

1817 
	`ERROR
("RACE CONDITION DETECTED: No RTÅhreads found on switch from sporadic onÖreemption\n");

1831 i‡(
CUR_IS_SPECIAL
) {

1835 
π_n
 = 
	`GET_NEXT_APERIODIC
(
scheduÀr
);

1836 i‡(
π_n
 =
NULL
) {

1837 
∑nic_no_≠îiodic
;

1840 
	`DEBUG_DUMP
(
π_n
,"Next (Sporadic->Aperiodic)");

1841 
out_good
;

1844 
	`DEBUG
("Sticking with current sporadicÅask\n");

1849 
π_n
->
thªad
->
°©us
 = 
NK_THR_SUSPENDED
;

1850 
π_n
 = 
π_c
;

1851 
out_good
;

1856 
PERIODIC
:

1858 i‡(
ch™gög
 &&

1859 
	`HAVE_RT
(
scheduÀr
) &&

1860 
	`PEEK_RT
(
scheduÀr
Ë=
π_c
) {

1866 
π_n
 = 
	`GET_NEXT_RT
(
scheduÀr
);

1869 
π_n
->
thªad
->
°©us
=
NK_THR_SUSPENDED
;

1871 
	`DEBUG_DUMP
(
π_n
,"ChangingFast (Aperiodic->Periodic)");

1872 
out_good
;

1875 i‡(
π_c
->
run_time
 >π_c->
c⁄°øöts
.
≥riodic
.
¶i˚
) {

1876 
	`DEBUG
("CurrentÅask complete (slice=%llu,Ñun_time=%llu)\n",

1877 
π_c
->
c⁄°øöts
.
≥riodic
.
¶i˚
,Ñt_c->
run_time
);

1879 i‡(
	`π_thªad_check_dódlöes
(
π_c
,
scheduÀr
,
now
)) {

1880 
	`DEBUG
("Missed Deadline - immediateÑe-arrival\n");

1883 
π_c
->
dódlöe
 =Ñt_c->dódlöê+Ñt_c->
c⁄°øöts
.
≥riodic
.
≥riod
;

1884 
π_c
->
run_time
 = 0;

1887 i‡(
CUR_IS_NOT_SPECIAL
) {

1889 
	`DEBUG
("Missed Deadline, immediatelyÑe-enqueuing\n");

1890 
π_c
->
thªad
->
°©us
=
NK_THR_SUSPENDED
;

1891 i‡(
	`PUT_RT
(
scheduÀr
, 
π_c
)) {

1892 
∑nic_queue
;

1897 
	`DEBUG_DUMP
(
π_c
,
CUR_SPECIAL_STR
);

1902 
	`DEBUG
("Deadline met\n");

1905 i‡(
CUR_IS_NOT_SPECIAL
) {

1906 
	`DEBUG
("Deadline met -ÉnqueuingÅoÖending\n");

1907 
π_c
->
thªad
->
°©us
=
NK_THR_SUSPENDED
;

1908 i‡(
	`PUT_RT_PENDING
(
scheduÀr
, 
π_c
)) {

1909 
∑nic_queue
;

1913 
	`DEBUG_DUMP
(
π_c
,
CUR_SPECIAL_STR
);

1917 
	`DEBUG
("Looking for RTÅask\n");

1919 i‡(
	`HAVE_RT
(
scheduÀr
)) {

1921 
π_n
 = 
	`GET_NEXT_RT
(
scheduÀr
);

1922 i‡(
π_n
 !
NULL
) {

1923 
	`DEBUG_DUMP
(
π_n
,"Next (Periodic->RT)");

1924 
out_good
;

1926 
	`ERROR
("RACE CONDITION DETECTED: No RTÅhreads found on switch fromÖeriodic onÅimeout\n");

1931 
	`DEBUG
("No RTÅasksávailable\n");

1939 
	`DEBUG
("PeriodicÅaskÇot done yet\n");

1941 i‡(
	`HAVE_RT
(
scheduÀr
)) {

1946 i‡(
CUR_IS_SPECIAL
 ||

1947 (
π_c
->
dódlöe
 > 
	`PEEK_RT
(
scheduÀr
)->deadline)) {

1948 
π_n
 = 
	`GET_NEXT_RT
(
scheduÀr
);

1949 i‡(
π_n
 !
NULL
) {

1953 
	`DEBUG
("HigherÖriority RTÅask found\n");

1954 i‡(
CUR_IS_NOT_SPECIAL
) {

1955 
	`DEBUG
("Putting self back on RTÑun queue\n");

1957 
π_c
->
thªad
->
°©us
=
NK_THR_SUSPENDED
;

1958 i‡(
	`PUT_RT
(
scheduÀr
, 
π_c
)) {

1959 
∑nic_queue
;

1966 
	`DEBUG_DUMP
(
π_n
,"Next (Periodic->RT)");

1967 
out_good
;

1969 
	`ERROR
("RACE CONDITION DETECTED: No RTÅhreads found on switch fromÖeriodic onÖreemption\n");

1982 i‡(
CUR_IS_SPECIAL
 || 
π_c
->
thªad
->
°©us
==
NK_THR_SUSPENDED
) {

1984 
π_n
 = 
	`GET_NEXT_APERIODIC
(
scheduÀr
);

1985 i‡(
π_n
 =
NULL
) {

1986 
∑nic_no_≠îiodic
;

1988 
	`DEBUG_DUMP
(
π_n
,"Next (Periodic->Aperiodic)");

1989 
out_good
;

1992 
	`DEBUG
("Sticking with currentÖeriodicÅask\n");

1993 
π_n
 = 
π_c
;

1998 
π_n
->
thªad
->
°©us
 = 
NK_THR_SUSPENDED
;

1999 
out_good
;

2005 
	`ERROR
("Unknow¿cuºíàèskÅy≥ %d... ju°Üëtög iàrun\n",
π_c
->
c⁄°øöts
.
ty≥
);

2006 
out_good_óæy
;

2010 
∑nic_no_≠îiodic
:

2012 
	`ERROR
("APERIODIC QUEUE IS EMPTY.\n THE WORLD IS GOVERNED BY MADNESS.\n");

2013 
	`∑nic
("ATTEMPTING TO RUN A NULL RT_THREAD.\n");

2016 
∑nic_queue
:

2017 
	`ERROR
("UNEXPECTED QUEUE OVERFLOW\n");

2018 
	`∑nic
("UNEXPECTED QUEUE OVERFLOW INÇk_sched_need_resched()\n");

2022 
out_good_óæy
:

2024 i‡(!
have_lock
) {

2025 
	`LOCAL_UNLOCK
(
scheduÀr
);

2028 
	`INST_SCHED_OUT
(
ªsched_Á°
);

2032 
out_good
:

2036 
π_c
->
ªsched_l⁄g_cou¡
++;

2038 i‡(
ch™gög
) {

2039 
	`DEBUG
("Thªad %Œu c⁄°øöàch™gêcom∂ëe\n",
π_c
->
thªad
->
tid
);

2040 
π_c
->
°©us
=
ADMITTED
;

2043 i‡(
goög_to_exô
) {

2045 
π_c
->
exô_time
 = 
now
;

2048 i‡(
goög_to_¶ìp
) {

2052 i‡(
yõldög
) {

2056 
scheduÀr
->
cuºít
 = 
π_n
;

2059 
	`£t_timî
(
scheduÀr
, 
π_n
, 
now
);

2060 i‡(
π_n
!=
π_c
) {

2066 i‡(
π_n
->
thªad
->
°©us
==
NK_THR_RUNNING
) {

2067 
	`ERROR
("SwôchögÅÿ√wÅhªadÅh© i†ÆªadyÑu¬ög (ﬁdÅid=%Œu (%s),ÇewÅid=%Œu (%s))\n",
π_c
->
°©us
,π_c->
thªad
->
tid
,π_c->thªad->
«me
,
π_n
->thread->tid,rt_n->thread->name);

2068 
	`DUMP_ENTRY_CONTEXT
();

2073 i‡(
π_n
->
thªad
->
°©us
 !
NK_THR_WAITING
) {

2074 
	`DEBUG
("SwôchögÇewÅhªad (%luË‰om sèã %uÅÿ°©ê%u\n",
π_n
->
thªad
->
tid
,Ñt_n->thªad->
°©us
, 
NK_THR_RUNNING
);

2075 
π_n
->
thªad
->
°©us
=
NK_THR_RUNNING
;

2082 i‡(
π_c
->
thªad
->
°©us
==
NK_THR_RUNNING
 &&

2083 !
goög_to_¶ìp
 && !
goög_to_exô
) {

2084 
	`ERROR
("SwôchögÅÿ√wÅhªad, buàﬁdÅhªad (which i†nŸ sÀïög o∏exôögËi†°û»m¨kedÑu¬ög (π sètu†i†%u, oldtid=%Œu (%s),Çewtid=%Œu (%s))\n",
π_c
->
°©us
,π_c->
thªad
->
tid
,π_c->thªad->
«me
,
π_n
->thread->tid,rt_n->thread->name);

2085 
	`DUMP_ENTRY_CONTEXT
();

2088 
	`DEBUG
("Switching from %llu (%s)Åo %llu (%s) on cpu %llu\n",

2089 
π_c
->
thªad
->
tid
,Ñt_c->thªad->
«me
,

2090 
π_n
->
thªad
->
tid
,Ñt_n->thªad->
«me
,

2091 
	`my_˝u_id
());

2093 
π_n
->
swôch_ö_cou¡
++;

2096 
π_n
->
cur_run_time
=0;

2099 
	`£t_öãºu±_¥i‹ôy
(
π_n
);

2101 i‡(!
have_lock
) {

2102 
	`LOCAL_UNLOCK
(
scheduÀr
);

2104 
	`INST_SCHED_OUT
(
ªsched_¶ow
);

2105  
π_n
->
thªad
;

2110 i‡(
π_c
->
thªad
->
°©us
!=
NK_THR_SUSPENDED
 &&Ñt_c->thªad->°©us!=
NK_THR_WAITING
 && !
yõldög
) {

2111 
	`ERROR
("Sèyög wôh cuºíàthªad, buàô i†nŸ m¨ked su•íded o∏waôög o∏yõldög (thªad sètu†i†%uÑàthªad sètu†i†%uÅid=%Œu (%s))\n",
π_c
->
thªad
->
°©us
,π_c->°©us,π_c->thªad->
tid
,π_c->thªad->
«me
);

2112 
	`DUMP_ENTRY_CONTEXT
();

2114 i‡(
π_c
->
thªad
->
°©us
!
NK_THR_WAITING
) {

2115 
	`DEBUG
("Swôchög cuºíàthªad (%luË‰om sèã %uÅÿ°©ê%u\n",
π_c
->
thªad
->
tid
,π_c->thªad->
°©us
, 
NK_THR_RUNNING
);

2116 
π_c
->
thªad
->
°©us
=
NK_THR_RUNNING
;

2119 
	`DEBUG
("Sèyög wôh cuºíàèsk %Œu (%s)\n", 
π_c
->
thªad
->
tid
,Ñt_c->thªad->
«me
);

2121 i‡(!
have_lock
) {

2122 
	`LOCAL_UNLOCK
(
scheduÀr
);

2124 
	`INST_SCHED_OUT
(
ªsched_¶ow_noswôch
);

2127 
	}
}

2130 
nk_thªad
 *
	$nk_sched_√ed_ªsched
()

2132  
	`_sched_√ed_ªsched
(0,0);

2133 
	}
}

2135 
	$nk_sched_thªad_ch™ge_c⁄°øöts
(
nk_sched_c⁄°øöts
 *
c⁄°øöts
)

2137 
LOCAL_LOCK_CONF
;

2138 
sys_öfo
 *
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

2139 
π_scheduÀr
 *
scheduÀr
 = 
sys
->
˝us
[
	`my_˝u_id
()]->
sched_°©e
;

2140 
nk_thªad
 *
t
 = 
	`gë_cur_thªad
();

2141 
π_thªad
 *
r
 = 
t
->
sched_°©e
;

2142 
nk_sched_c⁄°øöts
 
ﬁd
;

2145 
	`DEBUG
("Ch™gög c⁄°øöt†o‡%Œu \"%s\"\n", 
t
->
tid
,t->
«me
);

2147 
	`LOCAL_LOCK
(
scheduÀr
);

2149 i‡(
r
->
c⁄°øöts
.
ty≥
 !
APERIODIC
 &&

2150 
c⁄°øöts
->
ty≥
 !
APERIODIC
) {

2152 
	`DEBUG
("Tønsôi⁄ög %Œu \"%s\"Åemp‹¨ûyÅÿ≠îiodic\n" , 
t
->
tid
,t->
«me
);

2154 
nk_sched_c⁄°øöts
 
ãmp
 = { .
ty≥
=
APERIODIC
,

2155 .
≠îiodic
.
¥i‹ôy
=
scheduÀr
->
cfg
.
≠îiodic_deÁu…_¥i‹ôy
 };

2157 
ﬁd
 = 
r
->
c⁄°øöts
;

2158 
r
->
c⁄°øöts
 = 
ãmp
;

2162 i‡(
	`_sched_make_ru¬abÀ
(
t
,t->
cuºít_˝u
,1,1)) {

2163 
	`ERROR
("FaûedÅÿª-admô %Œu \"%s\"á†≠îiodic\n" , 
t
->
tid
,t->
«me
);

2164 
	`∑nic
("UnableÅo changeÅhread's constraintsÅoáperiodic!\n");

2165 
out_bad
;

2169 
	`h™dÀ_•ecül_swôch
(
CHANGING
,1,
_loˇl_Êags
,0);

2171 
	`LOCAL_LOCK
(
scheduÀr
);

2177 
ﬁd
 = 
r
->
c⁄°øöts
;

2178 
r
->
c⁄°øöts
 = *constraints;

2182 i‡(
	`_sched_make_ru¬abÀ
(
t
,t->
cuºít_˝u
,1,1)) {

2183 
	`DEBUG
("FaûedÅÿª-admô %Œu \"%s\" wôhÇew c⁄°øöts\n" , 
t
->
tid
,t->
«me
);

2186 
r
->
c⁄°øöts
 = 
ﬁd
;

2187 i‡(
	`_sched_make_ru¬abÀ
(
t
,t->
cuºít_˝u
,1,1)) {

2189 
	`∑nic
("FailedÅoÑecoverÅoáperiodic when changing constraints\n");

2190 
out_bad
;

2192 
	`DEBUG
("Ródmôãd %Œu \"%s\" wôh old c⁄°øöts\n" , 
t
->
tid
,t->
«me
);

2196 
	`h™dÀ_•ecül_swôch
(
CHANGING
,1,
_loˇl_Êags
,0);

2199 
out_bad_no_u∆ock
;

2203 
	`DEBUG
("Suc˚eded i¿admôtög %Œu \"%s\" wôhÇew c⁄°øöts\n",
t
->
tid
,t->
«me
);

2204 
	`DUMP_RT
(
scheduÀr
,"runnable before handle special switch");

2205 
	`DUMP_RT_PENDING
(
scheduÀr
,"pending before handle special switch");

2206 
	`DUMP_APERIODIC
(
scheduÀr
,"aperiodic before handle special switch");

2208 
	`h™dÀ_•ecül_swôch
(
CHANGING
,1,
_loˇl_Êags
,0);

2212 
	`DEBUG
("Thªad i†now sèã %d / %d\n",
t
->
°©us
,Å->
sched_°©e
->status);

2213 
	`DUMP_RT
(
scheduÀr
,"runnableáfter handle special switch");

2214 
	`DUMP_RT_PENDING
(
scheduÀr
,"pendingáfter handle special switch");

2215 
	`DUMP_APERIODIC
(
scheduÀr
,"aperiodicáfter handle special switch");

2217 
out_good_no_u∆ock
;

2220 
out_bad
:

2221 
	`LOCAL_UNLOCK
(
scheduÀr
);

2222 
out_bad_no_u∆ock
:

2225 
out_good_no_u∆ock
:

2227 
	}
}

2229 
	$nk_sched_thªad_move
(
nk_thªad
 *
t
, 
√w_˝u
, 
block
)

2231 
LOCAL_LOCK_CONF
;

2232 
sys_öfo
 *
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

2233 
ﬁd_˝u
 = 
t
->
cuºít_˝u
;

2234 
π_thªad
 *
π
 = 
t
->
sched_°©e
;

2235 
π_scheduÀr
 *
os
 = 
sys
->
˝us
[
ﬁd_˝u
]->
sched_°©e
;

2236 
rc
=-1;

2238 i‡(
t
->
bound_˝u
>=0) {

2239 
	`ERROR
("Cannot moveá boundÅhread\n");

2243 i‡(
√w_˝u
<0 ||Çew_˝u>=
sys
->
num_˝us
) {

2244 
	`ERROR
("ImpossibÀ migøti⁄Åÿ%d\n",
√w_˝u
);

2248 i‡(
t
 =
	`gë_cur_thªad
()) {

2249 
	`ERROR
("Cannot currently migrate self\n");

2253 i‡(
ﬁd_˝u
 =
√w_˝u
) {

2257 i‡(
π
->
c⁄°øöts
.
ty≥
!=
APERIODIC
) {

2258 
	`ERROR
("Currently onlyÇon-RTÅhreads can be migrated\n");

2262 
ªåy
:

2265 
	`LOCAL_LOCK
(
os
);

2267 i‡(*((vﬁ©ûê*)&(
t
->
cuºít_˝u
)Ë!
ﬁd_˝u
) {

2270 
	`ERROR
("RaceÅo moveÅhread\n");

2271 
rc
 = -1;

2272 
out_Áû
;

2275 i‡(
t
->
°©us
!=
NK_THR_SUSPENDED
 || 
π
->°©us!=
ADMITTED
) {

2277 
	`DEBUG
("Thread cannot be migratedás it isÇot suspended\n");

2278 
rc
 = -1;

2279 
out_good_‹_ªåy_if_blockög
;

2284 i‡(!
	`REMOVE_APERIODIC
(
os
,
π
)) {

2285 
	`DEBUG
("Thread cannot be migratedás it isÇot inÅheáperiodicÑeady queue\n");

2286 
rc
 = -1;

2287 
out_good_‹_ªåy_if_blockög
;

2291 
t
->
cuºít_˝u
 = 
√w_˝u
;

2293 
rc
 = 0;

2295 
out_good_‹_ªåy_if_blockög
:

2297 
	`LOCAL_UNLOCK
(
os
);

2299 i‡(
rc
) {

2300 i‡(
block
) {

2302 
	`DEBUG
("GoingÅo sleep beforeÑetry\n");

2303 
	`nk_¶ìp
(1000000000ULL/
NAUT_CONFIG_HZ
);

2304 
ªåy
;

2312 
	`DEBUG
("MakingÅhreadÑunnable onÇew CPU\n");

2313 i‡(
	`_sched_make_ru¬abÀ
(
t
,t->
cuºít_˝u
,0,0)) {

2314 
	`ERROR
("FailedÅo makeÅhreadÑunnable on destination -áttempting fallback\n");

2315 
t
->
cuºít_˝u
 = 
ﬁd_˝u
;

2316 i‡(
	`_sched_make_ru¬abÀ
(
t
,t->
cuºít_˝u
,0,0)) {

2317 
	`ERROR
("Cannot moveÅhread backÅo original cpu\n");

2319 
	`∑nic
("FailedÅo make migratedÅaskÑunnable on destination or source\n");

2329 
out_Áû
:

2330 
	`LOCAL_UNLOCK
(
os
);

2332 
	}
}

2335 
	$£À˘_vi˘im
(
√w_˝u
)

2337 
a
,
b
;

2338 
sys_öfo
 *
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

2345 
a
 = ()(
	`gë_øndom
(Ë% 
sys
->
num_˝us
);

2346 
b
 = ()(
	`gë_øndom
(Ë% 
sys
->
num_˝us
);

2347 } 
a
==
√w_˝u
 || 
b
==new_cpu);

2349  (
sys
->
˝us
[
a
]->
sched_°©e
->
≠îiodic
.
size
 >

2350 
sys
->
˝us
[
b
]->
sched_°©e
->
≠îiodic
.
size
Ë? 
a
 : b;

2352 
	}
}

2354 
uöt64_t
 
	$nk_sched_gë_ru¡ime
(
nk_thªad
 *
t
)

2356  
t
->
sched_°©e
->
run_time
;

2357 
	}
}

2359 
	$nk_sched_˝u_mug
(
ﬁd_˝u
, 
uöt64_t
 
maxcou¡
, uöt64_à*
a˘uÆcou¡
)

2361 
LOCAL_LOCK_CONF
;

2362 
sys_öfo
 *
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

2363 
√w_˝u
 = 
	`my_˝u_id
();

2364 
π_scheduÀr
 *
os
 = 
sys
->
˝us
[
ﬁd_˝u
]->
sched_°©e
;

2365 
π_scheduÀr
 *
ns
 = 
sys
->
˝us
[
√w_˝u
]->
sched_°©e
;

2366 
π_thªad
 *
¥o•
[
maxcou¡
];

2367 
uöt64_t
 
cou¡
=0;

2368 
uöt64_t
 
cur
, 
pos
;

2369 
rc
=-1;

2372 *
a˘uÆcou¡
 = 0;

2374 i‡(
ﬁd_˝u
==-1) {

2375 
ﬁd_˝u
 = 
	`£À˘_vi˘im
(
√w_˝u
);

2378 i‡(
ﬁd_˝u
==
√w_˝u
) {

2379 
	`ERROR
("Cannot steal from self!\n");

2384 
os
 = 
sys
->
˝us
[
ﬁd_˝u
]->
sched_°©e
;

2386 
	`DEBUG
("W‹k sãÆög: sñe˘ed vi˘im i†%d\n",
ﬁd_˝u
);

2388 i‡(
ﬁd_˝u
>=
sys
->
num_˝us
) {

2389 
	`ERROR
("C™nŸ sãÆ from cpu %d (ouào‡ønge)\n", 
ﬁd_˝u
);

2393 i‡(
	`SIZE_APERIODIC
(
os
Ë<SIZE_APERIODIC(
ns
)) {

2394 
	`DEBUG
("AvoidingÅheft from insufficientlyÑich CPU\n");

2400 
	`LOCAL_LOCK
(
os
);

2402 
cou¡
=0;

2404 
cur
=0;cur<
	`SIZE_APERIODIC
(
os
);cur++) {

2405 
π_thªad
 *
t
 = 
	`PEEK_APERIODIC
(
os
,
cur
);

2407 i‡(
t
 && !t->
thªad
->
is_idÀ
 && !t->
is_öå
 &&Å->thªad->
bound_˝u
<0 ) {

2408 
	`DEBUG
("FoundÅhªad %Œu %s\n",
t
->
thªad
->
tid
,t->thªad->
«me
);

2409 
¥o•
[
cou¡
++] = 
t
;

2410 i‡(
cou¡
>=
maxcou¡
) {

2416 
	`LOCAL_UNLOCK
(
os
);

2423 *
a˘uÆcou¡
=0;

2425 
cur
=0;cur<
cou¡
;cur++) {

2426 
	`DEBUG
("AttemptingÅo moveÅhread %llu %sÅo cpu %d\n",

2427 
¥o•
[
cur
]->
thªad
->
tid
,Öro•[cur]->thªad->
«me
,
√w_˝u
);

2428 i‡(
	`nk_sched_thªad_move
(
¥o•
[
cur
]->
thªad
,
√w_˝u
,0)) {

2429 
	`DEBUG
("CouldÇŸ sãÆÅhªad %Œu %s\n",
¥o•
[
cur
]->
thªad
->
tid
,¥o•[cur]->thªad->
«me
);

2431 
	`DEBUG
("Stﬁêthªad %Œu %s\n",
¥o•
[
cur
]->
thªad
->
tid
,¥o•[cur]->thªad->
«me
);

2432 (*
a˘uÆcou¡
)++;

2436 
ns
->
num_the·s
 +*
a˘uÆcou¡
;

2438 
	`DEBUG
("ThreadÅheft complete\n");

2442 
	}
}

2445 
	$nk_sched_kick_˝u
(
˝u
)

2447 #ifde‡
NAUT_CONFIG_KICK_SCHEDULE


2448 i‡(
˝u
 !
	`my_˝u_id
()) {

2449 
	`≠ic_ùi
(
	`≥r_˝u_gë
(
≠ic
),

2450 
	`nk_gë_«utûus_öfo
()->
sys
.
˝us
[
˝u
]->
œpic_id
,

2451 
APIC_NULL_KICK_VEC
);

2457 
	}
}

2459 
nk_thªad_swôch
(
nk_thªad_t
*);

2467 
	$h™dÀ_•ecül_swôch
(
π_°©us
 
wh©
, 
have_lock
, 
uöt8_t
 
Êags
, 
•ölock_t
 *
lock_to_ªÀa£
)

2469 
did_¥ìm±_dißbÀ
 = 0;

2470 
no_swôch
=0;

2472 i‡(!
	`¥ìm±_is_dißbÀd
()) {

2473 
	`¥ìm±_dißbÀ
();

2474 
did_¥ìm±_dißbÀ
 = 1;

2477 i‡(!
have_lock
) {

2479 
Êags
 = 
	`úq_dißbÀ_ßve
();

2482 
nk_thªad_t
 * 
c
 = 
	`gë_cur_thªad
();

2483 
π_thªad
 * 
π_c
 = 
c
->
sched_°©e
;

2484 
π_°©us
 
œ°_°©us
;

2485 
nk_thªad_t
 * 
n
 = 
NULL
;

2486 
sys_öfo
 *
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

2487 
π_scheduÀr
 *
s
 = 
sys
->
˝us
[
	`my_˝u_id
()]->
sched_°©e
;

2490 
	`ASSERT
(
wh©
==
SLEEPING
 || wh©==
YIELDING
 || wh©==
EXITING
 || wh©==
CHANGING
);

2492 
	`DEBUG
("%sing %llu \"%s\"\n",

2493 
wh©
 =
SLEEPING
 ? "Sleep" :

2494 
wh©
 =
YIELDING
 ? "Yield" :

2495 
wh©
 =
EXITING
 ? "Exit" :

2496 
wh©
 =
CHANGING
 ? "Chang" : "WTF",

2497 
c
->
tid
, c->
«me
);

2500 
œ°_°©us
 = 
c
->
sched_°©e
->
°©us
;

2502 
c
->
sched_°©e
->
°©us
 = 
wh©
;

2505 
n
 = 
	`_sched_√ed_ªsched
(
have_lock
,1);

2509 i‡(
lock_to_ªÀa£
) {

2510 
	`•ö_u∆ock
(
lock_to_ªÀa£
);

2513 i‡(!
n
) {

2514 
wh©
) {

2515 
SLEEPING
:

2516 
	`ERROR
("AttemptÅo sleepÑesulted inÇo context switch\n");

2518 
EXITING
:

2519 
	`ERROR
("AttemptÅoÉxitÑesulted inÇo context switch\n");

2521 
CHANGING
:

2523 
	`DEBUG
("Constraint change completed -Ço switch\n");

2525 
YIELDING
:

2526 
	`DEBUG
("Yield complete -Ço switch\n");

2529 
	`ERROR
("Huh - unknow¿ªque° %d i¿h™dÀ_•ecül_swôch()\n",
wh©
);

2532 
no_swôch
 = 1;

2533 
out_good
;

2536 #ifde‡
NAUT_CONFIG_ENABLE_STACK_CHECK


2537 i‡((
c
->
r•
 <(
uöt64_t
)(c->
°ack
)Ë|| c->r• >(uöt64_t)(c->°ack+c->
°ack_size
)) {

2538 
	`∑nic
("ThisÅhread (%p,Åid=%u) hasÑun offÅheÉnd (or beginning) of its stack! (start=%p,Ñsp=%p, start size=%lx)\n",

2539 (*)
c
,

2540 
c
->
tid
,

2541 
c
->
°ack
,

2542 (*)
c
->
r•
,

2543 
c
->
°ack_size
);

2548 
	`DEBUG
("SwitchingÅo %llu \"%s\"\n",

2549 
n
->
tid
,Ç->
«me
);

2551 i‡(
have_lock
) {

2555 
	`•ö_u∆ock
(&
s
->
lock
);

2556 
have_lock
 = 0;

2561 
	`¥ìm±_ª£t
();

2568 
	`nk_thªad_swôch
(
n
);

2570 
	`DEBUG
("A·îÑëu∫ from swôch (back i¿%Œu \"%s\")\n", 
c
->
tid
, c->
«me
);

2572 
out_good
:

2573 
c
->
sched_°©e
->
°©us
 = 
œ°_°©us
;

2574 i‡(
have_lock
) {

2575 
	`•ö_u∆ock
(&
s
->
lock
);

2577 i‡(
no_swôch
 && 
did_¥ìm±_dißbÀ
) {

2582 
	`¥ìm±_íabÀ
();

2586 
	`úq_íabÀ_ª°‹e
(
Êags
);

2587 
	}
}

2597 
	$nk_sched_yõld
(
•ölock_t
 *
lock_to_ªÀa£
)

2599 
	`h™dÀ_•ecül_swôch
(
YIELDING
,0,0,
lock_to_ªÀa£
);

2600 
	}
}

2612 
	$nk_sched_¶ìp
(
•ölock_t
 *
lock_to_ªÀa£
)

2614 
	`h™dÀ_•ecül_swôch
(
SLEEPING
,0,0,
lock_to_ªÀa£
);

2615 
	}
}

2617 
	$π_thªad_check_dódlöes
(
π_thªad
 *
t
, 
π_scheduÀr
 *
s
, 
uöt64_t
 
now
)

2619 i‡(
now
 > 
t
->
dódlöe
) {

2620 
	`DEBUG
("Mis£d Dódlöê%Œu\t\àCuºíàTimî = %Œu\n", 
t
->
dódlöe
, 
now
);

2621 
	`DEBUG
("Dif„ªn˚ = %Œu\n", 
now
 - 
t
->
dódlöe
);

2622 
	`π_thªad_dump
(
t
,"Missed Deadline");

2623 
t
->
miss_cou¡
++;

2624 
t
->
miss_time_sum
 +
now
 -Å->
dódlöe
;

2625 
t
->
miss_time_sum2
 +(
now
 -Å->
dódlöe
)*(now -Å->deadline);

2629 
	}
}

2631 
ölöe
 
	$π_thªad_upd©e_≥riodic
(
π_thªad
 *
t
, 
π_scheduÀr
 *
scheduÀr
, 
uöt64_t
 
now
)

2633 i‡(
t
->
c⁄°øöts
.
ty≥
 =
PERIODIC
) {

2634 
t
->
dódlöe
 = 
now
 +Å->
c⁄°øöts
.
≥riodic
.
≥riod
;

2635 
t
->
run_time
 = 0;

2637 
	}
}

2639 
ölöe
 
	$π_thªad_upd©e_•‹adic
(
π_thªad
 *
t
, 
π_scheduÀr
 *
scheduÀr
, 
uöt64_t
 
now
)

2641 i‡(
t
->
c⁄°øöts
.
ty≥
 =
SPORADIC
) {

2642 
t
->
dódlöe
 =Å->
c⁄°øöts
.
•‹adic
.deadline;

2643 
t
->
run_time
 = 0;

2645 
	}
}

2656 
ölöe
 
	$π_thªad_upd©e_≠îiodic
(
π_thªad
 *
t
, 
π_scheduÀr
 *
scheduÀr
, 
uöt64_t
 
now
)

2658 i‡(
t
->
c⁄°øöts
.
ty≥
 =
APERIODIC
) {

2659 #i‡
NAUT_CONFIG_APERIODIC_ROUND_ROBIN
 || 
NAUT_CONFIG_APERIODIC_LOTTERY


2666 #i‡
NAUT_CONFIG_APERIODIC_DYNAMIC_QUANTUM


2667 i‡(
t
->
thªad
->
is_idÀ
) {

2668 
t
->
dódlöe
 = -1ULL;

2670 
t
->
dódlöe
 =Å->
c⁄°øöts
.
≠îiodic
.
¥i‹ôy


2671 + 
	`MIN
(
t
->
cur_run_time
,
scheduÀr
->
cfg
.
≠îiodic_qu™tum
);

2675 i‡((
t
->
dódlöe
 <Å->
c⁄°øöts
.
≠îiodic
.
¥i‹ôy
)

2676 || (
t
->
dódlöe
 > (-1ULL - 2048ULL))) {

2679 
t
->
dódlöe
 = -1ULL - 2048ULL;

2681 
t
->
dódlöe
 +
now
 & 0xfff;

2686 #i‡
NAUT_CONFIG_APERIODIC_DYNAMIC_LIFETIME


2687 i‡(
t
->
thªad
->
is_idÀ
) {

2688 
t
->
dódlöe
 = -1ULL;

2690 
t
->
dódlöe
 =Å->
c⁄°øöts
.
≠îiodic
.
¥i‹ôy
 +Å->
run_time
;

2694 i‡((
t
->
dódlöe
 <Å->
c⁄°øöts
.
≠îiodic
.
¥i‹ôy
)

2695 || (
t
->
dódlöe
 > (-1ULL - 2048ULL))) {

2698 
t
->
dódlöe
 = -1ULL - 2048ULL;

2700 
t
->
dódlöe
 +
now
 & 0xfff;

2705 
	`∑nic
("NO APERIODIC SCHEDULER IS SELECTED (IMPOSSIBLE)\n");

2709 
	}
}

2713 
uöt64_t
 
	$cur_time
()

2715 
sys_öfo
 *
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

2716 
≠ic_dev
 *
≠ic
 = 
sys
->
˝us
[
	`my_˝u_id
()]->apic;

2717 
uöt64_t
 
c
 = 
	`rdtsc
();

2718 
uöt64_t
 
t
 = 
	`≠ic_cy˛es_to_ªÆtime
(
≠ic
, 
c
);

2719  
t
;

2720 
	}
}

2722 
uöt64_t
 
	$nk_sched_gë_ªÆtime
()

2724  
	`cur_time
();

2725 
	}
}

2727 
	$ª£t_°©e
(
π_thªad
 *
thªad
)

2729 
thªad
->
°¨t_time
 = 0;

2730 
thªad
->
cur_run_time
 = 0;

2731 
thªad
->
run_time
 = 0;

2732 
thªad
->
dódlöe
 = 0;

2733 
thªad
->
exô_time
 = 0;

2734 
	}
}

2736 
	$ª£t_°©s
(
π_thªad
 *
thªad
)

2738 i‡(
thªad
->
c⁄°øöts
.
ty≥
==
APERIODIC
) {

2739 
thªad
->
¨rivÆ_cou¡
 = 1;

2741 
thªad
->
¨rivÆ_cou¡
 = 0;

2744 
thªad
->
ªsched_cou¡
=0;

2745 
thªad
->
ªsched_l⁄g_cou¡
=0;

2746 
thªad
->
swôch_ö_cou¡
=0;

2747 
thªad
->
miss_cou¡
=0;

2748 
thªad
->
miss_time_sum
=0;

2749 
thªad
->
miss_time_sum2
=0;

2750 
	}
}

2754 
ölöe
 
uöt64_t
 
	$gë_≥riodic_utû_rms_limô
(
uöt64_t
 
cou¡
)

2757 
uöt64_t
 
limô
 = 693147;

2758 
uöt64_t
 
Àvñs
[16] = { 1000000,

2776 i‡(
cou¡
>16) {

2777  
limô
;

2779  
Àvñs
[
cou¡
-1];

2781 
	}
}

2783 
ölöe
 
	$gë_≥riodic_utû
(
π_scheduÀr
 *
sched
, 
uöt64_t
 *
utû
, uöt64_à*
cou¡
)

2785 
π_¥i‹ôy_queue
 *
≥ndög
 = &
sched
->pending;

2786 
π_¥i‹ôy_queue
 *
ru¬abÀ
 = &
sched
->runnable;

2787 
i
;

2789 *
utû
=0;

2790 *
cou¡
=0;

2792 
i
 = 0; i < 
ru¬abÀ
->
size
; i++) {

2793 
π_thªad
 *
thªad
 = 
ru¬abÀ
->
thªads
[
i
];

2794 i‡(
thªad
->
c⁄°øöts
.
ty≥
 =
PERIODIC
) {

2795 (*
cou¡
)++;

2796 *
utû
 +(
thªad
->
c⁄°øöts
.
≥riodic
.
¶i˚
 * 
UTIL_ONE
Ë/Åhªad->c⁄°øöts.≥riodic.
≥riod
;

2800 
i
 = 0; i < 
≥ndög
->
size
; i++) {

2801 
π_thªad
 *
thªad
 = 
≥ndög
->
thªads
[
i
];

2802 i‡(
thªad
->
c⁄°øöts
.
ty≥
 =
PERIODIC
) {

2803 (*
cou¡
)++;

2804 *
utû
 +(
thªad
->
c⁄°øöts
.
≥riodic
.
¶i˚
 * 
UTIL_ONE
Ë/Åhªad->c⁄°øöts.≥riodic.
≥riod
;

2808 
	}
}

2810 
ölöe
 
	$gë_•‹adic_utû
(
π_scheduÀr
 *
sched
, 
uöt64_t
 
now
, uöt64_à*
utû
, uöt64_à*
cou¡
)

2812 
π_¥i‹ôy_queue
 *
≥ndög
 = &
sched
->pending;

2813 
π_¥i‹ôy_queue
 *
ru¬abÀ
 = &
sched
->runnable;

2814 
i
;

2816 *
utû
=0;

2817 *
cou¡
=0;

2819 
i
 = 0; i < 
ru¬abÀ
->
size
; i++) {

2820 
π_thªad
 *
thªad
 = 
ru¬abÀ
->
thªads
[
i
];

2821 i‡(
thªad
->
c⁄°øöts
.
ty≥
 =
SPORADIC
) {

2822 (*
cou¡
)++;

2826 *
utû
 +((
thªad
->
c⁄°øöts
.
•‹adic
.
size
 -Åhªad->
run_time
Ë* 
UTIL_ONE
Ë/ (thªad->c⁄°øöts.•‹adic.
dódlöe
 - 
now
);

2830 
i
 = 0; i < 
≥ndög
->
size
; i++) {

2831 
π_thªad
 *
thªad
 = 
≥ndög
->
thªads
[
i
];

2832 i‡(
thªad
->
c⁄°øöts
.
ty≥
 =
SPORADIC
) {

2833 (*
cou¡
)++;

2836 *
utû
 +(
thªad
->
c⁄°øöts
.
•‹adic
.
size
 * 
UTIL_ONE
Ë/ (thªad->c⁄°øöts.•‹adic.
dódlöe
 - 
now
 -Åhªad->c⁄°øöts.•‹adic.
pha£
);

2840 
	}
}

2850 
	$π_thªad_admô
(
π_scheduÀr
 *
scheduÀr
, 
π_thªad
 *
thªad
, 
uöt64_t
 
now
)

2853 
uöt64_t
 
utû_limô
 = 
scheduÀr
->
cfg
.util_limit;

2854 
uöt64_t
 
≠î_ªs
 = 
scheduÀr
->
cfg
.
≠îiodic_ª£rv©i⁄
;

2855 
uöt64_t
 
•‹_ªs
 = 
scheduÀr
->
cfg
.
•‹adic_ª£rv©i⁄
;

2856 
uöt64_t
 
≥r_ªs
 = 
utû_limô
 - 
≠î_ªs
 - 
•‹_ªs
;

2858 
	`DEBUG
("Admission: %sÅpr=%u util_limit=%lluáper_res=%llu spor_res=%lluÖer_res=%llu\n",

2859 
thªad
->
c⁄°øöts
.
ty≥
==
APERIODIC
 ? "Aperiodic" :

2860 
thªad
->
c⁄°øöts
.
ty≥
==
PERIODIC
 ? "Periodic" :

2861 
thªad
->
c⁄°øöts
.
ty≥
==
SPORADIC
 ? "Sporadic" : "Unknown",

2862 
thªad
->
c⁄°øöts
.
öãºu±_¥i‹ôy_˛ass
,

2863 
utû_limô
,
≠î_ªs
,
•‹_ªs
,
≥r_ªs
);

2865 i‡(
thªad
->
c⁄°øöts
.
öãºu±_¥i‹ôy_˛ass
 > 0xe) {

2866 
	`DEBUG
("Reje˘ögÅhªad wôhÅoÿhigh o‡™ i¡îru±Öri‹ôy cœs†(%u)\n", 
thªad
->
c⁄°øöts
.
öãºu±_¥i‹ôy_˛ass
);

2871 
thªad
->
c⁄°øöts
.
ty≥
) {

2872 
APERIODIC
:

2874 
	`ª£t_°©e
(
thªad
);

2875 
	`ª£t_°©s
(
thªad
);

2876 
thªad
->
dódlöe
 =Åhªad->
c⁄°øöts
.
≠îiodic
.
¥i‹ôy
;

2877 
	`DEBUG
("Admitting APERIODICÅhread\n");

2880 
PERIODIC
: {

2881 
uöt64_t
 
this_utû
 = (
thªad
->
c⁄°øöts
.
≥riodic
.
¶i˚
*
UTIL_ONE
)/thªad->c⁄°øöts.≥riodic.
≥riod
;

2882 
uöt64_t
 
cur_utû
, 
cur_cou¡
;

2883 
uöt64_t
 
rms_limô
;

2884 
uöt64_t
 
our_limô
;

2886 
	`gë_≥riodic_utû
(
scheduÀr
,&
cur_utû
,&
cur_cou¡
);

2887 
rms_limô
 = 
	`gë_≥riodic_utû_rms_limô
(
cur_cou¡
+1);

2888 
our_limô
 = 
	`MIN
(
rms_limô
,
≥r_ªs
);

2890 
	`DEBUG
("Pîiodi¯admissi⁄:Åhis_utû=%Œu cur_utû=%ŒuÑms_limô=%Œu our_limô=%Œu\n",
this_utû
,
cur_utû
,
rms_limô
,
our_limô
);

2892 i‡(
cur_utû
+
this_utû
 < 
our_limô
) {

2894 
	`ª£t_°©e
(
thªad
);

2895 
	`ª£t_°©s
(
thªad
);

2897 
thªad
->
dódlöe
 = 
now
 +Åhªad->
c⁄°øöts
.
≥riodic
.
pha£
;

2898 
	`DEBUG
("Admitting PERIODICÅhread\n");

2901 
	`DEBUG
("Rejected PERIODICÅhread\n");

2907 
SPORADIC
: {

2908 
uöt64_t
 
this_utû
;

2909 
uöt64_t
 
time_À·
;

2910 
uöt64_t
 
cur_utû
, 
cur_cou¡
;

2911 
uöt64_t
 
our_limô
;

2913 i‡((
now
 +

2914 
thªad
->
c⁄°øöts
.
•‹adic
.
pha£
 +

2915 
thªad
->
c⁄°øöts
.
•‹adic
.
size
) >=

2916 
thªad
->
c⁄°øöts
.
•‹adic
.
dódlöe
) {

2918 
	`DEBUG
("Rejected impossible SPORADICÅhread\n");

2922 
time_À·
 = (
thªad
->
c⁄°øöts
.
•‹adic
.
dódlöe
 - (
now
 +Åhªad->c⁄°øöts.
≥riodic
.
pha£
));

2923 
this_utû
 = (
thªad
->
c⁄°øöts
.
•‹adic
.
size
*
UTIL_ONE
)/
time_À·
;

2925 
	`gë_•‹adic_utû
(
scheduÀr
,
now
,&
cur_utû
,&
cur_cou¡
);

2926 
our_limô
 = 
•‹_ªs
;

2928 
	`DEBUG
("Sp‹adi¯admissi⁄:Åhis_utû=%Œu cur_utû=%Œu our_limô=%Œu\n",
this_utû
,
cur_utû
,
our_limô
);

2930 i‡((
cur_utû
+
this_utû
Ë< 
our_limô
) {

2932 
	`ª£t_°©e
(
thªad
);

2933 
	`ª£t_°©s
(
thªad
);

2935 
thªad
->
dódlöe
 = 
now
 +Åhªad->
c⁄°øöts
.
•‹adic
.
pha£
;

2936 
	`DEBUG
("Admitting SPORADICÅhread\n");

2939 
	`DEBUG
("Rejected SPORADICÅhread\n");

2945 
	`ERROR
("AttemptÅoádmit unknown kind ofÅhread\n");

2949 
	}
}

2951 
ölöe
 
uöt64_t
 
	$gë_avg_≥r
(
π_¥i‹ôy_queue
 *
ru¬abÀ
,Ñt_¥i‹ôy_queuê*
≥ndög
, 
π_thªad
 *
√w_thªad
)

2953 
uöt64_t
 
sum_≥riod
 = 0;

2954 
uöt64_t
 
num_≥riodic
 = 0;

2955 
i
;

2957 
i
 = 0; i < 
ru¬abÀ
->
size
; i++)

2959 
π_thªad
 *
thªad
 = 
ru¬abÀ
->
thªads
[
i
];

2960 i‡(
thªad
->
c⁄°øöts
.
ty≥
 =
PERIODIC
) {

2961 
sum_≥riod
 +
thªad
->
c⁄°øöts
.
≥riodic
.
≥riod
;

2962 
num_≥riodic
++;

2966 
i
 = 0; i < 
≥ndög
->
size
; i++)

2968 
π_thªad
 *
thªad
 = 
≥ndög
->
thªads
[
i
];

2969 i‡(
thªad
->
c⁄°øöts
.
ty≥
 =
PERIODIC
) {

2970 
sum_≥riod
 +
thªad
->
c⁄°øöts
.
≥riodic
.
≥riod
;

2971 
num_≥riodic
++;

2975 i‡(
√w_thªad
->
c⁄°øöts
.
ty≥
 =
PERIODIC
)

2977 
sum_≥riod
 +
√w_thªad
->
c⁄°øöts
.
≥riodic
.
≥riod
;

2978 
num_≥riodic
++;

2981 
sys_öfo
 *
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

2982 
sum_≥riod
 +
sys
->
˝us
[
	`my_˝u_id
()]->
sched_°©e
->
cfg
.
≠îiodic_qu™tum
;

2983 
num_≥riodic
++;

2984  (
sum_≥riod
 / 
num_≥riodic
);

2985 
	}
}

2987 
ölöe
 
uöt64_t
 
	$gë_mö_≥r
(
π_¥i‹ôy_queue
 *
ru¬abÀ
,Ñt_¥i‹ôy_queuê*
≥ndög
, 
π_thªad
 *
thªad
)

2989 
uöt64_t
 
mö_≥riod
 = 0xFFFFFFFFFFFFFFFF;

2990 
i
;

2991 
i
 = 0; i < 
ru¬abÀ
->
size
; i++)

2993 
π_thªad
 *
thªad
 = 
ru¬abÀ
->
thªads
[
i
];

2994 i‡(
thªad
->
c⁄°øöts
.
ty≥
 =
PERIODIC
)

2996 
mö_≥riod
 = 
	`MIN
(
thªad
->
c⁄°øöts
.
≥riodic
.
≥riod
, min_period);

3000 
i
 = 0; i < 
≥ndög
->
size
; i++)

3002 
π_thªad
 *
thªad
 = 
≥ndög
->
thªads
[
i
];

3003 i‡(
thªad
->
c⁄°øöts
.
ty≥
 =
PERIODIC
)

3005 
mö_≥riod
 = 
	`MIN
(
thªad
->
c⁄°øöts
.
≥riodic
.
≥riod
, min_period);

3008  
mö_≥riod
;

3009 
	}
}

3013 
nk_sched_≥r˝u_°©e
 *
	$öô_loˇl_°©e
(
nk_sched_c⁄fig
 *
cfg
)

3015 
nk_sched_≥r˝u_°©e
 *
°©e
 = (nk_sched_≥r˝u_°©e*)
	`MALLOC
((nk_sched_percpu_state));

3017 i‡(!
°©e
) {

3018 
	`ERROR
("CouldÇotállocateÑt state\n");

3019 
Áû_‰ì
;

3022 
	`ZERO
(
°©e
);

3024 
°©e
->
cfg
 = *cfg;

3026 
°©e
->
ru¬abÀ
.
ty≥
 = 
RUNNABLE_QUEUE
;

3027 
°©e
->
≥ndög
.
ty≥
 = 
PENDING_QUEUE
;

3028 
°©e
->
≠îiodic
.
ty≥
 = 
APERIODIC_QUEUE
;

3032 
	`•ölock_öô
(&
°©e
->
lock
);

3034  
°©e
;

3036 
Áû_‰ì
:

3037 
	`FREE
(
°©e
);

3040 
	}
}

3042 #i‡
NAUT_CONFIG_INTERRUPT_THREAD


3043 
	$öãºu±
(*
ö
, **
out
)

3045 i‡(
	`nk_thªad_«me
(
	`gë_cur_thªad
(),"(intr)")) {

3046 
	`ERROR
("FailedÅoÇame interruptÅhread\n");

3050 
nk_sched_c⁄°øöts
 
c
 = { .
ty≥
=
PERIODIC
,

3051 .
öãºu±_¥i‹ôy_˛ass
=0xe,

3052 .
≥riodic
.
pha£
=0,

3053 .
≥riodic
.
≥riod
=
NAUT_CONFIG_INTERRUPT_THREAD_PERIOD_US
*1000ULL,

3054 .
≥riodic
.
¶i˚
=
NAUT_CONFIG_INTERRUPT_THREAD_SLICE_US
*1000ULL};

3056 i‡(
	`nk_sched_thªad_ch™ge_c⁄°øöts
(&
c
)) {

3057 
	`ERROR
("UnableÅo set constraints for interruptÅhread\n");

3058 
	`∑nic
("UnableÅo set constraints for interruptÅhread\n");

3063 
	`gë_cur_thªad
()->
sched_°©e
->
is_öå
=1;

3066 i‡(!
	`úqs_íabÀd
()) {

3067 
	`∑nic
("InterruptÅhreadÑunning with interrupts off!");

3069 
	`DEBUG
("InterruptÅhread halting\n");

3072 
__asm__
 
	`__vﬁ©ûe__
 ("hlt");

3073 
	`DEBUG
("InterruptÅhreadáwoke from halt (interrupt occurred)\n");

3075 
	}
}

3077 
	$°¨t_öãºu±_thªad_f‹_this_˝u
()

3079 
nk_thªad_id_t
 
tid
;

3082 i‡(
	`nk_thªad_°¨t
(
öãºu±
, 0, 0, 1, 
PAGE_SIZE
, &
tid
, 
	`my_˝u_id
())) {

3083 
	`ERROR
("FailedÅo start interruptÅhread\n");

3087 
	`INFO
("I¡îru±ÅhªadÜaunched o¿˝u %dá†%p\n", 
	`my_˝u_id
(), 
tid
);

3091 
	}
}

3097 
	$sh¨ed_öô
(
˝u
 *
my_˝u
, 
nk_sched_c⁄fig
 *
cfg
)

3099 
nk_thªad_t
 * 
maö
 = 
NULL
;

3100 * 
my_°ack
 = 
NULL
;

3101 
Êags
;

3103 
nk_sched_c⁄°øöts
 
deÁu…_c⁄°øöts
 =

3104 { .
ty≥
 = 
APERIODIC
,

3105 .
≠îiodic
.
¥i‹ôy
 = 
cfg
->
≠îiodic_deÁu…_¥i‹ôy
 };

3109 
my_˝u
->
sched_°©e
 = 
	`öô_loˇl_°©e
(
cfg
);

3111 i‡(!
my_˝u
->
sched_°©e
) {

3112 
	`ERROR
("FailedÅoállocateÜocal state\n");

3116 
Êags
 = 
	`úq_dißbÀ_ßve
();

3119 
maö
 = 
	`MALLOC
((
nk_thªad_t
));

3120 i‡(!
maö
) {

3121 
	`ERROR_PRINT
("CouldÇotállocate mainÅhread\n");

3122 
Áû_‰ì
;

3125 
	`ZERO
(
maö
);

3129 
my_°ack
 = 
	`mÆloc
(
PAGE_SIZE
);

3131 i‡(!
my_°ack
) {

3132 
	`ERROR
("Couldn'tállocate stack\n");

3133 
Áû_‰ì
;

3135 
	`mem£t
(
my_°ack
, 0, 
PAGE_SIZE
);

3137 
maö
->
°ack_size
 = 
PAGE_SIZE
;

3139 i‡(
	`_nk_thªad_öô
(
maö
, 
my_°ack
, 1, 
my_˝u
->
id
, 
NULL
)) {

3140 
	`ERROR
("FailedÅo initÅhread\n");

3141 
Áû_‰ì
;

3152 
maö
->
r•
 -= 1024;

3154 
maö
->
bound_˝u
 = 
	`my_˝u_id
();

3155 
maö
->
°©us
 = 
NK_THR_RUNNING
;

3156 
maö
->
sched_°©e
->
°©us
 = 
ADMITTED
;

3159 
maö
->
sched_°©e
->
c⁄°øöts
 = 
deÁu…_c⁄°øöts
;

3162 
maö
->
sched_°©e
->
dódlöe
 = 
deÁu…_c⁄°øöts
.
≠îiodic
.
¥i‹ôy
;

3164 
	`ª£t_°©s
(
maö
->
sched_°©e
);

3166 
	`put_cur_thªad
(
maö
);

3168 
my_˝u
->
sched_°©e
->
cuºít
 = 
maö
->sched_state;

3170 
	`nk_sched_thªad_po°_¸óã
(
maö
);

3172 #ifde‡
NAUT_CONFIG_INTERRUPT_THREAD_ALLOW_IDLE


3174 
maö
->
sched_°©e
->
is_öå
=1;

3178 
	`m§_wrôe
(
IA32_TIME_STAMP_COUNTER
,0);

3180 
	`úq_íabÀ_ª°‹e
(
Êags
);

3189 
Áû_‰ì
:

3191 i‡(
my_°ack
) {

3192 
	`‰ì
(
my_°ack
);

3194 
	`FREE
(
maö
);

3196 
	`°i
();

3199 
	}
}

3201 
	$öô_globÆ_°©e
()

3203 
	`ZERO
(&
globÆ_sched_°©e
);

3204 
globÆ_sched_°©e
.
thªad_li°
 = 
	`π_li°_öô
();

3205 i‡(!
globÆ_sched_°©e
.
thªad_li°
) {

3206 
	`ERROR
("Cannotállocate globalÅhreadÜist\n");

3210 
	`•ölock_öô
(&
globÆ_sched_°©e
.
lock
);

3214 
	}
}

3226 
	$nk_sched_öô_≠
 (
nk_sched_c⁄fig
 *
cfg
)

3228 
˝u_id_t
 
id
 = 
	`my_˝u_id
();

3229 
˝u
 * 
my_˝u
 = 
	`gë_˝u
();

3231 
	`DEBUG
("Inôülizög scheduÀ∏⁄ AP %u (%p)\n",
id
,
my_˝u
);

3233 i‡(
	`sh¨ed_öô
(
my_˝u
,
cfg
)) {

3234 
	`ERROR
("CouldÇot intialize scheduler\n");

3240 
	}
}

3243 #i‡
NAUT_CONFIG_AUTO_REAP


3244 
	$ª≠î
(*
ö
, **
out
)

3246 i‡(
	`nk_thªad_«me
(
	`gë_cur_thªad
(),"(reaper)")) {

3247 
	`ERROR
("FailedÅoÇameÑeaper\n");

3251 
nk_sched_c⁄°øöts
 
c
 = { .
ty≥
=
APERIODIC
,

3252 .
≠îiodic
.
¥i‹ôy
=-1 };

3254 i‡(
	`nk_sched_thªad_ch™ge_c⁄°øöts
(&
c
)) {

3255 
	`ERROR
("UnableÅo set constraints forÑeaperÅhread\n");

3260 
	`DEBUG
("Reaper sleeping\n");

3261 
	`nk_¶ìp
(
NAUT_CONFIG_AUTO_REAP_PERIOD_MS
*1000000ULL);

3262 
	`DEBUG
("ReapingÅhreads\n");

3263 
	`nk_sched_ª≠
(1);

3265 
	}
}

3267 
	$°¨t_ª≠î
()

3269 
nk_thªad_id_t
 
tid
;

3271 i‡(
	`nk_thªad_°¨t
(
ª≠î
, 0, 0, 1, 
PAGE_SIZE_4KB
, &
tid
, 0)) {

3272 
	`ERROR
("FailedÅo startÑeaperÅhread\n");

3276 
	`INFO
("Ró≥∏œunched o¿˝u 0á†%p\n",
tid
);

3279 
	}
}

3284 
	$nk_sched_°¨t
()

3286 
uöt64_t
 
num_˝us
 = 
	`nk_gë_num_˝us
();

3287 
˝u
 *
my_˝u
 = 
	`gë_˝u
();

3288 
sys_öfo
 *
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

3289 
≠ic_dev
 *
≠ic
 = 
sys
->
˝us
[
	`my_˝u_id
()]->apic;

3290 
uöt64_t
 
cur_cy˛es
;

3292 
	`DEBUG
("ScheduÀ∏°¨tu∞- %s\n", 
my_˝u
->
is_b•
 ? "bsp" : "ap");

3295 
	`__sync_„tch_™d_add
(&
sync_cou¡
,1);

3296 
sync_cou¡
 < 
num_˝us
) {

3299 
cur_cy˛es
 = 
	`rdtsc
();

3300 i‡(
my_˝u
->
is_b•
) {

3305 
tsc_°¨t
 = 
cur_cy˛es
 * 16ULL + 1ULL;

3307 
tsc_°¨t
==-1ULL) {

3312 
	`m§_wrôe
(
IA32_TIME_STAMP_COUNTER
,
tsc_°¨t
);

3314 
cur_cy˛es
 = 
	`rdtsc
();

3316 
my_˝u
->
sched_°©e
->
tsc
.
sync_time_cy˛es
 = 
cur_cy˛es
;

3318 
my_˝u
->
sched_°©e
->
tsc
.
sync_time
 = 
	`≠ic_cy˛es_to_ªÆtime
(
≠ic
,
cur_cy˛es
);

3320 
	`DEBUG
("Timêª°¨ãdáà%lu cy˛e†(cuºíéy %lu cy˛e†/ %luÇs)\n", 
tsc_°¨t
, 
cur_cy˛es
, 
my_˝u
->
sched_°©e
->
tsc
.
sync_time
);

3328 #ifde‡
NAUT_CONFIG_AUTO_REAP


3329 i‡(
my_˝u
->
is_b•
) {

3330 
	`DEBUG
("StartingÑeaperÅhread\n");

3331 i‡(
	`°¨t_ª≠î
()) {

3332 
	`ERROR
("Cannot startÑeaperÅhread\n");

3333 
	`∑nic
("Cannot startÑeaperÅhread\n");

3339 #ifde‡
NAUT_CONFIG_USE_IDLE_THREADS


3341 
	`DEBUG
("Sèπög idÀÅhªad f‹ CPU %d\n",
my_˝u
->
id
);

3342 
	`nk_thªad_°¨t
(
idÀ
, 
NULL
, NULL, 0, 
TSTACK_DEFAULT
, NULL, 
my_˝u
->
id
);

3345 #ifde‡
NAUT_CONFIG_INTERRUPT_THREAD


3346 
	`INFO
("Sèπög i¡îru±Åhªad f‹ CPU %d\n",
my_˝u
->
id
);

3347 i‡(
	`°¨t_öãºu±_thªad_f‹_this_˝u
()) {

3348 
	`ERROR
("Cannot start interruptÅhread for CPU!\n");

3349 
	`∑nic
("Cannot start interruptÅhread for CPU!\n");

3358 
nk_thªad
 *
maö
 = 
	`gë_cur_thªad
();

3360 
uöt64_t
 
now
 = 
	`cur_time
();

3363 
maö
->
sched_°©e
->
°¨t_time
 = 
now
;

3365 
my_˝u
->
sched_°©e
->
tsc
.
°¨t_time
 = 
now
;

3366 
my_˝u
->
sched_°©e
->
tsc
.
£t_time
 = 
now
 + my_˝u->sched_°©e->
cfg
.
≠îiodic_qu™tum
;

3368 
	`£t_timî
(
my_˝u
->
sched_°©e
, 
maö
->sched_°©e, 
now
);

3370 
	`DEBUG
("Sèπu∞d⁄êmaöÅid=%lu\n",
maö
->
tid
);

3372 
	}
}

3375 
timög_ã°
(
uöt64_t
 
N
, uöt64_à
M
, 
¥öt
);

3384 
	$nk_sched_öô
(
nk_sched_c⁄fig
 *
cfg
)

3386 
˝u
 * 
my_˝u
 = 
	`nk_gë_«utûus_öfo
()->
sys
.
˝us
[nk_gë_«utûus_öfo()->sys.
b•_id
];

3388 
	`INFO
("Initializing scheduler on BSP\n");

3394 i‡(
	`öô_globÆ_°©e
()) {

3395 
	`ERROR
("CouldÇot initialize global scheduler state\n");

3399 i‡(
	`sh¨ed_öô
(
my_˝u
,
cfg
)) {

3400 
	`ERROR
("CouldÇot intialize scheduler\n");

3405 
	}
}

3410 
nk_sim∂e_timög_lo›
(
uöt64_t
);

3412 
	$timög_ã°
(
uöt64_t
 
N
, uöt64_à
M
, 
¥öt
)

3414 
uöt64_t
 
max
, 
mö
, 
sum
, 
sum2
;

3415 
uöt64_t
 
i
;

3416 
uöt64_t
 
°¨t
, 
dur
;

3417 
uöt64_t
 
begö
, 
tŸÆdur
;

3419 
sum
=
sum2
=0;

3420 
max
=0;

3421 
mö
=-1;

3423 i‡(
¥öt
) {

3424 
	`INFO
("BegönögÅimögÅe° (%lu cÆl†tÿlo› o‡%lu iãøti⁄s)\n",
M
,
N
);

3427 
begö
 = 
	`rdtsc
();

3428 
i
=0;i<
M
;i++) {

3430 
°¨t
 = 
	`rdtsc
();

3431 
	`nk_sim∂e_timög_lo›
(
N
);

3432 
dur
 = 
	`rdtsc
(Ë- 
°¨t
;

3433 i‡(
dur
>
max
) { max=dur; }

3434 i‡(
dur
<
mö
) { min=dur; }

3435 
sum
 +
dur
;

3436 
sum2
 +
dur
*dur;

3438 
tŸÆdur
 = 
	`rdtsc
()-
begö
;

3440 i‡(
¥öt
) {

3441 
	`INFO
("TimingÅest done - stats follow\n");

3442 
	`INFO
("%luÉxecuti⁄†o‡®lo› wôh %lu iãøti⁄s\n", 
M
,
N
);

3443 
	`INFO
("Mósuªd duøti⁄: %lu cy˛es\n",
sum
);

3444 
	`INFO
("TŸÆ duøti⁄: %lu cy˛es\n",
tŸÆdur
);

3445 
	`INFO
("Ovîhód: %lu cy˛e†(%lu cy˛es/ˇŒ)\n",
tŸÆdur
-
sum
,—ŸÆdur-sum)/
M
);

3446 
	`INFO
("mö = %lu cy˛es\n",
mö
);

3447 
	`INFO
("max = %lu cy˛es\n",
max
);

3448 
	`INFO
("avg = %lu cy˛es\n",
sum
/
M
);

3449 
	`INFO
("v¨ = %lu cy˛es\n",((
sum2
)-(
sum
*sum)/
M
)/M);

3450 
	`INFO
("sum = %lu cy˛es\n",
sum
);

3451 
	`INFO
("sum2 = %lu cy˛es\n",
sum2
);

3454 
	}
}

	@setjmp.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/£tjmp.h
>

27 
	$ã°ô
 (
jmp_buf
 
ív
,

28 
¥ev_ªs
)

30 
ªs
 = (!
¥ev_ªs
) ?Örev_res :Örev_res + 1;

32 
	`¥ötk
("L⁄g jumpög wôhÑesu… %d\n", 
ªs
);

33 
	`l⁄gjmp
(
ív
, 
ªs
);

34 
	`∑nic
("SHOULD NOT GET HERE!\n");

35 
	}
}

39 
	$ã°_£é⁄g
 ()

41 
jmp_buf
 
ív
;

43 
ªs
 = 
	`£tjmp
(
ív
);

45 
	`¥ötk
("ª†0x%08x\n", 
ªs
);

47 i‡(
ªs
 > 1) {

51 
	`ã°ô
(
ív
, 
ªs
);

54 
	}
}

	@sfi.c

23 
	~<«utûus/sfi.h
>

24 
	~<«utûus/«ut_°rög.h
>

25 
	~<«utûus/«utûus.h
>

26 
	~<«utûus/«ut_as£π.h
>

27 
	~<«utûus/m§.h
>

28 
	~<«utûus/∑gög.h
>

29 
	~<«utûus/˝uid.h
>

30 
	~<«utûus/mm.h
>

31 
	~<dev/≠ic.h
>

32 
	~<dev/iﬂpic.h
>

35 #i‡
NAUT_CONFIG_DEBUG_SFI


36 
	#SFI_DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("SFI: " fmt, ##¨gs)

	)

38 
	#SFI_DEBUG
(
fmt
, 
¨gs
...)

	)

41 * 
	gefi_mem_ty≥s
[] = {

60 
uöt8_t


61 
	$blk_cksum_ok
 (c⁄° 
uöt8_t
 * 
curs‹
, 
Àn
)

63 
sum
 = 0;

64 
Àn
--) {

65 
sum
 +*
curs‹
++;

67  ((
sum
 & 0xff) == 0);

68 
	}
}

75 
sfi_sys_tbl
 *

76 
	$sfi_föd_sy°
 ()

78 
uöt32_t
 * 
curs‹
 = (uöt32_t*)
SFI_SYST_SRCH_START
;

79 
uöt32_t
 * 
íd
 = (uöt32_t*)
SFI_SYST_SRCH_END
;

80 
curs‹
++ <
íd
) {

81 i‡(*
curs‹
 =
SFI_SYST_SIG
) {

82  (
sfi_sys_tbl
*)
curs‹
;

86  
NULL
;

87 
	}
}

91 
	$∑r£_sfi_iﬂpic
 (
sfi_iﬂpic_tbl
 * 
tbl
, 
sys_öfo
 * 
sys
)

93 
iﬂpic
 * 
iﬂ
 = 
NULL
;

94 
√¡s
;

95 
i
;

97 i‡(!
	`blk_cksum_ok
((
uöt8_t
*)
tbl
,Åbl->
hdr
.
Àn
)) {

98 
	`ERROR_PRINT
("SFI IOAPICÅable checksum failed\n");

102 
√¡s
 = (
tbl
->
hdr
.
Àn
 - (
sfi_comm⁄_hdr
)Ë/ (
sfi_iﬂpic_desc_t
);

104 
i
 = 0; i < 
√¡s
; i++) {

106 
sfi_iﬂpic_desc_t
 
iﬂpic
 = 
tbl
->
íåõs
[
i
];

108 
	`SFI_DEBUG
("Found IOAPIC %u (ba£=%p)\n", 
i
, (*)
iﬂpic
);

110 i‡(
sys
->
num_iﬂpics
 =
NAUT_CONFIG_MAX_IOAPICS
) {

111 
	`∑nic
("IOAPIC countÉxceeded max (change it in .config)\n");

114 i‡(!(
iﬂ
 = 
	`mm_boŸ_Æloc
((
iﬂpic
)))) {

115 
	`∑nic
("Couldn'àÆloˇã såu˘ f‹ IOAPIC %u\n", 
i
);

117 
	`mem£t
(
iﬂ
, 0, (
iﬂpic
));

119 
iﬂ
->
id
 = 
i
;

120 
iﬂ
->
vîsi⁄
 = 0;

121 
iﬂ
->
ußbÀ
 = 1;

122 
iﬂ
->
ba£
 = 
iﬂpic
;

124 
sys
->
iﬂpics
[sys->
num_iﬂpics
] = 
iﬂ
;

125 
sys
->
num_iﬂpics
++;

129 
	}
}

136 
uöt32_t


137 
	$gë_my_≠icid
 ()

140 
˝uid_ªt_t
 
r
;

141 
	`˝uid
(
CPUID_FEATURE_INFO
, &
r
);

142  (
r
.
b
 >> 24) & 0xff;

143 
	}
}

147 
	$∑r£_sfi_˝u
 (
sfi_˝u_tbl
 * 
tbl
, 
sys_öfo
 * 
sys
)

149 
√¡s
;

150 
i
;

152 i‡(!
	`blk_cksum_ok
((
uöt8_t
*)
tbl
,Åbl->
hdr
.
Àn
)) {

153 
	`ERROR_PRINT
("SFI CPUÅable checksum failed\n");

157 
√¡s
 = (
tbl
->
hdr
.
Àn
 - (
sfi_comm⁄_hdr
)Ë/ (
sfi_˝u_desc_t
);

159 
i
 = 0; i < 
√¡s
; i++) {

160 
˝u
 * 
√w_˝u
 = 
NULL
;

162 
sfi_˝u_desc_t
 
≠icid
 = 
tbl
->
íåõs
[
i
];

164 
	`SFI_DEBUG
("Found CPU (%uËwôh APIC ID %u\n", 
i
, 
≠icid
);

165 i‡(
sys
->
num_˝us
 =
NAUT_CONFIG_MAX_CPUS
) {

166 
	`∑nic
("CPU countÉxceeded max (check your .config)\n");

169 
√w_˝u
 = 
	`mm_boŸ_Æloc
((
˝u
));

170 i‡(!
√w_˝u
) {

171 
	`∑nic
("Couldn'àÆloˇãÇew CPU såu˘ (%u)\n", 
sys
->
num_˝us
);

173 
	`mem£t
(
√w_˝u
, 0, (
˝u
));

175 i‡(
≠icid
 =
	`gë_my_≠icid
()) {

176 
√w_˝u
->
is_b•
 = 1;

177 
sys
->
b•_id
 = sys->
num_˝us
;

179 
√w_˝u
->
is_b•
 = 0;

182 
√w_˝u
->
id
 = 
sys
->
num_˝us
;

183 
√w_˝u
->
œpic_id
 = 
≠icid
;

184 
√w_˝u
->
íabÀd
 = 1;

185 
√w_˝u
->
˝u_sig
 = 0;

186 
√w_˝u
->
„©_Êags
 = 0;

187 
√w_˝u
->
sy°em
 = 
sys
;

189 
√w_˝u
->
˝u_khz
 = 1100;

191 
	`•ölock_öô
(&
√w_˝u
->
lock
);

193 
sys
->
˝us
[sys->
num_˝us
] = 
√w_˝u
;

194 
sys
->
num_˝us
++;

199 
	}
}

202 
	$sfi_fûl_©ås
 (* 
°r
, 
uöt64_t
 
©å
)

204 i‡(
©å
 & 
EFI_MEMORY_UC
) {

205 
	`°rˇt
(
°r
, "uc ");

208 i‡(
©å
 & 
EFI_MEMORY_WC
) {

209 
	`°rˇt
(
°r
, "wc ");

212 i‡(
©å
 & 
EFI_MEMORY_WT
) {

213 
	`°rˇt
(
°r
, "wt ");

216 i‡(
©å
 & 
EFI_MEMORY_WB
) {

217 
	`°rˇt
(
°r
, "wb ");

220 i‡(
©å
 & 
EFI_MEMORY_UCE
) {

221 
	`°rˇt
(
°r
, "uce ");

224 i‡(
©å
 & 
EFI_MEMORY_WP
) {

225 
	`°rˇt
(
°r
, "wp ");

228 i‡(
©å
 & 
EFI_MEMORY_RP
) {

229 
	`°rˇt
(
°r
, "rp ");

232 i‡(
©å
 & 
EFI_MEMORY_XP
) {

233 
	`°rˇt
(
°r
, "xp ");

236 i‡(
©å
 & 
EFI_MEMORY_RUNTIME
) {

237 
	`°rˇt
(
°r
, "rt");

240 
	}
}

244 
	$sfi_gë_mm≠_√¡rõs
 (
sfi_mm≠_tbl
 * 
tbl
)

246  (
tbl
->
hdr
.
Àn
 - (
sfi_comm⁄_hdr
)Ë/ (
efi_mem_desc_t
);

247 
	}
}

250 
uöt64_t


251 
	$∑r£_sfi_mm≠
 (
sfi_mm≠_tbl
 * 
tbl
, 
nk_mem_öfo
 * 
sysmem
)

253 
√¡s
;

254 
i
;

255 
uöt64_t
 
pmem
 = 0;

257 i‡(!
	`blk_cksum_ok
((
uöt8_t
*)
tbl
,Åbl->
hdr
.
Àn
)) {

258 
	`ERROR_PRINT
("SFI MMAPÅable checksum failed\n");

262 
√¡s
 = (
tbl
->
hdr
.
Àn
 - (
sfi_comm⁄_hdr
)Ë/ (
efi_mem_desc_t
);

264 
i
 = 0; i < 
√¡s
; i++) {

265 
©ås
[64];

266 
	`mem£t
(
©ås
, 0, (attrs));

268 
efi_mem_desc_t
 
mem
 = 
tbl
->
íåõs
[
i
];

269 
	`SFI_DEBUG
("Mem‹y Regi⁄ %u:\n", 
i
);

270 
	`SFI_DEBUG
(" Ty≥: [%s]\n", (
mem
.
ty≥
 > 
EfiMaxMem‹yTy≥
Ë? "N/A" : 
efi_mem_ty≥s
[mem.type]);

271 
	`SFI_DEBUG
(" Phy†Sèπ: %p\n", (*)
mem
.
phys_°¨t
);

272 
	`SFI_DEBUG
(" VúàSèπ: %p\n", (*)
mem
.
vút_°¨t
);

273 
	`SFI_DEBUG
(" Num Pages: %Œu\n", 
mem
.
num_∑ges
);

276 
pmem
 +((
uöt64_t
)
mem
.
num_∑ges
)*((uöt64_t)
PAGE_SIZE_4KB
);

278 
	`sfi_fûl_©ås
(
©ås
, 
mem
.
©å
);

280 
	`SFI_DEBUG
(" Aârs: %s\n", 
©ås
);

283  
pmem
;

284 
	}
}

288 
	$∑r£_íåy
 (
sfi_comm⁄_hdr
 * 
íåy
, 
sys_öfo
 * 
sys
)

290 
	`ASSERT
(
íåy
);

292 
íåy
->
sig
) {

293 
SFI_CPUS_SIG
:

294 
	`∑r£_sfi_˝u
((
sfi_˝u_tbl
*)
íåy
, 
sys
);

296 
SFI_APIC_SIG
:

297 
	`∑r£_sfi_iﬂpic
((
sfi_iﬂpic_tbl
*)
íåy
, 
sys
);

299 
SFI_MMAP_SIG
:

302 
SFI_FREQ_SIG
:

303 
	`SFI_DEBUG
("Found FREQÅable\n");

305 
SFI_MTMR_SIG
:

306 
	`SFI_DEBUG
("Found MTMRÅable\n");

308 
SFI_MRTC_SIG
:

309 
	`SFI_DEBUG
("Found MRTCÅable\n");

311 
SFI_DEVS_SIG
:

312 
	`SFI_DEBUG
("Found DEVSÅable\n");

314 
SFI_WAKE_SIG
:

315 
	`SFI_DEBUG
("Found WAKEÅable\n");

317 
SFI_GPIO_SIG
:

318 
	`SFI_DEBUG
("Found GPIOÅable\n");

322 
	`ERROR_PRINT
("Unknow¿SFIÉ¡ryÅy≥: 0x%x\n", 
íåy
->
sig
);

327 
	}
}

331 
	$sfi_∑r£_sy°
 (
sys_öfo
 * 
sys
, 
sfi_sys_tbl
 * 
sfi
)

333 
√¡s
;

334 
i
;

336 i‡(!
	`blk_cksum_ok
((
uöt8_t
*)
sfi
, sfi->
hdr
.
Àn
)) {

337 
	`ERROR_PRINT
("Checksum failed on SFI SYSTÅable\n");

341 
√¡s
 = (
sfi
->
hdr
.
Àn
 - (
sfi_comm⁄_hdr
))/(sfi->
íåõs
[0]);

343 
	`SFI_DEBUG
("Dëe˘ed %uÉ¡rõ†öÅhêSFI SYSTÅabÀ\n", 
√¡s
);

345 
i
 = 0; i < 
√¡s
; i++) {

346 
	`∑r£_íåy
((
sfi_comm⁄_hdr
*)(
sfi
->
íåõs
[
i
]), 
sys
);

349 
	`SFI_DEBUG
("All SFI SYSTÉntriesÖarsed\n");

352 
	}
}

354 
sfi_mm≠_tbl
 *

355 
	$sfi_gë_mm≠
 ()

357 
sfi_sys_tbl
 * 
sfi
 = 
	`sfi_föd_sy°
();

358 
√¡s
 = 0;

359 
i
;

361 i‡(!
sfi
) {

362 
	`ERROR_PRINT
("CouldÇot find SFI SYSTÅable\n");

363  
NULL
;

366 
√¡s
 = (
sfi
->
hdr
.
Àn
 - (
sfi_comm⁄_hdr
))/(sfi->
íåõs
[0]);

368 
i
 = 0; i < 
√¡s
; i++) {

369 
sfi_comm⁄_hdr
* 
íåy
 = (sfi_comm⁄_hdr*)
sfi
->
íåõs
[
i
];

370 i‡(
íåy
->
sig
 !
SFI_MMAP_SIG
) {

373  (
sfi_mm≠_tbl
*)
íåy
;

377  
NULL
;

378 
	}
}

382 
	$sfi_∑r£_phys_mem
 (
nk_mem_öfo
 * 
mem
)

384 
sfi_sys_tbl
 * 
sfi
 = 
	`sfi_föd_sy°
();

385 
√¡s
 = 0;

386 
i
;

388 i‡(!
sfi
) {

389 
	`ERROR_PRINT
("CouldÇot find SFI SYSTÅable\n");

393 
√¡s
 = (
sfi
->
hdr
.
Àn
 - (
sfi_comm⁄_hdr
))/(sfi->
íåõs
[0]);

395 
i
 = 0; i < 
√¡s
; i++) {

396 
sfi_comm⁄_hdr
* 
íåy
 = (sfi_comm⁄_hdr*)
sfi
->
íåõs
[
i
];

397 i‡(
íåy
->
sig
 !
SFI_MMAP_SIG
) {

400  
	`∑r£_sfi_mm≠
((
sfi_mm≠_tbl
*)
íåy
, 
mem
);

405 
	}
}

	@shell.c

24 
	~<«utûus/«utûus.h
>

25 
	~<«utûus/shñl.h
>

26 
	~<«utûus/vc.h
>

27 
	~<«utûus/dev.h
>

28 
	~<«utûus/blkdev.h
>

29 
	~<«utûus/√tdev.h
>

30 
	~<«utûus/ch¨dev.h
>

31 
	~<«utûus/fs.h
>

32 
	~<«utûus/lﬂdî.h
>

33 
	~<«utûus/˝uid.h
>

34 
	~<«utûus/m§.h
>

35 
	~<«utûus/backåa˚.h
>

36 
	~<ã°/ùi.h
>

37 
	~<ã°/thªads.h
>

39 #ifde‡
NAUT_CONFIG_PALACIOS


40 
	~<«utûus/vmm.h
>

43 #ifde‡
NAUT_CONFIG_REAL_MODE_INTERFACE


44 
	~<«utûus/ªÆmode.h
>

47 #ifde‡
NAUT_CONFIG_ISOCORE


48 
	~<«utûus/isoc‹e.h
>

51 
	#MAX_CMD
 80

	)

53 
	sbu∫î_¨gs
 {

54 
nk_vútuÆ_c⁄sﬁe
 *
	mvc
;

55 
	m«me
[
MAX_CMD
];

56 
uöt64_t
 
	msize_ns
;

57 
nk_sched_c⁄°øöts
 
	mc⁄°øöts
;

62 
	#GPIO_OUTPUT
 0

	)

64 #i‡
GPIO_OUPUT


65 
	#GET_OUT
(Ë
	`öb
(0xe010)

	)

66 
	#SET_OUT
(
x
Ë
	`outb
(x,0xe010)

	)

68 
	#GET_OUT
()

	)

69 
	#SET_OUT
(
x
)

	)

72 
	#SWITCH
(Ë
	`SET_OUT
(~
	`GET_OUT
())

	)

73 
	#LOOP
(Ë{
	`SWITCH
(); 
	`udñay
(1000); }

	)

75 
	$bu∫î
(*
ö
, **
out
)

77 
uöt64_t
 
°¨t
, 
íd
, 
dur
;

78 
bu∫î_¨gs
 *
a
 = (bu∫î_¨g†*)
ö
;

80 
	`nk_thªad_«me
(
	`gë_cur_thªad
(),
a
->
«me
);

82 i‡(
	`nk_böd_vc
(
	`gë_cur_thªad
(), 
a
->
vc
)) {

83 
	`ERROR_PRINT
("C™nŸ böd vútuÆ c⁄sﬁêf‹ bu∫î %s\n",
a
->
«me
);

87 
	`nk_vc_¥ötf
("%†—id %ŒuË©ãm±ögÅÿ¥omŸêô£lf\n", 
a
->
«me
, 
	`gë_cur_thªad
()->
tid
);

89 i‡(
	`nk_sched_thªad_ch™ge_c⁄°øöts
(&
a
->
c⁄°øöts
)) {

90 
	`nk_vc_¥ötf
("%†—id %ŒuËªje˘ed -Éxôög\n", 
a
->
«me
, 
	`gë_cur_thªad
()->
tid
);

95 
	`nk_vc_¥ötf
("%†—id %ŒuË¥omŸi⁄ com∂ëê- spönög f‹ %luÇs\n", 
a
->
«me
, 
	`gë_cur_thªad
()->
tid
,á->
size_ns
);

98 
°¨t
 = 
	`nk_sched_gë_ªÆtime
();

99 
	`LOOP
();

100 
íd
 = 
	`nk_sched_gë_ªÆtime
();

101 
dur
 = 
íd
 - 
°¨t
;

103 i‡(
dur
 >
a
->
size_ns
) {

104 
	`nk_vc_¥ötf
("%†—id %ŒuËd⁄ê-Éxôög\n",
a
->
«me
,
	`gë_cur_thªad
()->
tid
);

105 
	`‰ì
(
ö
);

108 
a
->
size_ns
 -
dur
;

111 
	}
}

113 
	$œunch_≠îiodic_bu∫î
(*
«me
, 
uöt64_t
 
size_ns
, 
uöt32_t
 
çr
, uöt64_à
¥i‹ôy
)

115 
nk_thªad_id_t
 
tid
;

116 
bu∫î_¨gs
 *
a
;

118 
a
 = 
	`mÆloc
((
bu∫î_¨gs
));

119 i‡(!
a
) {

123 
	`°∫˝y
(
a
->
«me
,«me,
MAX_CMD
);á->name[MAX_CMD-1]=0;

124 
a
->
vc
 = 
	`gë_cur_thªad
()->vc;

125 
a
->
size_ns
 = size_ns;

126 
a
->
c⁄°øöts
.
ty≥
=
APERIODIC
;

127 
a
->
c⁄°øöts
.
öãºu±_¥i‹ôy_˛ass
 = (
uöt8_t
Ë
çr
;

128 
a
->
c⁄°øöts
.
≠îiodic
.
¥i‹ôy
=priority;

130 i‡(
	`nk_thªad_°¨t
(
bu∫î
, (*)
a
 , 
NULL
, 1, 
PAGE_SIZE_4KB
, &
tid
, -1)) {

131 
	`‰ì
(
a
);

136 
	}
}

138 
	$œunch_•‹adic_bu∫î
(*
«me
, 
uöt64_t
 
size_ns
, 
uöt32_t
 
çr
, uöt64_à
pha£
, uöt64_à
size
, uöt64_à
dódlöe
, uöt64_à
≠îiodic_¥i‹ôy
)

140 
nk_thªad_id_t
 
tid
;

141 
bu∫î_¨gs
 *
a
;

143 
a
 = 
	`mÆloc
((
bu∫î_¨gs
));

144 i‡(!
a
) {

148 
	`°∫˝y
(
a
->
«me
,«me,
MAX_CMD
);á->name[MAX_CMD-1]=0;

149 
a
->
vc
 = 
	`gë_cur_thªad
()->vc;

150 
a
->
size_ns
 = size_ns;

151 
a
->
c⁄°øöts
.
ty≥
=
SPORADIC
;

152 
a
->
c⁄°øöts
.
öãºu±_¥i‹ôy_˛ass
 = (
uöt8_t
Ë
çr
;

153 
a
->
c⁄°øöts
.
•‹adic
.
pha£
 =Öhase;

154 
a
->
c⁄°øöts
.
•‹adic
.
size
 = size;

155 
a
->
c⁄°øöts
.
•‹adic
.
dódlöe
 = deadline;

156 
a
->
c⁄°øöts
.
•‹adic
.
≠îiodic_¥i‹ôy
 =áperiodic_priority;

158 i‡(
	`nk_thªad_°¨t
(
bu∫î
, (*)
a
 , 
NULL
, 1, 
PAGE_SIZE_4KB
, &
tid
, -1)) {

159 
	`‰ì
(
a
);

164 
	}
}

166 
	$œunch_≥riodic_bu∫î
(*
«me
, 
uöt64_t
 
size_ns
, 
uöt32_t
 
çr
, uöt64_à
pha£
, uöt64_à
≥riod
, uöt64_à
¶i˚
)

168 
nk_thªad_id_t
 
tid
;

169 
bu∫î_¨gs
 *
a
;

171 
a
 = 
	`mÆloc
((
bu∫î_¨gs
));

172 i‡(!
a
) {

176 
	`°∫˝y
(
a
->
«me
,«me,
MAX_CMD
);á->name[MAX_CMD-1]=0;

177 
a
->
vc
 = 
	`gë_cur_thªad
()->vc;

178 
a
->
size_ns
 = size_ns;

179 
a
->
c⁄°øöts
.
ty≥
=
PERIODIC
;

180 
a
->
c⁄°øöts
.
öãºu±_¥i‹ôy_˛ass
 = (
uöt8_t
Ë
çr
;

181 
a
->
c⁄°øöts
.
≥riodic
.
pha£
 =Öhase;

182 
a
->
c⁄°øöts
.
≥riodic
.
≥riod
 =Öeriod;

183 
a
->
c⁄°øöts
.
≥riodic
.
¶i˚
 = slice;

185 i‡(
	`nk_thªad_°¨t
(
bu∫î
, (*)
a
 , 
NULL
, 1, 
PAGE_SIZE_4KB
, &
tid
, -1)) {

186 
	`‰ì
(
a
);

191 
	}
}

194 
	$h™dÀ_ˇt
(*
buf
)

196 
d©a
[
MAX_CMD
];

197 
ssize_t
 
˘
, 
i
;

199 
buf
+=3;

201 *
buf
 && *buf==' ') { buf++;}

203 i‡(!*
buf
) {

204 
	`nk_vc_¥ötf
("No fileÑequested\n");

208 
nk_fs_fd_t
 
fd
 = 
	`nk_fs_›í
(
buf
,
O_RDONLY
,0);

210 i‡(
	`FS_FD_ERR
(
fd
)) {

211 
	`nk_vc_¥ötf
("C™nŸ o≥¿\"%s\"\n",
buf
);

216 
˘
 = 
	`nk_fs_ªad
(
fd
, 
d©a
, 
MAX_CMD
);

217 i‡(
˘
<0) {

218 
	`nk_vc_¥ötf
("ErrorÑeading file\n");

219 
	`nk_fs_˛o£
(
fd
);

222 
i
=0;i<
˘
;i++) {

223 
	`nk_vc_¥ötf
("%c",
d©a
[
i
]);

225 } 
˘
>0);

230 
	}
}

232 #ifde‡
NAUT_CONFIG_REAL_MODE_INTERFACE


233 
	$h™dÀ_ªÆ
(*
cmd
)

235 
nk_ªÆ_mode_öt_¨gs
 
ã°
;

238 i‡((
	`nk_ªÆ_mode_£t_¨g_deÁu…s
(&
ã°
),

239 
	`ssˇnf
(
cmd
,"real %hx %hx %hx %hx %hx %hx:%hx",

240 &
ã°
.
ve˘‹
, &ã°.
ax
, &ã°.
bx
, &ã°.
cx
, &ã°.cx, &ã°.
es
, &ã°.
di
)==7) ||

241 (
	`nk_ªÆ_mode_£t_¨g_deÁu…s
(&
ã°
),

242 
	`ssˇnf
(
cmd
,"real %hx %hx %hx %hx %hx:%hx",

243 &
ã°
.
ve˘‹
, &ã°.
ax
, &ã°.
bx
, &ã°.
cx
, &ã°.
es
, &ã°.
di
)==6) ||

244 (
	`nk_ªÆ_mode_£t_¨g_deÁu…s
(&
ã°
),

245 
	`ssˇnf
(
cmd
,"real %hx %hx %hx %hx:%hx",

246 &
ã°
.
ve˘‹
, &ã°.
ax
, &ã°.
bx
, &ã°.
es
, &ã°.
di
)==5) ||

247 (
	`nk_ªÆ_mode_£t_¨g_deÁu…s
(&
ã°
),

248 
	`ssˇnf
(
cmd
,"real %hx %hx %hx:%hx",

249 &
ã°
.
ve˘‹
, &ã°.
ax
, &ã°.
es
, &ã°.
di
)==4) ||

250 (
	`nk_ªÆ_mode_£t_¨g_deÁu…s
(&
ã°
),

251 
	`ssˇnf
(
cmd
,"real %hx %hx:%hx",

252 &
ã°
.
ve˘‹
, &ã°.
ax
, &ã°.
es
, &ã°.
di
)==3) ||

253 (
	`nk_ªÆ_mode_£t_¨g_deÁu…s
(&
ã°
),

254 
	`ssˇnf
(
cmd
,"real %hx %hx %hx %hx %hx",

255 &
ã°
.
ve˘‹
, &ã°.
ax
, &ã°.
bx
, &ã°.
cx
, &ã°.
dx
)==5) ||

256 (
	`nk_ªÆ_mode_£t_¨g_deÁu…s
(&
ã°
),

257 
	`ssˇnf
(
cmd
,"real %hx %hx %hx %hx",

258 &
ã°
.
ve˘‹
, &ã°.
ax
, &ã°.
bx
, &ã°.
cx
)==4) ||

259 (
	`nk_ªÆ_mode_£t_¨g_deÁu…s
(&
ã°
),

260 
	`ssˇnf
(
cmd
,"real %hx %hx %hx",

261 &
ã°
.
ve˘‹
, &ã°.
ax
, &ã°.
bx
)==3) ||

262 (
	`nk_ªÆ_mode_£t_¨g_deÁu…s
(&
ã°
),

263 
	`ssˇnf
(
cmd
,"real %hx %hx",

264 &
ã°
.
ve˘‹
, &ã°.
ax
)==2) ||

265 (
	`nk_ªÆ_mode_£t_¨g_deÁu…s
(&
ã°
),

266 
	`ssˇnf
(
cmd
,"real %hx",

267 &
ã°
.
ve˘‹
)==1)) {

269 
	`nk_vc_¥ötf
("Req: int %hxáx=%04hx bx=%04hx cx=%04hx dx=%04hxÉs:di=%04hx:%04hx\n",

270 
ã°
.
ve˘‹
,Åe°.
ax
,Åe°.
bx
,Åe°.
cx
,Åe°.
dx
,Åe°.
es
,Åe°.
di
);

272 i‡(
	`nk_ªÆ_mode_°¨t
()) {

273 
	`nk_vc_¥ötf
("start failed\n");

276 i‡(
	`nk_ªÆ_mode_öt
(&
ã°
)) {

277 
	`nk_vc_¥ötf
("int failed\n");

278 
	`nk_ªÆ_mode_föish
();

281 
	`nk_vc_¥ötf
("Res:áx=%04hx bx=%04hx cx=%04hx dx=%04hx si=%04hx di=%04hx\n"

283 
ã°
.
ax
,Åe°.
bx
,Åe°.
cx
,Åe°.
dx
,Åe°.
si
,Åe°.
di
,

284 
ã°
.
Êags
,Åe°.
cs
,Åe°.
ds
,Åe°.
ss
,Åe°.
fs
,Åe°.
gs
,Åe°.
es
);

285 
	`nk_ªÆ_mode_föish
();

290 
	`nk_vc_¥ötf
("D⁄'àundî°™d %s\n",
cmd
);

293 
	}
}

297 
	$h™dÀ_ùôe°
(* 
buf
)

299 
uöt32_t
 
åüls
, 
sid
, 
did
;

301 
ùi_exp_d©a_t
 * 
d©a
 = 
	`mÆloc
((ipi_exp_data_t));

302 i‡(!
d©a
) {

303 
	`nk_vc_¥ötf
("ERROR: couldÇotállocate IPIÉxperiment data\n");

306 
	`mem£t
(
d©a
, 0, (
ùi_exp_d©a_t
));

308 
buf
 += 7;

309 *
buf
 && *buf==' ') { buf++;}

311 i‡(!*
buf
) {

312 
	`nk_vc_¥ötf
("NoÅestÅype given\n");

317 i‡(
	`ssˇnf
(
buf
, "⁄eway %u", &
åüls
)==1) {

318 
d©a
->
ty≥
 = 
EXP_ONEWAY
;

319 
buf
 += 6;

320 } i‡(
	`ssˇnf
(
buf
, "roundåù %u", &
åüls
)==1) {

321 
d©a
->
ty≥
 = 
EXP_ROUNDTRIP
;

322 
buf
 += 9;

323 } i‡(
	`ssˇnf
(
buf
, "brﬂdˇ° %u", &
åüls
)==1) {

324 
d©a
->
ty≥
 = 
EXP_BROADCAST
;

325 
buf
 += 9;

327 
	`nk_vc_¥ötf
("Unknown IPIÅestÅype\n");

331 
d©a
->
åüls
 = (åül†> 
IPI_MAX_TRIALS
) ? IPI_MAX_TRIALS :Årials;

333 
buf
++;

336 *
buf
 && *buf!=' ') { buf++;}

339 *
buf
 && *buf==' ') { buf++;}

341 i‡(!
	`°∫ˇ£cmp
(
buf
, "-f", 2)) {

343 #i‚de‡
NAUT_CONFIG_EXT2_FILESYSTEM_DRIVER


344 
	`nk_vc_¥ötf
("Not compiled with FS support, cannot use -f\n");

348 
fbuf
[
IPI_MAX_FNAME_LEN
];

349 
d©a
->
u£_fûe
 = 1;

350 
buf
 += 2;

353 *
buf
 && *buf==' ') { buf++;}

355 i‡(
	`ssˇnf
(
buf
, "%s", 
fbuf
)==1) {

356 i‡(!
	`°∫ˇ£cmp
(
buf
, "-", 1)) {

357 
	`nk_vc_¥ötf
("No filename given\n");

360 
	`°∫˝y
(
d©a
->
‚ame
, 
fbuf
, 
IPI_MAX_FNAME_LEN
);

363 *
buf
 && *buf!=' ') {buf++;}

366 *
buf
 && *buf==' ') {buf++;}

369 
	`nk_vc_¥ötf
("No filename given\n");

376 i‡(
	`ssˇnf
(
buf
, "-†%u", &
sid
)==1) {

377 
d©a
->
§c_ty≥
 = 
SRC_ONE
;

378 
d©a
->
§c_c‹e
 = 
sid
;

379 
buf
 += 3;

382 *
buf
 && *buf!=' ') { buf++;}

385 *
buf
 && *buf==' ') { buf++;}

388 
d©a
->
§c_ty≥
 = 
SRC_ALL
;

392 i‡(
	`ssˇnf
(
buf
, "-d %u", &
did
)==1) {

393 
d©a
->
d°_ty≥
 = 
DST_ONE
;

394 
d©a
->
d°_c‹e
 = 
did
;

396 
d©a
->
d°_ty≥
 = 
DST_ALL
;

399 i‡(
	`ùi_run_exps
(
d©a
) != 0) {

400 
	`nk_vc_¥ötf
("CouldÇotÑun ipiÉxperiment\n");

404 
	`‰ì
(
d©a
);

407 
	}
}

410 
	$h™dÀ_blkã°
(* 
buf
)

412 
«me
[32], 
rw
[16];

413 
uöt64_t
 
°¨t
, 
cou¡
;

414 
nk_block_dev
 *
d
;

415 
nk_block_dev_ch¨a˘îi°ics
 
c
;

417 i‡((
	`ssˇnf
(
buf
,"blkã° %†%†%lu %lu",
«me
,
rw
,&
°¨t
,&
cou¡
)!=4)

418 || (*
rw
!='r' && *rw!='w') ) {

419 
	`nk_vc_¥ötf
("D⁄'àundî°™d %s\n",
buf
);

423 i‡(!(
d
=
	`nk_block_dev_föd
(
«me
))) {

424 
	`nk_vc_¥ötf
("C™'àföd %s\n",
«me
);

428 i‡(
	`nk_block_dev_gë_ch¨a˘îi°ics
(
d
,&
c
)) {

429 
	`nk_vc_¥ötf
("C™'àgë ch¨a˘îi°ic†o‡%s\n",
«me
);

433 
d©a
[
c
.
block_size
+1];

434 
uöt64_t
 
i
,
j
;

437 
i
=
°¨t
;i<°¨t+
cou¡
;i++) {

438 i‡(*
rw
 == 'w') {

439 
j
=0;j<
c
.
block_size
;j++) {

440 
d©a
[
j
] = "abcdefghijklmnopqrstuvwxyz0123456789"[j%36];

442 i‡(
	`nk_block_dev_wrôe
(
d
,
i
,1,
d©a
,
NK_DEV_REQ_BLOCKING
,0,0)) {

443 
	`nk_vc_¥ötf
("FaûedÅÿwrôêblock %lu\n",
i
);

446 } i‡(*
rw
 == 'r') {

447 i‡(
	`nk_block_dev_ªad
(
d
,
i
,1,
d©a
,
NK_DEV_REQ_BLOCKING
,0,0)) {

448 
	`nk_vc_¥ötf
("FaûedÅÿªad block %lu\n",
i
);

451 
d©a
[
c
.
block_size
] = 0;

452 
	`nk_vc_¥ötf
("%s\n",
d©a
);

456 
	}
}

458 
	$h™dÀ_ã°
(*
buf
)

460 
wh©
[80];

462 i‡(
	`ssˇnf
(
buf
,"ã° %s",
wh©
)!=1) {

463 
du¬o
;

466 i‡(!
	`°∫ˇ£cmp
(
wh©
,"thread",6)) {

467  
	`ã°_thªads
();

470 
du¬o
:

471 
	`nk_vc_¥ötf
("UnknownÅestÑequest\n");

473 
	}
}

475 
	$h™dÀ_©èch
(* 
buf
)

477 
ty≥
[32], 
dev«me
[32], 
f¢ame
[32];

478 
uöt64_t
 
°¨t
, 
cou¡
;

479 
nk_block_dev
 *
d
;

480 
nk_block_dev_ch¨a˘îi°ics
 
c
;

481 
rc
;

483 i‡(
	`ssˇnf
(
buf
,"©èch %†%†%s",
dev«me
, 
ty≥
, 
f¢ame
)!=3) {

484 
	`nk_vc_¥ötf
("D⁄'àundî°™d %s\n",
buf
);

488 i‡(!
	`°rcmp
(
ty≥
,"ext2")) {

489 #i‚de‡
NAUT_CONFIG_EXT2_FILESYSTEM_DRIVER


490 
	`nk_vc_¥ötf
("Not compiled with EXT2 support, cannotáttach\n");

493 i‡(
	`nk_fs_ext2_©èch
(
dev«me
,
f¢ame
,0)) {

494 
	`nk_vc_¥ötf
("FaûedÅÿ©èch %†a†ext2 vﬁumêwôhÇamê%s\n", 
dev«me
,
f¢ame
);

497 
	`nk_vc_¥ötf
("Devi˚ %†©èchedá†ext2 vﬁumêwôhÇamê%s\n", 
dev«me
,
f¢ame
);

502 
	`nk_vc_¥ötf
("FSÅy≥ %†i†nŸ suµ‹ãd\n", 
ty≥
);

505 
	}
}

507 
	$h™dÀ_bíchm¨ks
(* 
buf
)

509 
	`run_bíchm¨ks
();

511 
	`run_bíchm¨ks
();

514 
	}
}

516 #ifde‡
NAUT_CONFIG_ISOCORE


518 
	$isŸe°
(*
¨g
)

524 
	`£rül_putch¨
('H');

525 
	`£rül_putch¨
('I');

526 
	`£rül_putch¨
('!');

527 
	`£rül_putch¨
('\n');

529 
	}
}

531 
	$h™dÀ_isŸe°
(*
buf
)

533 (*
code
)(*Ë
isŸe°
;

534 
uöt64_t
 
codesize
 = 
PAGE_SIZE_4KB
;

535 
uöt64_t
 
°acksize
 = 
PAGE_SIZE_4KB
;

536 *
¨g
 = (*)0xdeadbeef;

538  
	`nk_isﬁ©e
(
code
,

539 
codesize
,

540 
°acksize
,

541 
¨g
);

542 
	}
}

547 
	$h™dÀ_memöfo
(*
buf
)

549 
uöt64_t
 
num
 = 
	`kmem_num_poﬁs
();

553 
kmem_°©s
 *
s
 = 
	`mÆloc
((kmem_°©s)+
num
*(
buddy_poﬁ_°©s
));

555 i‡(!
s
) {

556 
	`nk_vc_¥ötf
("FailedÅoállocate space for mem info\n");

560 
s
->
max_poﬁs
 = 
num
;

562 
	`kmem_°©s
(
s
);

565 
uöt64_t
 
i
;

567 
i
=0;i<
s
->
num_poﬁs
;i++) {

568 
	`nk_vc_¥ötf
("pool %lu %p-%p %lu blks free %lu bytes free\n %lu bytes min %lu bytes max\n",

569 
i
,

570 
s
->
poﬁ_°©s
[
i
].
°¨t_addr
,

571 
s
->
poﬁ_°©s
[
i
].
íd_addr
,

572 
s
->
poﬁ_°©s
[
i
].
tŸÆ_blocks_‰ì
,

573 
s
->
poﬁ_°©s
[
i
].
tŸÆ_byãs_‰ì
,

574 
s
->
poﬁ_°©s
[
i
].
mö_Æloc_size
,

575 
s
->
poﬁ_°©s
[
i
].
max_Æloc_size
);

578 
	`nk_vc_¥ötf
("%luÖoﬁ†%lu blk†‰ì %lu byã†‰ì\n", 
s
->
tŸÆ_num_poﬁs
, s->
tŸÆ_blocks_‰ì
, s->
tŸÆ_byãs_‰ì
);

579 
	`nk_vc_¥ötf
(" %lu byã†mö %lu byã†max\n", 
s
->
mö_Æloc_size
, s->
max_Æloc_size
);

581 
	`‰ì
(
s
);

584 
	}
}

586 
	$h™dÀ_run
(*
buf
)

588 
∑th
[80];

590 i‡(
	`ssˇnf
(
buf
,"ru¿%s", 
∑th
)!=1) {

591 
	`nk_vc_¥ötf
("Can't determine whatÅoÑun\n");

595 
nk_exec
 *
e
 = 
	`nk_lﬂd_exec
(
∑th
);

597 i‡(!
e
) {

598 
	`nk_vc_¥ötf
("C™'àlﬂd %s\n", 
∑th
);

602 
	`nk_vc_¥ötf
("LoadedÉxecutable,ÇowÑunning\n");

604 i‡(
	`nk_°¨t_exec
(
e
,0,0)) {

605 
	`nk_vc_¥ötf
("FaûedÅÿru¿%s\n", 
∑th
);

608 
	`nk_vc_¥ötf
("UnloadingÉxecutable\n");

610 i‡(
	`nk_u∆ﬂd_exec
(
e
)) {

611 
	`nk_vc_¥ötf
("FaûedÅÿu∆ﬂd %s\n",
∑th
);

615 
	}
}

618 
	$h™dÀ_cmd
(*
buf
, 
n
)

620 
«me
[
MAX_CMD
];

621 
uöt64_t
 
size_ns
;

622 
uöt32_t
 
çr
;

623 
uöt64_t
 
¥i‹ôy
, 
pha£
;

624 
uöt64_t
 
≥riod
, 
¶i˚
;

625 
uöt64_t
 
size
, 
dódlöe
;

626 
uöt64_t
 
addr
, 
d©a
, 
Àn
;

627 
uöt64_t
 
tid
;

628 
uöt32_t
 
id
, 
idsub
, 
sub
;

629 
uöt32_t
 
m§
;

630 
˝u
;

631 
bwdq
;

633 i‡(*
buf
==0) {

637 i‡(!
	`°∫ˇ£cmp
(
buf
,"exit",4)) {

641 #ifde‡
NAUT_CONFIG_REAL_MODE_INTERFACE


642 i‡(!
	`°∫ˇ£cmp
(
buf
,"real",4)) {

643 
	`h™dÀ_ªÆ
(
buf
);

648 #ifde‡
NAUT_CONFIG_ISOCORE


649 i‡(!
	`°∫ˇ£cmp
(
buf
,"isotest",4)) {

650 
	`h™dÀ_isŸe°
(
buf
);

655 i‡(!
	`°∫ˇ£cmp
(
buf
,"help",4)) {

656 
	`nk_vc_¥ötf
("help\nexit\nvcs\ncores [n]\ntime [n]\nthreads [n]\n");

657 
	`nk_vc_¥ötf
("devs | fses | ofs | cat [path]\n");

658 
	`nk_vc_¥ötf
("shellÇame\n");

659 
	`nk_vc_¥ötf
("regs [t]\npeek [bwdq] x | mem xÇ [s] |Öoke [bwdq] x y\nin [bwd]áddr | out [bwd]áddr data\nrdmsr x [n] | wrmsr x y\ncpuid f [n] | cpuidsub f s\n");

660 
	`nk_vc_¥ötf
("meminfo [detail]\n");

661 
	`nk_vc_¥ötf
("reap\n");

662 
	`nk_vc_¥ötf
("burnáÇame size_msÅprÖriority\n");

663 
	`nk_vc_¥ötf
("burn sÇame size_msÅprÖhase size deadlineÖriority\n");

664 
	`nk_vc_¥ötf
("burnÖÇame size_msÅprÖhaseÖeriod slice\n");

665 
	`nk_vc_¥ötf
("real int [ax [bx [cx [dx]]]] [es:di]\n");

666 
	`nk_vc_¥ötf
("ipitestÅype (oneway |Ñoundtrip | broadcast)Årials [-f <filename>] [-s <src_id> |áll] [-d <dst_id> |áll]\n");

667 
	`nk_vc_¥ötf
("bench\n");

668 
	`nk_vc_¥ötf
("blktest devÑ|w start count\n");

669 
	`nk_vc_¥ötf
("blktest devÑ|w start count\n");

670 
	`nk_vc_¥ötf
("isotest\n");

671 
	`nk_vc_¥ötf
("testÅhreads|...\n");

672 
	`nk_vc_¥ötf
("vmÇame [embedded image]\n");

673 
	`nk_vc_¥ötf
("runÖath\n");

677 i‡(!
	`°∫ˇ£cmp
(
buf
,"vcs",3)) {

678 
	`nk_swôch_to_vc_li°
();

682 i‡(!
	`°∫ˇ£cmp
(
buf
,"devs",4)) {

683 
	`nk_dev_dump_devi˚s
();

687 i‡(!
	`°∫ˇ£cmp
(
buf
,"fses",4)) {

688 
	`nk_fs_dump_fûesy°ems
();

692 i‡(!
	`°∫ˇ£cmp
(
buf
,"ofs",3)) {

693 
	`nk_fs_dump_fûes
();

697 i‡(!
	`°∫ˇ£cmp
(
buf
,"cat",3)) {

698 
	`h™dÀ_ˇt
(
buf
);

702 i‡(!
	`°∫ˇ£cmp
(
buf
,"ipitest",7)) {

703 
	`h™dÀ_ùôe°
(
buf
);

707 i‡(!
	`°∫ˇ£cmp
(
buf
,"bench",5)) {

708 
	`h™dÀ_bíchm¨ks
(
buf
);

712 i‡(!
	`°∫ˇ£cmp
(
buf
,"blktest",7)) {

713 
	`h™dÀ_blkã°
(
buf
);

717 i‡(!
	`°∫ˇ£cmp
(
buf
,"test",4)) {

718 
	`h™dÀ_ã°
(
buf
);

723 i‡(!
	`°∫ˇ£cmp
(
buf
,"attach",6)) {

724 
	`h™dÀ_©èch
(
buf
);

728 i‡(
	`ssˇnf
(
buf
,"shñ»%s", 
«me
)==1) {

729 
	`nk_œunch_shñl
(
«me
,-1);

733 i‡(!
	`°∫ˇ£cmp
(
buf
,"reap",4)) {

734 
	`nk_sched_ª≠
(1);

738 i‡(
	`ssˇnf
(
buf
,"ªg†%lu",&
tid
)==1) {

739 
nk_thªad_t
 *
t
 = 
	`nk_föd_thªad_by_tid
(
tid
);

740 i‡(!
t
) {

741 
	`nk_vc_¥ötf
("No suchÅhread\n");

743 
	`nk_¥öt_ªgs
((
nk_ªgs
 *Ë
t
->
r•
);

748 i‡(!
	`°∫ˇ£cmp
(
buf
,"regs",4)) {

749 
	`nk_öãºu±_like_åampﬁöe
((*)(
nk_ªgs
 *));

750 
	`nk_öãºu±_like_åampﬁöe
(
nk_¥öt_ªgs
);

754 i‡(((
bwdq
='b', 
	`ssˇnf
(
buf
,"≥ek b %lx", &
addr
))==1) ||

755 ((
bwdq
='w', 
	`ssˇnf
(
buf
,"≥ek w %lx", &
addr
))==1) ||

756 ((
bwdq
='d', 
	`ssˇnf
(
buf
,"≥ek d %lx", &
addr
))==1) ||

757 ((
bwdq
='q', 
	`ssˇnf
(
buf
,"≥ek q %lx", &
addr
))==1) ||

758 ((
bwdq
='q', 
	`ssˇnf
(
buf
,"≥ek %lx", &
addr
))==1)) {

759 
bwdq
) {

761 
d©a
 = *(
uöt8_t
*)
addr
;

762 
	`nk_vc_¥ötf
("Mem[0x%016lx] = 0x%02lx\n",
addr
,
d©a
);

765 
d©a
 = *(
uöt16_t
*)
addr
;

766 
	`nk_vc_¥ötf
("Mem[0x%016lx] = 0x%04lx\n",
addr
,
d©a
);

769 
d©a
 = *(
uöt32_t
*)
addr
;

770 
	`nk_vc_¥ötf
("Mem[0x%016lx] = 0x%08lx\n",
addr
,
d©a
);

773 
d©a
 = *(
uöt64_t
*)
addr
;

774 
	`nk_vc_¥ötf
("Mem[0x%016lx] = 0x%016lx\n",
addr
,
d©a
);

777 
	`nk_vc_¥ötf
("Unknow¿sizêªque°ed\n",
bwdq
);

783 i‡(((
bwdq
='b', 
	`ssˇnf
(
buf
,"ö b %lx", &
addr
))==1) ||

784 ((
bwdq
='w', 
	`ssˇnf
(
buf
,"ö w %lx", &
addr
))==1) ||

785 ((
bwdq
='d', 
	`ssˇnf
(
buf
,"ö d %lx", &
addr
))==1) ||

786 ((
bwdq
='b', 
	`ssˇnf
(
buf
,"ö %lx", &
addr
))==1)) {

787 
addr
 &= 0xffff;

788 
bwdq
) {

790 
d©a
 = (
uöt64_t
Ë
	`öb
(
addr
);

791 
	`nk_vc_¥ötf
("IO[0x%04lx] = 0x%02lx\n",
addr
,
d©a
);

794 
d©a
 = (
uöt64_t
Ë
	`öw
(
addr
);

795 
	`nk_vc_¥ötf
("IO[0x%04lx] = 0x%04lx\n",
addr
,
d©a
);

798 
d©a
 = (
uöt64_t
Ë
	`öl
(
addr
);

799 
	`nk_vc_¥ötf
("IO[0x%04lx] = 0x%08lx\n",
addr
,
d©a
);

802 
	`nk_vc_¥ötf
("Unknow¿sizêªque°ed\n",
bwdq
);

808 
	#BYTES_PER_LINE
 16

	)

810 i‡((
	`ssˇnf
(
buf
, "mem %lx %lu %lu",&
addr
,&
Àn
,&
size
)==3) ||

811 (
size
=8, 
	`ssˇnf
(
buf
, "mem %lx %lu", &
addr
, &
Àn
)==2)) {

812 
uöt64_t
 
i
,
j
,
k
;

813 
i
=0;i<
Àn
;i+=
BYTES_PER_LINE
) {

814 
	`nk_vc_¥ötf
("%016lx :",
addr
+
i
);

815 
j
=0;j<
BYTES_PER_LINE
 && (
i
+j)<
Àn
; j+=
size
) {

816 
	`nk_vc_¥ötf
(" ");

817 
k
=0;k<
size
;k++) {

818 
	`nk_vc_¥ötf
("%02x", *(
uöt8_t
*)(
addr
+
i
+
j
+
k
));

821 
	`nk_vc_¥ötf
(" ");

822 
j
=0;j<
BYTES_PER_LINE
 && (
i
+j)<
Àn
; j+=
size
) {

823 
k
=0;k<
size
;k++) {

824 
	`nk_vc_¥ötf
("%c", 
	`iß um
(*(
uöt8_t
*)(
addr
+
i
+
j
+
k
)) ?

825 *(
uöt8_t
*)(
addr
+
i
+
j
+
k
) : '.');

828 
	`nk_vc_¥ötf
("\n");

834 i‡(((
bwdq
='b', 
	`ssˇnf
(
buf
,"pokêb %lx %lx", &
addr
,&
d©a
))==2) ||

835 ((
bwdq
='w', 
	`ssˇnf
(
buf
,"pokêw %lx %lx", &
addr
,&
d©a
))==2) ||

836 ((
bwdq
='d', 
	`ssˇnf
(
buf
,"pokêd %lx %lx", &
addr
,&
d©a
))==2) ||

837 ((
bwdq
='q', 
	`ssˇnf
(
buf
,"pokêq %lx %lx", &
addr
,&
d©a
))==2) ||

838 ((
bwdq
='q', 
	`ssˇnf
(
buf
,"pokê%lx %lx", &
addr
, &
d©a
))==2)) {

839 
bwdq
) {

841 *(
uöt8_t
*)
addr
 = 
d©a
;

842 
	`nk_vc_¥ötf
("Mem[0x%016lx] = 0x%02lx\n",
addr
,
d©a
);

845 *(
uöt16_t
*)
addr
 = 
d©a
;

846 
	`nk_vc_¥ötf
("Mem[0x%016lx] = 0x%04lx\n",
addr
,
d©a
);

849 *(
uöt32_t
*)
addr
 = 
d©a
;

850 
	`nk_vc_¥ötf
("Mem[0x%016lx] = 0x%08lx\n",
addr
,
d©a
);

853 *(
uöt64_t
*)
addr
 = 
d©a
;

854 
	`nk_vc_¥ötf
("Mem[0x%016lx] = 0x%016lx\n",
addr
,
d©a
);

857 
	`nk_vc_¥ötf
("Unknown sizeÑequested\n");

863 i‡(((
bwdq
='b', 
	`ssˇnf
(
buf
,"ouàb %lx %lx", &
addr
,&
d©a
))==2) ||

864 ((
bwdq
='w', 
	`ssˇnf
(
buf
,"ouàw %lx %lx", &
addr
,&
d©a
))==2) ||

865 ((
bwdq
='d', 
	`ssˇnf
(
buf
,"ouàd %lx %lx", &
addr
,&
d©a
))==2) ||

866 ((
bwdq
='q', 
	`ssˇnf
(
buf
,"ouà%lx %lx", &
addr
, &
d©a
))==2)) {

867 
addr
 &= 0xffff;

868 
bwdq
) {

870 
d©a
 &= 0xff;

871 
	`outb
((
uöt8_t
Ë
d©a
, (
uöt16_t
)
addr
);

872 
	`nk_vc_¥ötf
("IO[0x%04lx] = 0x%02lx\n",
addr
,
d©a
);

875 
d©a
 &= 0xffff;

876 
	`outw
((
uöt16_t
Ë
d©a
, (uöt16_t)
addr
);

877 
	`nk_vc_¥ötf
("IO[0x%04lx] = 0x%04lx\n",
addr
,
d©a
);

880 
d©a
 &= 0xffffffff;

881 
	`oué
((
uöt32_t
Ë
d©a
, (
uöt16_t
)
addr
);

882 
	`nk_vc_¥ötf
("IO[0x%04lx] = 0x%08lx\n",
addr
,
d©a
);

884 
	`nk_vc_¥ötf
("Unknown sizeÑequested\n");

891 i‡((
	`ssˇnf
(
buf
,"rdm§ %x %lu", &
m§
, &
size
)==2) ||

892 (
size
=1, 
	`ssˇnf
(
buf
,"rdm§ %x", &
m§
)==1)) {

893 
uöt64_t
 
i
,
k
;

894 
i
=0;i<
size
;i++) {

895 
d©a
 = 
	`m§_ªad
(
m§
+
i
);

896 
	`nk_vc_¥ötf
("MSR[0x%08x] = 0x%016lx ",
m§
+
i
,
d©a
);

897 
k
=0;k<8;k++) {

898 
	`nk_vc_¥ötf
("%02x",*(
k
 + (
uöt8_t
*)&
d©a
));

900 
	`nk_vc_¥ötf
(" ");

901 
k
=0;k<8;k++) {

902 
	`nk_vc_¥ötf
("%c",
	`iß um
(*(
k
 + (
uöt8_t
*)&
d©a
)) ?

903 (*(
k
 + (
uöt8_t
*)&
d©a
)) : '.');

905 
	`nk_vc_¥ötf
("\n");

910 i‡(
	`ssˇnf
(
buf
, "wrm§ %x %lx",&
m§
,&
d©a
)==2) {

911 
	`m§_wrôe
(
m§
,
d©a
);

912 
	`nk_vc_¥ötf
("MSR[0x%08x] = 0x%016lx\n",
m§
,
d©a
);

916 i‡((
sub
=0, 
	`ssˇnf
(
buf
,"˝uid %x %lu", &
id
, &
size
)==2) ||

917 (
size
=1, 
sub
=0, 
	`ssˇnf
(
buf
,"˝uid %x",&
id
)==1) ||

918 (
size
=1, 
sub
=1, 
	`ssˇnf
(
buf
,"˝uidsub %x %x",&
id
,&
idsub
)==2)) {

919 
uöt64_t
 
i
,
j
,
k
;

920 
˝uid_ªt_t
 
r
;

921 
uöt32_t
 
vÆ
[4];

923 
i
=0;i<
size
;i++) {

924 i‡(
sub
) {

925 
	`˝uid_sub
(
id
,
idsub
,&
r
);

926 
	`nk_vc_¥ötf
("CPUID[0x%08x, 0x%08x] =",
id
+
i
,
idsub
);

928 
	`˝uid
(
id
+
i
,&
r
);

929 
	`nk_vc_¥ötf
("CPUID[0x%08x] =",
id
+
i
);

931 
vÆ
[0]=
r
.
a
; vÆ[1]Ù.
b
; vÆ[2]Ù.
c
; vÆ[3]Ù.
d
;

932 
j
=0;j<4;j++) {

933 
	`nk_vc_¥ötf
(" ");

934 
k
=0;k<4;k++) {

935 
	`nk_vc_¥ötf
("%02x",*(
k
 + (
uöt8_t
*)&(
vÆ
[
j
])));

938 
j
=0;j<4;j++) {

939 
	`nk_vc_¥ötf
(" ");

940 
k
=0;k<4;k++) {

941 
	`nk_vc_¥ötf
("%c",
	`iß um
(*(
k
 + (
uöt8_t
*)&(
vÆ
[
j
]))) ?

942 (*(
k
 + (
uöt8_t
*)&(
vÆ
[
j
]))) : '.');

945 
	`nk_vc_¥ötf
("\n");

950 i‡(
	`ssˇnf
(
buf
,"bu∫á %†%Œu %u %Œu", 
«me
, &
size_ns
, &
çr
, &
¥i‹ôy
)==4) {

951 
	`nk_vc_¥ötf
("Sèπögá≥riodi¯bu∫î %†wôhÅ¥ %u, sizê%Œu ms.™dÖri‹ôy %Œu\n",
«me
,
size_ns
,
¥i‹ôy
);

952 
size_ns
 *= 1000000;

953 
	`œunch_≠îiodic_bu∫î
(
«me
,
size_ns
,
çr
,
¥i‹ôy
);

957 i‡(
	`ssˇnf
(
buf
,"bu∫ s %†%Œu %u %Œu %Œu %Œu %Œu", 
«me
, &
size_ns
, &
çr
, &
pha£
, &
size
, &
dódlöe
, &
¥i‹ôy
)==7) {

958 
	`nk_vc_¥ötf
("Sèπög sp‹adi¯bu∫î %†wôh sizê%Œu m†ç∏%uÖha£ %Œu fromÇow sizê%Œu m†dódlöê%Œu m†‰omÇowándÖri‹ôy %lu\n",
«me
,
size_ns
,
çr
,
pha£
,
size
,
dódlöe
,
¥i‹ôy
);

959 
size_ns
 *= 1000000;

960 
pha£
 *= 1000000;

961 
size
 *= 1000000;

962 
dódlöe
*1000000; dódlöe+
	`nk_sched_gë_ªÆtime
();

963 
	`œunch_•‹adic_bu∫î
(
«me
,
size_ns
,
çr
,
pha£
,
size
,
dódlöe
,
¥i‹ôy
);

967 i‡(
	`ssˇnf
(
buf
,"bu∫Ö %†%Œu %u %Œu %Œu %Œu", 
«me
, &
size_ns
, &
çr
, &
pha£
, &
≥riod
, &
¶i˚
)==6) {

968 
	`nk_vc_¥ötf
("SèπögÖîiodi¯bu∫î %†wôh sizê%Œu m†ç∏%uÖha£ %Œu fromÇowÖîiod %Œu m†¶i˚ %Œu ms\n",
«me
,
size_ns
,
çr
,
pha£
,
≥riod
,
¶i˚
);

969 
size_ns
 *= 1000000;

970 
pha£
 *= 1000000;

971 
≥riod
 *= 1000000;

972 
¶i˚
 *= 1000000;

973 
	`œunch_≥riodic_bu∫î
(
«me
,
size_ns
,
çr
,
pha£
,
≥riod
,
¶i˚
);

977 #ifde‡
NAUT_CONFIG_PALACIOS_EMBED


978 i‡(
	`ssˇnf
(
buf
,"vm %s", 
«me
)==1) {

979 
gue°_°¨t
;

980 
	`nk_vmm_°¨t_vm
(
«me
,&
gue°_°¨t
,0xffffffff);

985 i‡(!
	`°∫ˇ£cmp
(
buf
,"run",3)) {

986 
	`h™dÀ_run
(
buf
);

990 i‡(!
	`°∫ˇ£cmp
(
buf
,"threads",7)) {

991 i‡(
	`ssˇnf
(
buf
,"thªad†%d",&
˝u
)!=1) {

992 
˝u
=-1;

994 
	`nk_sched_dump_thªads
(
˝u
);

998 i‡(!
	`°∫ˇ£cmp
(
buf
,"cores",5)) {

999 i‡(
	`ssˇnf
(
buf
,"c‹e†%d",&
˝u
)!=1) {

1000 
˝u
=-1;

1002 
	`nk_sched_dump_c‹es
(
˝u
);

1006 i‡(!
	`°∫ˇ£cmp
(
buf
,"time",4)) {

1007 i‡(
	`ssˇnf
(
buf
,"timê%d",&
˝u
)!=1) {

1008 
˝u
=-1;

1010 
	`nk_sched_dump_time
(
˝u
);

1014 i‡(!
	`°∫ˇ£cmp
(
buf
,"memi",4)) {

1015 
	`h™dÀ_memöfo
(
buf
);

1019 
	`nk_vc_¥ötf
("D⁄'àundî°™d \"%s\"\n",
buf
);

1021 
	}
}

1023 
	$shñl
(*
ö
, **
out
)

1025 
nk_vútuÆ_c⁄sﬁe
 *
vc
 = 
	`nk_¸óã_vc
((*)
ö
,
COOKED
, 0x9f, 0, 0);

1026 
buf
[
MAX_CMD
];

1027 
œ°buf
[
MAX_CMD
];

1028 
fú°
=1;

1030 i‡(!
vc
) {

1031 
	`ERROR_PRINT
("Cannot create virtual console for shell\n");

1035 i‡(
	`nk_thªad_«me
(
	`gë_cur_thªad
(),(*)
ö
)) {

1036 
	`ERROR_PRINT
("CannotÇame shell'sÅhread\n");

1040 i‡(
	`nk_böd_vc
(
	`gë_cur_thªad
(), 
vc
)) {

1041 
	`ERROR_PRINT
("Cannot bind virtual console for shell\n");

1045 
	`nk_swôch_to_vc
(
vc
);

1047 
	#PROMPT
 0xcf

	)

1048 
	#INPUT
 0x3f

	)

1049 
	#OUTPUT
 0x9f

	)

1051 
	`nk_vc_˛ór
(
OUTPUT
);

1052 
	`nk_vc_£èâr
(
OUTPUT
);

1055 
	`nk_vc_£èâr
(
PROMPT
);

1056 
	`nk_vc_¥ötf
("%s> ", (*)
ö
);

1057 
	`nk_vc_£èâr
(
INPUT
);

1058 
	`nk_vc_gës
(
buf
,
MAX_CMD
,1);

1059 
	`nk_vc_£èâr
(
OUTPUT
);

1061 i‡(
buf
[0]==0 && !
fú°
) {

1063 i‡(
	`h™dÀ_cmd
(
œ°buf
,
MAX_CMD
)) {

1067 i‡(
	`h™dÀ_cmd
(
buf
,
MAX_CMD
)) {

1070 
	`mem˝y
(
œ°buf
,
buf
,
MAX_CMD
);

1071 
fú°
=0;

1077 
	`nk_vc_¥ötf
("Exôög shñ»%s\n", (*)
ö
);

1078 
	`‰ì
(
ö
);

1079 
	`nk_ªÀa£_vc
(
	`gë_cur_thªad
());

1083 
	}
}

1085 
nk_thªad_id_t
 
	$nk_œunch_shñl
(*
«me
, 
˝u
)

1087 
nk_thªad_id_t
 
tid
;

1088 *
n
 = 
	`mÆloc
(32);

1090 i‡(!
n
) {

1094 
	`°∫˝y
(
n
,
«me
,32);

1095 
n
[31]=0;

1097 i‡(
	`nk_thªad_°¨t
(
shñl
, (*)
n
, 0, 1, 
PAGE_SIZE_4KB
, &
tid
, 
˝u
)) {

1098 
	`‰ì
(
n
);

1101 
	`INFO_PRINT
("Shñ»%†œunched o¿˝u %dá†%p\n",
«me
,
˝u
,
tid
);

1102  
tid
;

1104 
	}
}

	@smp.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/smp.h
>

25 
	~<«utûus/∑gög.h
>

26 
	~<«utûus/úq.h
>

27 
	~<«utûus/m§.h
>

28 
	~<«utûus/gdt.h
>

29 
	~<«utûus/˝u.h
>

30 
	~<«utûus/«ut_as£π.h
>

31 
	~<«utûus/thªad.h
>

32 
	~<«utûus/queue.h
>

33 
	~<«utûus/idÀ.h
>

34 
	~<«utûus/©omic.h
>

35 
	~<«utûus/numa.h
>

36 
	~<«utûus/mm.h
>

37 
	~<«utûus/≥r˝u.h
>

38 
	~<dev/iﬂpic.h
>

39 
	~<dev/≠ic.h
>

41 #i‚de‡
NAUT_CONFIG_DEBUG_SMP


42 #unde‡
DEBUG_PRINT


43 
	#DEBUG_PRINT
(
fmt
, 
¨gs
...)

	)

45 
	#SMP_PRINT
(
fmt
, 
¨gs
...Ë
	`¥ötk
("SMP: " fmt, ##¨gs)

	)

46 
	#SMP_DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("SMP: " fmt, ##¨gs)

	)

50 
˝u
 * 
smp_≠_°ack_swôch
(
uöt64_t
, uint64_t, cpu*);

52 vﬁ©ûê
	gsmp_c‹e_cou¡
 = 1;

54 
addr_t
 
öô_smp_boŸ
;

55 
addr_t
 
íd_smp_boŸ
;

57 
uöt8_t
 
	g˝u_öfo_ªady
 = 0;

62 
	$smp_óæy_öô
 (
«ut_öfo
 * 
«ut
)

64  
	`¨ch_óæy_öô
(
«ut
);

65 
	}
}

69 
	$öô_≠_¨ó
 (
≠_öô_¨ó
 * 
≠_¨ó
,

70 
«ut_öfo
 * 
«ut
,

71 
c‹e_num
)

73 
	`mem£t
((*)
≠_¨ó
, 0, (
≠_öô_¨ó
));

76 
uöt32_t
 
boŸ_°ack_±r
 = 
AP_BOOT_STACK_ADDR
;

78 
≠_¨ó
->
°ack
 = 
boŸ_°ack_±r
;

79 
≠_¨ó
->
˝u_±r
 = 
«ut
->
sys
.
˝us
[
c‹e_num
];

82 
≠_¨ó
->
gdt
[2] = 0x0000ffff;

83 
≠_¨ó
->
gdt
[3] = 0x00cf9a00;

84 
≠_¨ó
->
gdt
[4] = 0x0000ffff;

85 
≠_¨ó
->
gdt
[5] = 0x00cf9200;

88 
≠_¨ó
->
gdt64
[1] = 0x00a09a0000000000;

89 
≠_¨ó
->
gdt64
[2] = 0x00a0920000000000;

92 
≠_¨ó
->
¸3
 = 
	`ªad_¸3
();

95 
≠_¨ó
->
íåy
 = 
smp_≠_íåy
;

98 
	}
}

102 
	$smp_waô_f‹_≠
 (
«ut_öfo
 * 
«ut
, 
c‹e_num
)

104 
˝u
 * 
c‹e
 = 
«ut
->
sys
.
˝us
[
c‹e_num
];

105 #ifde‡
NAUT_CONFIG_XEON_PHI


106 !
c‹e
->
boŸed
) {

107 
	`udñay
(1);

110 
	`BARRIER_WHILE
(!
c‹e
->
boŸed
);

114 
	}
}

118 
	$smp_brögup_≠s
 (
«ut_öfo
 * 
«ut
)

120 
≠_öô_¨ó
 * 
≠_¨ó
;

122 
addr_t
 
boŸ_èrgë
 = (addr_t)&
öô_smp_boŸ
;

123 
size_t
 
smp_code_sz
 = (
addr_t
)&
íd_smp_boŸ
 - 
boŸ_èrgë
;

124 
addr_t
 
≠_åampﬁöe
 = (addr_t)
AP_TRAMPOLINE_ADDR
;

125 
uöt8_t
 
èrgë_vec
 = 
≠_åampﬁöe
 >> 12U;

126 
≠ic_dev
 * 
≠ic
 = 
«ut
->
sys
.
˝us
[«ut->sys.
b•_id
]->apic;

128 
°©us
 = 0;

129 
îr
 = 0;

130 
i
, 
j
, 
maxlvt
;

132 i‡(
«ut
->
sys
.
num_˝us
 == 1) {

136 
maxlvt
 = 
	`≠ic_gë_maxlvt
(
≠ic
);

138 
	`SMP_DEBUG
("PassögÅ¨gëÖagênum %xÅÿSIPI\n", 
èrgë_vec
);

141 i‡(
maxlvt
 > 3) {

142 
	`≠ic_wrôe
(
≠ic
, 
APIC_REG_ESR
, 0);

144 
	`≠ic_ªad
(
≠ic
, 
APIC_REG_ESR
);

146 
	`SMP_DEBUG
("C›yög i¿∑gêf‹ SMP boŸ codê© (%p)...\n", (*)
≠_åampﬁöe
);

147 
	`mem˝y
((*)
≠_åampﬁöe
, (*)
boŸ_èrgë
, 
smp_code_sz
);

151 
≠_¨ó
 = (
≠_öô_¨ó
*)
AP_INFO_AREA
;

153 
	`SMP_DEBUG
("Passög APáª®© %p\n", (*)
≠_¨ó
);

158 
i
 = 0; i < 
«ut
->
sys
.
num_˝us
; i++) {

159 
ªt
;

162 i‡(
«ut
->
sys
.
˝us
[
i
]->
is_b•
) {

163 
	`SMP_DEBUG
("Skùpög BSP (c‹êid=%u,ápicid=%u\n", 
i
, 
«ut
->
sys
.
˝us
[i]->
œpic_id
);

167 
	`SMP_DEBUG
("BoŸög sec⁄d¨y CPU %u\n", 
i
);

169 
ªt
 = 
	`öô_≠_¨ó
(
≠_¨ó
, 
«ut
, 
i
);

170 i‡(
ªt
 == -1) {

171 
	`ERROR_PRINT
("Error initializingápárea\n");

177 
	`SMP_DEBUG
("£ndög INITÅÿªmŸêAPIC (0x%x)\n", 
«ut
->
sys
.
˝us
[
i
]->
œpic_id
);

178 
	`≠ic_£nd_iùi
(
≠ic
, 
«ut
->
sys
.
˝us
[
i
]->
œpic_id
);

181 
°©us
 = 
	`≠ic_waô_f‹_£nd
(
≠ic
);

183 
	`mb¨rõr
();

186 
	`udñay
(10000);

189 
	`≠ic_deöô_iùi
(
≠ic
, 
«ut
->
sys
.
˝us
[
i
]->
œpic_id
);

191 
j
 = 1; j <= 2; j++) {

192 i‡(
maxlvt
 > 3) {

193 
	`≠ic_wrôe
(
≠ic
, 
APIC_REG_ESR
, 0);

195 
	`≠ic_ªad
(
≠ic
, 
APIC_REG_ESR
);

197 
	`SMP_DEBUG
("Sídög SIPI %uÅÿc‹ê%u (vec=%x)\n", 
j
, 
i
, 
èrgë_vec
);

200 
	`≠ic_£nd_sùi
(
≠ic
, 
«ut
->
sys
.
˝us
[
i
]->
œpic_id
, 
èrgë_vec
);

202 
	`udñay
(300);

204 
°©us
 = 
	`≠ic_waô_f‹_£nd
(
≠ic
);

206 
	`udñay
(200);

208 
îr
 = 
	`≠ic_ªad
(
≠ic
, 
APIC_REG_ESR
) & 0xef;

210 i‡(
°©us
 || 
îr
) {

215 i‡(
«ut
->
sys
.
˝us
[
i
]->
boŸed
 == 1) {

221 i‡(
°©us
) {

222 
	`ERROR_PRINT
("APIC wasn't delivered!\n");

225 i‡(
îr
) {

226 
	`ERROR_PRINT
("ERROR delivering SIPI\n");

230 
	`smp_waô_f‹_≠
(
«ut
, 
i
);

232 
	`SMP_DEBUG
("Brögu∞f‹ c‹ê%u d⁄e.\n", 
i
);

235 
	`BARRIER_WHILE
(
smp_c‹e_cou¡
 !
«ut
->
sys
.
num_˝us
);

237 
	`SMP_DEBUG
("ALL CPUS BOOTED\n");

240 
˝u_öfo_ªady
 = 1;

242  (
°©us
|
îr
);

243 
	}
}

246 
idt_desc
 
idt_des¸ùt‹
;

247 
gdt_desc64
 
gdå64
;

249 
xˇŒ_h™dÀr
(
ex˝_íåy_t
 * 
e
, 
ex˝_vec_t
 
v
, *
°©e
);

253 
	$smp_xˇŒ_öô_queue
 (
˝u
 * 
c‹e
)

255 
c‹e
->
xˇŒ_q
 = 
	`nk_queue_¸óã
();

256 i‡(!
c‹e
->
xˇŒ_q
) {

257 
	`ERROR_PRINT
("CouldÇŸáŒoˇã xˇŒ queuê⁄ cpu %u\n", 
c‹e
->
id
);

262 
	}
}

266 
	$smp_£tup_xˇŒ_b•
 (
˝u
 * 
c‹e
)

268 
	`SMP_PRINT
("Setting up cross-core IPIÉvent queue\n");

269 
	`smp_xˇŒ_öô_queue
(
c‹e
);

271 i‡(
	`ªgi°î_öt_h™dÀr
(
IPI_VEC_XCALL
, 
xˇŒ_h™dÀr
, 
NULL
) != 0) {

272 
	`ERROR_PRINT
("CouldÇŸássig¿öãºu± h™dÀ∏f‹ XCALL o¿c‹ê%u\n", 
c‹e
->
id
);

277 
	}
}

281 
	$smp_≠_£tup
 (
˝u
 * 
c‹e
)

284 
	`lidt
(&
idt_des¸ùt‹
);

287 
	`lgdt64
(&
gdå64
);

289 
uöt64_t
 
c‹e_addr
 = (uöt64_tË
c‹e
->
sy°em
->
˝us
[c‹e->
id
];

292 
	`m§_wrôe
(
MSR_GS_BASE
, (
uöt64_t
)
c‹e_addr
);

294 
	`≠ic_öô
(
c‹e
);

296 i‡(
	`smp_xˇŒ_öô_queue
(
c‹e
) != 0) {

297 
	`ERROR_PRINT
("CouldÇŸ sëu∞xˇŒ f‹ c‹ê%u\n", 
c‹e
->
id
);

301 
nk_sched_c⁄fig
 
sched_cfg
;

303 i‡(
	`nk_sched_öô_≠
(&
sched_cfg
) != 0) {

304 
	`ERROR_PRINT
("CouldÇŸ sëu∞schedulög f‹ c‹ê%u\n", 
c‹e
->
id
);

309 
	}
}

312 
Âu_öô
();

313 
nk_ønd_öô
(
˝u
*);

316 
	$smp_≠_föish
 (
˝u
 * 
c‹e
)

318 
	`Âu_öô
();

320 
	`nk_ønd_öô
(
c‹e
);

322 
	`nk_˝u_t›o_discovî
(
c‹e
);

324 
	`PAUSE_WHILE
(
	`©omic_cmpsw≠
(
c‹e
->
boŸed
, 0, 1) != 0);

326 #i‚de‡
NAUT_CONFIG_HVM_HRT


327 
	`©omic_öc
(
smp_c‹e_cou¡
);

330 
	`BARRIER_WHILE
(
smp_c‹e_cou¡
 !
c‹e
->
sy°em
->
num_˝us
);

333 
	`nk_sched_°¨t
();

335 
	`SMP_DEBUG
("C‹ê%uÑódy -É«blög i¡îru±s\n", 
c‹e
->
id
);

337 
	`°i
();

339 #ifde‡
NAUT_CONFIG_PROFILE


340 
	`nk_ö°rumít_ˇlibøã
(
INSTR_CAL_LOOPS
);

342 
	}
}

345 
idÀ
(* 
ö
, **
out
);

348 
	$smp_≠_íåy
 (
˝u
 * 
c‹e
)

350 
˝u
 * 
my_˝u
;

351 
	`SMP_DEBUG
("C‹ê%u sèπög up\n", 
c‹e
->
id
);

352 i‡(
	`smp_≠_£tup
(
c‹e
) < 0) {

353 
	`∑nic
("Error setting up AP!\n");

360 
my_˝u
 = 
	`gë_˝u
();

361 
	`SMP_DEBUG
("CPU (APË%u o≥øti⁄Æ\n", 
my_˝u
->
id
);

364 
nk_thªad_t
 * 
cur
 = 
	`gë_cur_thªad
();

372 
my_˝u
 = 
	`smp_≠_°ack_swôch
(
cur
->
r•
, cur->rsp, my_cpu);

375 
	`smp_≠_föish
(
my_˝u
);

377 
	`ASSERT
(
	`úqs_íabÀd
());

379 
	`°i
();

381 
	`idÀ
(
NULL
, NULL);

382 
	}
}

385 
uöt32_t


386 
	$nk_gë_num_˝us
 ()

388 
sys_öfo
 * 
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

389  
sys
->
num_˝us
;

390 
	}
}

393 
	$öô_xˇŒ
 (
nk_xˇŒ
 * 
x
, * 
¨g
, 
nk_xˇŒ_func_t
 
fun
)

395 
x
->
d©a
 = 
¨g
;

396 
x
->
fun
 = fun;

397 
x
->
xˇŒ_d⁄e
 = 0;

398 
	}
}

401 
ölöe
 

402 
	$waô_xˇŒ
 (
nk_xˇŒ
 * 
x
)

405 
	`©omic_cmpsw≠
(
x
->
xˇŒ_d⁄e
, 1, 0) != 1) {

406 
asm
 volatile ("pause");

408 
	}
}

411 
ölöe
 

412 
	$m¨k_xˇŒ_d⁄e
 (
nk_xˇŒ
 * 
x
)

414 
	`©omic_cmpsw≠
(
x
->
xˇŒ_d⁄e
, 0, 1);

415 
	}
}

419 
	$xˇŒ_h™dÀr
 (
ex˝_íåy_t
 * 
e
, 
ex˝_vec_t
 
v
, *
°©e
)

421 
nk_queue_t
 * 
xcq
 = 
	`≥r_˝u_gë
(
xˇŒ_q
);

422 
nk_xˇŒ
 * 
x
 = 
NULL
;

423 
nk_queue_íåy_t
 * 
ñm
 = 
NULL
;

425 i‡(!
xcq
) {

426 
	`ERROR_PRINT
("Bad√ss:ÇÿxˇŒ queuê⁄ c‹ê%u\n", 
	`my_˝u_id
());

427 
out_îr
;

430 
ñm
 = 
	`nk_dequeue_fú°_©omic
(
xcq
);

431 
x
 = 
	`c⁄èöî_of
(
ñm
, 
nk_xˇŒ
, 
xˇŒ_node
);

432 i‡(!
x
) {

433 
	`ERROR_PRINT
("NÿXCALLÑeque° found o¿c‹ê%u\n", 
	`my_˝u_id
());

434 
out_îr
;

437 i‡(
x
->
fun
) {

441 
	`IRQ_HANDLER_END
();

443 
x
->
	`fun
(x->
d©a
);

446 i‡(
x
->
has_waôî
) {

447 
	`m¨k_xˇŒ_d⁄e
(
x
);

451 
	`ERROR_PRINT
("NÿXCALL fun˘i⁄ found o¿c‹ê%u\n", 
	`my_˝u_id
());

452 
out_îr
;

458 
out_îr
:

459 
	`IRQ_HANDLER_END
();

461 
	}
}

477 
	$smp_xˇŒ
 (
˝u_id_t
 
˝u_id
,

478 
nk_xˇŒ_func_t
 
fun
,

479 * 
¨g
,

480 
uöt8_t
 
waô
)

482 
sys_öfo
 * 
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

483 
nk_queue_t
 * 
xcq
 = 
NULL
;

484 
nk_xˇŒ
 
x
;

485 
uöt8_t
 
Êags
;

487 
	`SMP_DEBUG
("Inôütög SMP XCALL from c‹ê%uÅÿc‹ê%u\n", 
	`my_˝u_id
(), 
˝u_id
);

489 i‡(
˝u_id
 > 
	`nk_gë_num_˝us
()) {

490 
	`ERROR_PRINT
("Aâem±Åÿexecuã xˇŒ o¿övÆid cpu (%u)\n", 
˝u_id
);

494 i‡(
˝u_id
 =
	`my_˝u_id
()) {

496 
Êags
 = 
	`úq_dißbÀ_ßve
();

497 
	`fun
(
¨g
);

498 
	`úq_íabÀ_ª°‹e
(
Êags
);

501 
nk_xˇŒ
 * 
xc
 = &
x
;

503 i‡(!
waô
) {

504 
xc
 = &(
sys
->
˝us
[
˝u_id
]->
xˇŒ_nowaô_öfo
);

507 
	`öô_xˇŒ
(
xc
, 
¨g
, 
fun
);

509 
xcq
 = 
sys
->
˝us
[
˝u_id
]->
xˇŒ_q
;

510 i‡(!
xcq
) {

511 
	`ERROR_PRINT
("Attempt by cpu %uÅo initiate xcall on invalid xcall queue (for cpu %u)\n",

512 
	`my_˝u_id
(),

513 
˝u_id
);

517 
Êags
 = 
	`úq_dißbÀ_ßve
();

519 i‡(!
	`nk_queue_em±y_©omic
(
xcq
)) {

520 
	`ERROR_PRINT
("XCALL queuêf‹ c‹ê%u i†nŸÉm±y, baûög\n", 
˝u_id
);

521 
	`úq_íabÀ_ª°‹e
(
Êags
);

525 
	`nk_íqueue_íåy_©omic
(
xcq
, &(
xc
->
xˇŒ_node
));

527 
	`úq_íabÀ_ª°‹e
(
Êags
);

529 
≠ic_dev
 * 
≠ic
 = 
	`≥r_˝u_gë
(apic);

531 
	`≠ic_ùi
(
≠ic
, 
sys
->
˝us
[
˝u_id
]->≠ic->
id
, 
IPI_VEC_XCALL
);

533 i‡(
waô
) {

534 
	`waô_xˇŒ
(
xc
);

540 
	}
}

	@spinlock.c

23 
	~<«utûus/•ölock.h
>

24 
	~<«utûus/úq.h
>

27 
	$•ölock_öô
 (vﬁ©ûê
•ölock_t
 * 
lock
)

29 *
lock
 = 0;

30 
	}
}

34 
	$•ölock_deöô
 (vﬁ©ûê
•ölock_t
 * 
lock
)

36 *
lock
 = 0;

37 
	}
}

40 
	$•ö_lock_n›au£
 (vﬁ©ûê
•ölock_t
 * 
lock
)

42 
	`__sync_lock_ã°_™d_£t
(
lock
, 1)) {

45 
	}
}

47 
uöt8_t


48 
	$•ö_lock_úq_ßve_n›au£
 (vﬁ©ûê
•ölock_t
 * 
lock
)

50 
uöt8_t
 
Êags
 = 
	`úq_dißbÀ_ßve
();

51 
	`__sync_lock_ã°_™d_£t
(
lock
, 1)) {

54  
Êags
;

55 
	}
}

	@testfs.c

25 #ifde‡
INFO


26 #unde‡
INFO


28 
	#INFO
(
fmt
, 
¨gs
...Ë
	`¥ötk
("FILESYSTEM TESTING: " fmà"\n", ##¨gs)

	)

30 
	$run_Æl
() {

31 
∑s£d
 = 0;

32 
∑s£d
 +
	`ã°_1
();

33 
∑s£d
 +
	`ã°_2
();

34 
∑s£d
 +
	`ã°_3
();

35 
∑s£d
 +
	`ã°_4
();

36 
∑s£d
 +
	`ã°_5
();

38 
	`INFO
("%dÅe°†∑s£d", 
∑s£d
);

39  
∑s£d
;

40 
	}
}

43 
	$ã°_1
() {

44 
∑s£d
 = 0;

45 
‚
 = 
	`›í
("/ªadme",
O_RDWR
);

46 * 
buf
 = 
	`mÆloc
(15);

47 
ssize_t
 
byãs
 = 
	`ªad
(
‚
, 
buf
, 15);

48 if(
byãs
 =15 && !
	`°rcmp
(
buf
,"hello world\n")) {

49 
	`INFO
("Test 1: PASSED");

50 
∑s£d
 = 1;

53 
	`INFO
("Test 1: FAILED");

55 
	`‰ì
(
buf
);

56  
∑s£d
;

57 
	}
}

60 
	$ã°_2
() {

61 
∑s£d
 = 0;

62 
‚
 = 
	`›í
("/ªadme",
O_RDWR
);

63 * 
wr_buf
 = "adios";

64 * 
rd_buf
 = 
	`mÆloc
(15);

65 
wr_byãs
 = 
	`wrôe
(
‚
, 
wr_buf
, 5);

66 
	`l£ek
(
‚
,0,0);

67 
rd_byãs
 = 
	`ªad
(
‚
, 
rd_buf
, 15);

68 if(
rd_byãs
 =15 && 
wr_byãs
 =5 && !
	`°rcmp
(
rd_buf
,"adios world\n")) {

69 
	`INFO
("Test 2: PASSED");

70 
∑s£d
 = 1;

73 
	`INFO
("Test 2: FAILED");

75 
	`‰ì
(
rd_buf
);

76  
∑s£d
;

77 
	}
}

80 
	$ã°_3
() {

81 
∑s£d
 = 0;

82 
‚
 = 
	`›í
("/ªadme",
O_RDWR
);

83 * 
wr_buf
 = "adios";

84 * 
rd_buf
 = 
	`mÆloc
(20);

85 
	`l£ek
(
‚
,0,2);

86 
wr_byãs
 = 
	`wrôe
(
‚
, 
wr_buf
, 5);

87 
	`l£ek
(
‚
,0,0);

88 
rd_byãs
 = 
	`ªad
(
‚
, 
rd_buf
, 20);

89 if(
rd_byãs
 =20 && 
wr_byãs
 =5 && !
	`°rcmp
(
rd_buf
,"adios world\nadios")) {

90 
	`INFO
("Test 3: PASSED");

91 
∑s£d
 = 1;

94 
	`INFO
("Test 3: FAILED");

96 
	`‰ì
(
rd_buf
);

97  
∑s£d
;

98 
	}
}

100 
	$ã°_4
() {

101 
∑s£d
 = 0;

102 
‚
 = 
	`›í
("/nuŒ",
O_RDWR
);

103 * 
wr_buf
 = "this usedÅo beÉmpty";

104 * 
rd_buf
 = 
	`mÆloc
(21);

105 
wr_byãs
 = 
	`wrôe
(
‚
, 
wr_buf
, 21);

106 
	`l£ek
(
‚
,0,0);

107 
rd_byãs
 = 
	`ªad
(
‚
, 
rd_buf
, 21);

108 if(
rd_byãs
 =21 && 
wr_byãs
 =21 && !
	`°rcmp
(
rd_buf
,"this usedÅo beÉmpty")) {

109 
	`INFO
("Test 4: PASSED");

110 
∑s£d
 = 1;

113 
	`INFO
("Test 4: FAILED");

115 
	`‰ì
(
rd_buf
);

116  
∑s£d
;

117 
	}
}

119 
	$ã°_5
() {

120 
∑s£d
 = 0;

121 
‚
 = 
	`›í
("/√w_fûe",
O_RDWR
|
O_CREAT
);

122 * 
wr_buf
 = "this usedÅoÇotÉxist";

123 * 
rd_buf
 = 
	`mÆloc
(22);

124 
wr_byãs
 = 
	`wrôe
(
‚
, 
wr_buf
, 22);

125 
	`l£ek
(
‚
,0,0);

126 
rd_byãs
 = 
	`ªad
(
‚
, 
rd_buf
, 22);

127 if(
rd_byãs
 =22 && 
wr_byãs
 =22 && !
	`°rcmp
(
rd_buf
,"this usedÅoÇotÉxist")) {

128 
	`INFO
("Test 5: PASSED");

129 
∑s£d
 = 1;

132 
	`INFO
("Test 5: FAILED");

134 
	`‰ì
(
rd_buf
);

135  
∑s£d
;

136 
	}
}

138 
	$ã°_6
() {

139 
∑s£d
 = 0;

140 
‚
 = 
	`›í
("/√w_fûe2",
O_RDWR
|
O_CREAT
);

141 * 
wr_buf
 = "this usedÅoÇotÉxist";

142 * 
rd_buf
 = 
	`mÆloc
(22);

143 
wr_byãs
 = 
	`wrôe
(
‚
, 
wr_buf
, 22);

144 
	`ªmove
("/new_file2");

145 sig√d 
ã°‚
 = 
	`›í
("/√w_fûe2",
O_RDWR
);

146 
	`INFO
("HERE-- %x", 
ã°‚
);

147 
‚
 = 
	`›í
("/√w_fûe2",
O_RDWR
|
O_CREAT
);

149 
rd_byãs
 = 
	`ªad
(
‚
, 
rd_buf
, 22);

150 if(
rd_byãs
 =0 && 
wr_byãs
 =22 && 
	`°rcmp
(
rd_buf
,"thi†u£dÅÿnŸÉxi°"Ë&& 
ã°‚
 == -1) {

151 
	`INFO
("Test 6: PASSED");

152 
∑s£d
 = 1;

155 
	`INFO
("Test 6: FAILED");

157 
	`‰ì
(
rd_buf
);

158  
∑s£d
;

159 
	}
}

	@thread.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/˝u.h
>

25 
	~<«utûus/«ut_as£π.h
>

26 
	~<«utûus/úq.h
>

27 
	~<«utûus/idÀ.h
>

28 
	~<«utûus/∑gög.h
>

29 
	~<«utûus/thªad.h
>

30 
	~<«utûus/≥r˝u.h
>

31 
	~<«utûus/©omic.h
>

32 
	~<«utûus/queue.h
>

33 
	~<«utûus/li°.h
>

34 
	~<«utûus/î∫o.h
>

35 
	~<«utûus/mm.h
>

38 
uöt8_t
 
mÆloc_˝us_ªady
;

42 #i‚de‡
NAUT_CONFIG_DEBUG_THREADS


43 #unde‡
DEBUG_PRINT


44 
	#DEBUG_PRINT
(
fmt
, 
¨gs
...)

	)

46 
	#THREAD_INFO
(
fmt
, 
¨gs
...Ë
	`INFO_PRINT
("Thªad: " fmt, ##¨gs)

	)

47 
	#THREAD_ERROR
(
fmt
, 
¨gs
...Ë
	`ERROR_PRINT
("Thªad: " fmt, ##¨gs)

	)

48 
	#THREAD_DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("Thªad: " fmt, ##¨gs)

	)

49 
	#THREAD_WARN
(
fmt
, 
¨gs
...Ë
	`WARN_PRINT
("Thªad: " fmt, ##¨gs)

	)

51 
	g√xt_tid
 = 0;

53 
addr_t
 
boŸ_°ack_°¨t
;

54 
nk_thªad_swôch
(
nk_thªad_t
*);

55 
nk_thªad_íåy
(*);

56 
nk_és
 
	gés_keys
[
TLS_MAX_KEYS
];

62 
nk_thªad_queue_t
*

63 
	$nk_thªad_queue_¸óã
 ()

65 
nk_thªad_queue_t
 * 
q
 = 
NULL
;

67 
q
 = 
	`nk_queue_¸óã
();

69 i‡(!
q
) {

70 
	`THREAD_ERROR
("CouldÇotállocateÅhread queue\n");

71  
NULL
;

73  
q
;

74 
	}
}

83 
	$nk_thªad_queue_de°roy
 (
nk_thªad_queue_t
 * 
q
)

86 
	`THREAD_DEBUG
("DestroyingÅhread queue\n");

87 
	`nk_queue_de°roy
(
q
, 1);

88 
	}
}

100 
	$thªad_dëach
 (
nk_thªad_t
 * 
t
)

102 
	`¥ìm±_dißbÀ
();

104 
	`ASSERT
(
t
->
ªfcou¡
 > 0);

107 
	`li°_dñ
(&(
t
->
chûd_node
));

109 --
t
->
ªfcou¡
;

123 
	`¥ìm±_íabÀ
();

126 
	}
}

132 
	$és_exô
 ()

134 
nk_thªad_t
 * 
t
 = 
	`gë_cur_thªad
();

135 
i
, 
j
;

136 
uöt8_t
 
ˇŒed
 = 0;

138 
i
 = 0; i < 
MIN_DESTRUCT_ITER
; i++) {

139 
j
 = 0 ; j < 
TLS_MAX_KEYS
; j++) {

140 * 
vÆ
 = (*)
t
->
és
[
j
];

141 i‡(
vÆ
 && 
és_keys
[
j
].
de°ru˘‹
) {

142 
ˇŒed
 = 1;

143 
t
->
és
[
j
] = 
NULL
;

144 
és_keys
[
j
].
	`de°ru˘‹
(
vÆ
);

147 i‡(!
ˇŒed
) {

152 
	}
}

158 
	$_nk_thªad_öô
 (
nk_thªad_t
 * 
t
,

159 * 
°ack
,

160 
uöt8_t
 
is_dëached
,

161 
bound_˝u
,

162 
nk_thªad_t
 * 
∑ª¡
)

164 
sys_öfo
 * 
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

166 i‡(!
t
) {

167 
	`THREAD_ERROR
("Given NULLÅhreadÖointer...\n");

168  -
EINVAL
;

171 i‡(
bound_˝u
>=0 && bound_˝u>=
sys
->
num_˝us
) {

172 
	`THREAD_ERROR
("ImpossibÀ CPU bödög %d\n",
bound_˝u
);

173  -
EINVAL
;

177 
t
->
°ack
 = stack;

178 
t
->
r•
 = (
uöt64_t
)
°ack
 +Å->
°ack_size
 - (uint64_t);

179 
t
->
tid
 = 
	`©omic_öc
(
√xt_tid
) + 1;

180 
t
->
ªfcou¡
 = 
is_dëached
 ? 1 : 2;

181 
t
->
∑ª¡
 =Öarent;

182 
t
->
bound_˝u
 = bound_cpu;

183 
t
->
Âu_°©e_off£t
 = 
	`off£tof
(
nk_thªad
, 
Âu_°©e
);

185 
	`INIT_LIST_HEAD
(&(
t
->
chûdªn
));

188 i‡(
∑ª¡
) {

189 
	`li°_add_èû
(&(
t
->
chûd_node
), &(
∑ª¡
->
chûdªn
));

192 i‡(!(
t
->
sched_°©e
 = 
	`nk_sched_thªad_°©e_öô
(t,0))) {

193 
	`THREAD_ERROR
("CouldÇot create scheduler state forÅhread\n");

194  -
EINVAL
;

197 
t
->
waôq
 = 
	`nk_thªad_queue_¸óã
();

199 i‡(!
t
->
waôq
) {

200 
	`THREAD_ERROR
("CouldÇot createÅhread's wait queue\n");

201  -
EINVAL
;

205 
	}
}

209 
	$thªad_˛ónup
 ()

211 
	`THREAD_DEBUG
("Thªad (%dËexôög o¿c‹ê%d\n", 
	`gë_cur_thªad
()->
tid
, 
	`my_˝u_id
());

212 
	`nk_thªad_exô
(0);

213 
	}
}

220 
ölöe
 

221 
	$thªad_push
 (
nk_thªad_t
 * 
t
, 
uöt64_t
 
x
)

223 
t
->
r•
 -= 8;

224 *(
uöt64_t
*)(
t
->
r•
Ë
x
;

225 
	}
}

229 
	$thªad_£tup_öô_°ack
 (
nk_thªad_t
 * 
t
, 
nk_thªad_fun_t
 
fun
, * 
¨g
)

232 
	#RSP_STACK_OFFSET
 8

	)

233 
	#GPR_RDI_OFFSET
 48

	)

234 
	#GPR_RAX_OFFSET
 8

	)

235 
	#GPR_SAVE_SIZE
 120

	)

236 
	#STACK_SAVE_SIZE
 64

	)

237 
	#THREAD_SETUP_SIZE
 (
STACK_SAVE_SIZE
 + 
GPR_SAVE_SIZE
)

	)

243 i‡(
fun
) {

244 
	`thªad_push
(
t
, (
uöt64_t
)&
thªad_˛ónup
);

245 
	`thªad_push
(
t
, (
uöt64_t
)
fun
);

248 
	`thªad_push
(
t
, (
uöt64_t
)
KERNEL_SS
);

249 
	`thªad_push
(
t
, (
uöt64_t
)—->
r•
+
RSP_STACK_OFFSET
));

250 
	`thªad_push
(
t
, (
uöt64_t
)0UL);

251 
	`thªad_push
(
t
, (
uöt64_t
)
KERNEL_CS
);

252 
	`thªad_push
(
t
, (
uöt64_t
)&
nk_thªad_íåy
);

253 
	`thªad_push
(
t
, 0);

254 
	`thªad_push
(
t
, 0);

260 i‡(
fun
) {

261 *(
uöt64_t
*)(
t
->
r•
-
GPR_RDI_OFFSET
Ë(uöt64_t)
¨g
;

268 i‡(!
fun
) {

269 *(
uöt64_t
*)(
t
->
r•
-
GPR_RAX_OFFSET
) = 0;

272 
t
->
r•
 -
GPR_SAVE_SIZE
;

273 
	}
}

302 
	$nk_thªad_¸óã
 (
nk_thªad_fun_t
 
fun
,

303 * 
öput
,

304 ** 
ouçut
,

305 
uöt8_t
 
is_dëached
,

306 
nk_°ack_size_t
 
°ack_size
,

307 
nk_thªad_id_t
 * 
tid
,

308 
bound_˝u
)

310 
sys_öfo
 * 
sys
 = 
	`≥r_˝u_gë
(
sy°em
);

311 
nk_thªad_t
 * 
t
 = 
NULL
;

312 
cuºít_˝u
 = -1;

314 
t
 = 
	`mÆloc
((
nk_thªad_t
));

316 i‡(!
t
) {

317 
	`THREAD_ERROR
("CouldÇotállocateÅhread struct\n");

318  -
EINVAL
;

321 
	`mem£t
(
t
, 0, (
nk_thªad_t
));

323 i‡(
°ack_size
) {

324 
t
->
°ack
 = (*)
	`mÆloc
(
°ack_size
);

325 
t
->
°ack_size
 = stack_size;

327 
t
->
°ack
 = (*)
	`mÆloc
(
PAGE_SIZE
);

328 
t
->
°ack_size
 = 
PAGE_SIZE
;

331 i‡(!
t
->
°ack
) {

332 
	`THREAD_ERROR
("FailedÅoállocateá stack\n");

333 
	`‰ì
(
t
);

334  -
EINVAL
;

337 i‡(
	`_nk_thªad_öô
(
t
,Å->
°ack
, 
is_dëached
, 
bound_˝u
, 
	`gë_cur_thªad
()) < 0) {

338 
	`THREAD_ERROR
("CouldÇot initializeÅhread\n");

339 
out_îr
;

342 
t
->
°©us
 = 
NK_THR_INIT
;

344 
t
->
fun
 = fun;

345 
t
->
öput
 = input;

346 
t
->
ouçut
 = output;

348 i‡(
	`nk_sched_thªad_po°_¸óã
(
t
)) {

349 
	`THREAD_ERROR
("Scheduler doesÇotácceptÅhread creation\n");

350 
out_îr
;

353 i‡(
tid
) {

354 *
tid
 = (
nk_thªad_id_t
)
t
;

357 
	`THREAD_DEBUG
("Thªad cª©ê¸ótögÇewÅhªad wôhÅ=%p,Åid=%lu\n", 
t
,Å->
tid
);

361 
out_îr
:

362 
	`‰ì
(
t
->
°ack
);

363 
	`‰ì
(
t
);

364  -
EINVAL
;

365 
	}
}

387 
	$nk_thªad_°¨t
 (
nk_thªad_fun_t
 
fun
,

388 * 
öput
,

389 ** 
ouçut
,

390 
uöt8_t
 
is_dëached
,

391 
nk_°ack_size_t
 
°ack_size
,

392 
nk_thªad_id_t
 * 
tid
,

393 
bound_˝u
)

395 
nk_thªad_id_t
 
√wtid
 = 
NULL
;

396 
nk_thªad_t
 * 
√wthªad
 = 
NULL
;

399 
	`THREAD_DEBUG
("SèπÅhªad, cÆÀ∏%p\n", 
	`__buûtö_ªtu∫_addªss
(0));

401 i‡(
	`nk_thªad_¸óã
(
fun
, 
öput
, 
ouçut
, 
is_dëached
, 
°ack_size
, &
√wtid
, 
bound_˝u
) < 0) {

402 
	`THREAD_ERROR
("CouldÇot createÅhread\n");

406 
√wthªad
 = (
nk_thªad_t
*)
√wtid
;

408 i‡(
tid
) {

409 *
tid
 = 
√wtid
;

412  
	`nk_thªad_run
(
√wthªad
);

413 
	}
}

415 
	$nk_thªad_run
(
nk_thªad_id_t
 
t
)

417 
nk_thªad_t
 * 
√wthªad
 = (nk_thªad_t*)
t
;

419 
	`THREAD_DEBUG
("TryögÅÿexecuãÅhªad %∞—id %lu)", 
√wthªad
,√wthªad->
tid
);

421 
	`THREAD_DEBUG
("RUN: Fun˘i⁄: %Œu\n", 
√wthªad
->
fun
);

422 
	`THREAD_DEBUG
("RUN: Bound_CPU: %Œu\n", 
√wthªad
->
bound_˝u
);

423 
	`THREAD_DEBUG
("RUN: Cuºít_CPU: %Œu\n", 
√wthªad
->
cuºít_˝u
);

425 
	`thªad_£tup_öô_°ack
(
√wthªad
,Çewthªad->
fun
,Çewthªad->
öput
);

428 
	`THREAD_DEBUG
("Ru¿thªad inôülized: %∞—id=%luË°ack=%∞size=%luÑ•=%p\n",
√wthªad
,√wthªad->
tid
,√wthªad->
°ack
,√wthªad->
°ack_size
,√wthªad->
r•
);

430 i‡(
	`nk_sched_make_ru¬abÀ
(
√wthªad
,Çewthªad->
cuºít_˝u
,1)) {

431 
	`THREAD_ERROR
("Scheduler failedÅoÑunÅhread (%p,Åid=%u) on cpu %u\n",

432 
√wthªad
,Çewthªad->
tid
,Çewthªad->
cuºít_˝u
);

436 #ifde‡
NAUT_CONFIG_DEBUG_THREADS


437 i‡(
√wthªad
->
bound_˝u
 =
CPU_ANY
) {

438 
	`THREAD_DEBUG
("Ru¬ögÅhªad (%p,Åid=%uË⁄ [ANY CPU] cuºít_˝u=%d\n", 
√wthªad
,Çewthªad->
tid
,√wthªad->
cuºít_˝u
);

440 
	`THREAD_DEBUG
("Ru¬ögÅhªad (%p,Åid=%uË⁄ bound cpu %u\n", 
√wthªad
,Çewthªad->
tid
,Çewthªad->
cuºít_˝u
);

444 
	`nk_sched_kick_˝u
(
√wthªad
->
cuºít_˝u
);

447 
	}
}

449 
	$nk_thªad_«me
(
nk_thªad_id_t
 
tid
, *
«me
)

451 
nk_thªad_t
 * 
t
 = (nk_thªad_t*)
tid
;

452 
	`°∫˝y
(
t
->
«me
,«me,
MAX_THREAD_NAME
);

453 
t
->
«me
[
MAX_THREAD_NAME
-1] = 0;

455 
	}
}

465 
	$nk_wake_waôîs
 ()

467 
nk_thªad_t
 * 
me
 = 
	`gë_cur_thªad
();

468 
	`nk_thªad_queue_wake_Æl
(
me
->
waôq
);

469 
	}
}

471 
	$nk_yõld
()

473 
nk_thªad
 *
me
 = 
	`gë_cur_thªad
();

475 
	`•ö_lock
(&
me
->
lock
);

477 
	`nk_sched_yõld
(&
me
->
lock
);

478 
	}
}

482 
	$_thªad_queue_wake_Æl
 (
nk_thªad_queue_t
 * 
q
, 
have_lock
)

484 
nk_queue_íåy_t
 * 
ñm
 = 
NULL
;

485 
nk_thªad_t
 * 
t
 = 
NULL
;

486 
uöt8_t
 
Êags
=0;

488 i‡(
	`ö_öãºu±_c⁄ãxt
()) {

489 
	`THREAD_DEBUG
("[I¡îru± C⁄ãxt] Thªad %lu (%sËi†wakögáŒ waôî†⁄Åhªad queuê(q=%p)\n", 
	`gë_cur_thªad
()->
tid
, gë_cur_thªad()->
«me
, (*)
q
);

491 
	`THREAD_DEBUG
("[Thªad C⁄ãxt] Thªad %lu (%sËi†wakögáŒ waôî†⁄Åhªad queuê(q=%p)\n", 
	`gë_cur_thªad
()->
tid
, gë_cur_thªad()->
«me
, (*)
q
);

494 
	`ASSERT
(
q
);

496 i‡(!
have_lock
) {

497 
Êags
 = 
	`•ö_lock_úq_ßve
(&
q
->
lock
);

500 
	`THREAD_DEBUG
("Wakeup: haveÜock\n");

502 (
ñm
 = 
	`nk_dequeue_fú°
(
q
))) {

503 
t
 = 
	`c⁄èöî_of
(
ñm
, 
nk_thªad_t
, 
waô_node
);

505 
	`THREAD_DEBUG
("Wakög %lu (%s), sètu†%lu\n", 
t
->
tid
,t->
«me
,t->
°©us
);

507 
	`ASSERT
(
t
);

508 
	`ASSERT
(
t
->
°©us
 =
NK_THR_WAITING
);

510 i‡(
	`nk_sched_awakí
(
t
,Å->
cuºít_˝u
)) {

511 
	`THREAD_ERROR
("FailedÅoáwakenÅhread\n");

512 
out
;

515 
	`nk_sched_kick_˝u
(
t
->
cuºít_˝u
);

516 
	`THREAD_DEBUG
("WakögáŒ waôî†⁄Åhªad queuê(q=%pËwokêthªad %lu (%s)\n", (*)
q
,
t
->
tid
,t->
«me
);

520 
out
:

521 
	`THREAD_DEBUG
("Wakeup complete -ÑeleasingÜock\n");

522 i‡(!
have_lock
) {

523 
	`•ö_u∆ock_úq_ª°‹e
(&
q
->
lock
, 
Êags
);

525 
	}
}

540 
	$nk_thªad_exô
 (* 
ªtvÆ
)

542 
nk_thªad_t
 * 
me
 = 
	`gë_cur_thªad
();

543 
nk_thªad_queue_t
 * 
wq
 = 
me
->
waôq
;

544 
uöt8_t
 
Êags
;

546 
	`THREAD_DEBUG
("Thªad %∞—id=%u (%s)Ëexôög, joöög wôh chûdªn\n", 
me
, me->
tid
, me->
«me
);

549 
	`nk_joö_Æl_chûdªn
(
NULL
);

551 
	`THREAD_DEBUG
("Children joined\n");

554 
	`és_exô
();

556 
	`THREAD_DEBUG
("TLSÉxit complete\n");

562 
Êags
 = 
	`•ö_lock_úq_ßve
(&
wq
->
lock
);

563 
	`¥ìm±_dißbÀ
();

564 
	`úq_íabÀ_ª°‹e
(
Êags
);

566 
	`THREAD_DEBUG
("Lockácquired\n");

570 
me
->
ouçut
 = 
ªtvÆ
;

571 
me
->
°©us
 = 
NK_THR_EXITED
;

574 
__asm__
 
	`__vﬁ©ûe__
 ("mfence" : : : "memory");

576 
	`THREAD_DEBUG
("State update complete\n");

579 
	`_thªad_queue_wake_Æl
(
wq
, 1);

581 
	`THREAD_DEBUG
("Waiting wakeup complete\n");

583 
me
->
ªfcou¡
--;

585 
	`THREAD_DEBUG
("Thªad %∞—id=%u (%s)Ëexô com∂ëê- invokög scheduÀr\n", 
me
, me->
tid
, me->
«me
);

588 
	`nk_sched_exô
(&
wq
->
lock
);

591 
	`∑nic
("ShouldÇever get here!\n");

592 
	}
}

604 
	$nk_thªad_de°roy
 (
nk_thªad_id_t
 
t
)

606 
nk_thªad_t
 * 
thëhªad
 = (nk_thªad_t*)
t
;

608 
	`THREAD_DEBUG
("De°royögÅhªad (%p,Åid=%lu)\n", (*)
thëhªad
,Åhëhªad->
tid
);

610 
	`¥ìm±_dißbÀ
();

612 
	`nk_sched_thªad_¥e_de°roy
(
thëhªad
);

615 
	`nk_dequeue_íåy
(&(
thëhªad
->
waô_node
));

619 
	`nk_thªad_queue_de°roy
(
thëhªad
->
waôq
);

621 
	`nk_sched_thªad_°©e_deöô
(
thëhªad
);

622 
	`‰ì
(
thëhªad
->
°ack
);

623 
	`‰ì
(
thëhªad
);

625 
	`¥ìm±_íabÀ
();

626 
	}
}

629 
	$exô_check
(*
°©e
)

631 vﬁ©ûê
nk_thªad_t
 *
thëhªad
 = (nk_thªad_à*)
°©e
;

633 
	`THREAD_DEBUG
("exô_check:Åhªad (%lu %sË°©u†i†%u\n",
thëhªad
->
tid
,thëhªad->
«me
,thëhªad->
°©us
);

634  
thëhªad
->
°©us
==
NK_THR_EXITED
;

635 
	}
}

651 
	$nk_joö
 (
nk_thªad_id_t
 
t
, ** 
ªtvÆ
)

653 
nk_thªad_t
 *
thëhªad
 = (nk_thªad_t*)
t
;

655 
	`THREAD_DEBUG
("Joö inôüãd f‹Åhªad %lu \"%s\"\n", 
thëhªad
->
tid
,Åhëhªad->
«me
);

657 
	`ASSERT
(
thëhªad
->
∑ª¡
 =
	`gë_cur_thªad
());

659 
	`nk_thªad_queue_¶ìp_exãnded
(
thëhªad
->
waôq
, 
exô_check
,Åhethread);

661 
	`THREAD_DEBUG
("Joö commí˚d f‹Åhªad %lu \"%s\"\n", 
thëhªad
->
tid
,Åhëhªad->
«me
);

663 
	`ASSERT
(
	`exô_check
(
thëhªad
));

665 i‡(
ªtvÆ
) {

666 *
ªtvÆ
 = 
thëhªad
->
ouçut
;

669 
	`thªad_dëach
(
thëhªad
);

671 
	`THREAD_DEBUG
("Joö com∂ëed f‹Åhªad %lu \"%s\"\n", 
thëhªad
->
tid
,Åhëhªad->
«me
);

674 
	}
}

694 
nk_joö_Æl_chûdªn
 ((*
func
)(* 
ªs
))

696 
nk_thªad_t
 * 
ñm
 = 
NULL
;

697 
nk_thªad_t
 * 
tmp
 = 
NULL
;

698 
nk_thªad_t
 * 
me
 = 
	`gë_cur_thªad
();

699 * 
ªs
 = 
NULL
;

700 
ªt
 = 0;

702 
	`li°_f‹_óch_íåy_ß„
(
ñm
, 
tmp
, &(
me
->
chûdªn
), 
chûd_node
) {

704 i‡(
	`nk_joö
(
ñm
, &
ªs
) < 0) {

705 
	`THREAD_ERROR
("CouldÇŸ joö chûdÅhªad (t=%p)\n", 
ñm
);

706 
ªt
 = -1;

710 i‡(
func
) {

711 i‡(
	`func
(
ªs
) < 0) {

712 
	`THREAD_ERROR
("C⁄sumî indiˇãdÉº‹ f‹ chûdÅhªad (t=%p, ouçut=%p)\n", 
ñm
,
ªs
);

713 
ªt
 = -1;

720  
ªt
;

721 
	}
}

733 
	$nk_£t_thªad_f‹k_ouçut
 (* 
ªsu…
)

735 
nk_thªad_t
* 
t
 = 
	`gë_cur_thªad
();

736 
t
->
ouçut
 = 
ªsu…
;

737 
	}
}

750 
nk_thªad_queue_¶ìp_exãnded
(
nk_thªad_queue_t
 *
wq
, (*
c⁄d_check
)(*
°©e
), *state)

752 
nk_thªad_t
 * 
t
 = 
	`gë_cur_thªad
();

753 
uöt8_t
 
Êags
;

755 
	`THREAD_DEBUG
("Thªad %lu (%sËgoögÅÿ¶ì∞⁄ queuê%p\n", 
t
->
tid
,Å->
«me
, (*)
wq
);

758 
Êags
 = 
	`•ö_lock_úq_ßve
(&
wq
->
lock
);

765 i‡(
c⁄d_check
 && 
	`c⁄d_check
(
°©e
)) {

770 
	`•ö_u∆ock_úq_ª°‹e
(&
wq
->
lock
, 
Êags
);

771 
	`THREAD_DEBUG
("Thªad %lu (%sËha†Á° wakeu∞⁄ queuê%∞- c⁄dôi⁄áÃódy më\n", 
t
->
tid
,Å->
«me
, (*)
wq
);

779 
	`THREAD_DEBUG
("Thªad %lu (%sËi†queueög it£l‡⁄ queuê%p\n", 
t
->
tid
,Å->
«me
, (*)
wq
);

781 
t
->
°©us
 = 
NK_THR_WAITING
;

782 
	`nk_íqueue_íåy
(
wq
, &(
t
->
waô_node
));

785 
__asm__
 
	`__vﬁ©ûe__
 ("mfence" : : : "memory");

789 
	`¥ìm±_dißbÀ
();

795 
	`úq_íabÀ_ª°‹e
(
Êags
);

797 
	`THREAD_DEBUG
("Thªad %lu (%sËi†havögÅhêscheduÀ∏puàô£l‡tÿ¶ì∞⁄ queuê%p\n", 
t
->
tid
,Å->
«me
, (*)
wq
);

803 
	`nk_sched_¶ìp
(&
wq
->
lock
);

805 
	`THREAD_DEBUG
("Thªad %lu (%sËha†¶ow wakeu∞⁄ queuê%p\n", 
t
->
tid
,Å->
«me
, (*)
wq
);

812 
	}
}

814 
	$nk_thªad_queue_¶ìp
(
nk_thªad_queue_t
 *
wq
)

816  
	`nk_thªad_queue_¶ìp_exãnded
(
wq
,0,0);

817 
	}
}

828 
	$nk_thªad_queue_wake_⁄e
 (
nk_thªad_queue_t
 * 
q
)

830 
nk_queue_íåy_t
 * 
ñm
 = 
NULL
;

831 
nk_thªad_t
 * 
t
 = 
NULL
;

832 
uöt8_t
 
Êags
 = 
	`úq_dißbÀ_ßve
();

834 i‡(
	`ö_öãºu±_c⁄ãxt
()) {

835 
	`THREAD_DEBUG
("[I¡îru± C⁄ãxt] Thªad %lu (%sËi†wakög o√ waôî o¿thªad queuê(q=%p)\n", 
	`gë_cur_thªad
()->
tid
, gë_cur_thªad()->
«me
, (*)
q
);

837 
	`THREAD_DEBUG
("Thªad %lu (%sËi†wakög o√ waôî o¿thªad queuê(q=%p)\n", 
	`gë_cur_thªad
()->
tid
, gë_cur_thªad()->
«me
, (*)
q
);

840 
	`ASSERT
(
q
);

842 
ñm
 = 
	`nk_dequeue_fú°_©omic
(
q
);

845 i‡(!
ñm
) {

846 
	`THREAD_DEBUG
("No waiters on wait queue\n");

847 
out
;

850 
t
 = 
	`c⁄èöî_of
(
ñm
, 
nk_thªad_t
, 
waô_node
);

852 
	`ASSERT
(
t
);

853 
	`ASSERT
(
t
->
°©us
 =
NK_THR_WAITING
);

855 i‡(
	`nk_sched_awakí
(
t
,Å->
cuºít_˝u
)) {

856 
	`THREAD_ERROR
("FailedÅoáwakenÅhread\n");

857 
out
;

860 
	`nk_sched_kick_˝u
(
t
->
cuºít_˝u
);

862 
	`THREAD_DEBUG
("Thªad queuêwakê⁄ê(q=%pËw‹k u∞thªad %lu (%s)\n", (*)
q
, 
t
->
tid
,Å->
«me
);

864 
out
:

865 
	`úq_íabÀ_ª°‹e
(
Êags
);

867 
	}
}

882 
	$nk_thªad_queue_wake_Æl
 (
nk_thªad_queue_t
 * 
q
)

884 
	`_thªad_queue_wake_Æl
(
q
,0);

885 
	}
}

900 
nk_és_key_¸óã
 (
nk_és_key_t
 * 
key
, (*
de°ru˘‹
)(*))

902 
i
;

904 
i
 = 0; i < 
TLS_MAX_KEYS
; i++) {

905 
¢
 = 
és_keys
[
i
].
£q_num
;

907 i‡(
	`TLS_KEY_AVAIL
(
¢
Ë&& 
	`TLS_KEY_USABLE
(sn) &&

908 
	`©omic_cmpsw≠
(
és_keys
[
i
].
£q_num
, 
¢
, sn+1) == sn) {

910 
és_keys
[
i
].
de°ru˘‹
 = destructor;

911 *
key
 = 
i
;

918  -
EAGAIN
;

919 
	}
}

931 
	$nk_és_key_dñëe
 (
nk_és_key_t
 
key
)

933 i‡(
	`likñy
(
key
 < 
TLS_MAX_KEYS
)) {

934 
¢
 = 
és_keys
[
key
].
£q_num
;

936 i‡(
	`likñy
(!
	`TLS_KEY_AVAIL
(
¢
)) &&

937 
	`©omic_cmpsw≠
(
és_keys
[
key
].
£q_num
, 
¢
, sn+1) == sn) {

942  -
EINVAL
;

943 
	}
}

958 
	$nk_és_gë
 (
nk_és_key_t
 
key
)

960 
nk_thªad_t
 * 
t
;

962 i‡(
	`u∆ikñy
(
key
 >
TLS_MAX_KEYS
)) {

963  
NULL
;

966 
t
 = 
	`gë_cur_thªad
();

967  (*)
t
->
és
[
key
];

968 
	}
}

981 
	$nk_és_£t
 (
nk_és_key_t
 
key
, c⁄° * 
vÆ
)

983 
nk_thªad_t
 * 
t
;

984 
¢
;

986 i‡(
key
 >
TLS_MAX_KEYS
 ||

987 
	`TLS_KEY_AVAIL
((
¢
 = 
és_keys
[
key
].
£q_num
))) {

988  -
EINVAL
;

991 
t
 = 
	`gë_cur_thªad
();

992 
t
->
és
[
key
] = 
vÆ
;

994 
	}
}

1004 
nk_thªad_id_t


1005 
	$nk_gë_tid
 ()

1007 
nk_thªad_t
 * 
t
 = (nk_thªad_t*)
	`gë_cur_thªad
();

1008  (
nk_thªad_id_t
)
t
;

1009 
	}
}

1018 
nk_thªad_id_t


1019 
	$nk_gë_∑ª¡_tid
 ()

1021 
nk_thªad_t
 * 
t
 = (nk_thªad_t*)
	`gë_cur_thªad
();

1022 i‡(
t
 &&Å->
∑ª¡
) {

1023  (
nk_thªad_id_t
)
t
->
∑ª¡
;

1025  
NULL
;

1026 
	}
}

1043 
	#LAUNCHPAD
 16

	)

1047 
	#STACK_CLONE_DEPTH
 2

	)

1055 
nk_thªad_id_t


1056 
	$__thªad_f‹k
 ()

1058 
nk_thªad_t
 *
∑ª¡
 = 
	`gë_cur_thªad
();

1059 
nk_thªad_id_t
 
tid
;

1060 
nk_thªad_t
 * 
t
;

1061 
nk_°ack_size_t
 
size
, 
Æloc_size
;

1062 
uöt64_t
 
rbp1_off£t_‰om_ªt0_addr
;

1063 *
chûd_°ack
;

1064 
uöt64_t
 
r•
;

1066 
__asm__
 
	`__vﬁ©ûe__
 ( "movq %%r•, %0" : "Ù"(
r•
) : : "memory");

1068 #ifde‡
NAUT_CONFIG_ENABLE_STACK_CHECK


1070 i‡((
uöt64_t
)
r•
 <(uöt64_t)
∑ª¡
->
°ack
 ||

1071 (
uöt64_t
)
r•
 >(uöt64_t)(
∑ª¡
->
°ack
 +Ö¨ít->
°ack_size
)) {

1072 
	`THREAD_ERROR
("Parent'sÅop of stack (%p)Éxceeds boundaries of stack (%p-%p)\n",

1073 
r•
, 
∑ª¡
->
°ack
,Ö¨ít->°ack+∑ª¡->
°ack_size
);

1074 
	`∑nic
("Detected stack out of bounds inÖarent during fork\n");

1078 
	`THREAD_DEBUG
("F‹kögÅhªad fromÖ¨ít=%∞tid=%lu sèck=%p-%∞r•=%p\n", 
∑ª¡
,Ö¨ít->
tid
,∑ª¡->
°ack
,∑ª¡->°ack+∑ª¡->
°ack_size
,
r•
);

1080 #ifde‡
NAUT_CONFIG_THREAD_OPTIMIZE


1081 
	`THREAD_WARN
("Thread fork may function incorrectly withággressiveÅhreading optimizations\n");

1084 *
rbp0
 = 
	`__buûtö_‰ame_addªss
(0);

1085 *
rbp1
 = 
	`__buûtö_‰ame_addªss
(1);

1086 *
rbp_tos
 = 
	`__buûtö_‰ame_addªss
(
STACK_CLONE_DEPTH
);

1087 *
ªt0_addr
 = 
rbp0
 + 8;

1091 i‡((
uöt64_t
)
rbp_tos
 <(uöt64_t)
∑ª¡
->
°ack
 ||

1092 (
uöt64_t
)
rbp_tos
 >(uöt64_t)(
∑ª¡
->
°ack
 +Ö¨ít->
°ack_size
)) {

1093 
	`THREAD_DEBUG
("C™nŸÑesﬁvê%lu sèck føme†⁄ f‹k, usög ju° o√\n", 
STACK_CLONE_DEPTH
);

1094 
rbp_tos
 = 
rbp1
;

1102 
size
 = (
rbp_tos
 + 8Ë- 
ªt0_addr
 + 
LAUNCHPAD
;

1106 
rbp1_off£t_‰om_ªt0_addr
 = 
rbp1
 - 
ªt0_addr
;

1108 
Æloc_size
 = 
∑ª¡
->
°ack_size
;

1110 i‡(
	`nk_thªad_¸óã
(
NULL
,

1111 
NULL
,

1112 
NULL
,

1114 
Æloc_size
,

1115 &
tid
,

1116 
CPU_ANY
)

1118 
	`THREAD_ERROR
("CouldÇot forkÅhread\n");

1122 
t
 = (
nk_thªad_t
*)
tid
;

1124 
	`THREAD_DEBUG
("F‹kedÅhªad cª©ed: %∞—id=%luË°ack=%∞size=%luÑ•=%p\n",
t
,t->
tid
,t->
°ack
,t->
°ack_size
,t->
r•
);

1126 
chûd_°ack
 = 
t
->
°ack
;

1129 
	`thªad_push
(
t
, (
uöt64_t
)&
thªad_˛ónup
);

1138 
	`mem˝y
(
chûd_°ack
 + 
Æloc_size
 - 
size
, 
ªt0_addr
, sizê- 
LAUNCHPAD
);

1139 
t
->
r•
 = (
uöt64_t
)(
chûd_°ack
 + 
Æloc_size
 - 
size
);

1141 **
rbp2_±r
 = (**)(
t
->
r•
 + 
rbp1_off£t_‰om_ªt0_addr
);

1142 **
ªt2_±r
 = 
rbp2_±r
+1;

1145 *
rbp2_±r
 = 0x0ULL;

1148 *
ªt2_±r
 = &
thªad_˛ónup
;

1152 
	`thªad_£tup_öô_°ack
(
t
, 
NULL
, NULL);

1154 
	`THREAD_DEBUG
("F‹kedÅhªad inôülized: %∞—id=%luË°ack=%∞size=%luÑ•=%p\n",
t
,t->
tid
,t->
°ack
,t->
°ack_size
,t->
r•
);

1156 #ifde‡
NAUT_CONFIG_ENABLE_STACK_CHECK


1158 i‡((
uöt64_t
)
t
->
r•
 <(uöt64_tÈ->
°ack
 ||

1159 (
uöt64_t
)
t
->
r•
 >(uöt64_t)—->
°ack
 +Å->
°ack_size
)) {

1160 
	`THREAD_ERROR
("Child'sÑsp (%p)Éxceeds boundaries of stack (%p-%p)\n",

1161 
t
->
r•
,Å->
°ack
,Å->°ack+t->
°ack_size
);

1162 
	`∑nic
("Detected stack out of bounds in child during fork\n");

1167 #ifde‡
NAUT_CONFIG_FPU_SAVE


1169 
	`nk_Â_ßve
(*
de°
);

1170 
	`nk_Â_ßve
(
t
->
Âu_°©e
);

1173 i‡(
	`nk_sched_make_ru¬abÀ
(
t
,t->
cuºít_˝u
,1)) {

1174 
	`THREAD_ERROR
("Scheduler failedÅoÑunÅhread (%p,Åid=%u) on cpu %u\n",

1175 
t
,Å->
tid
,Å->
cuºít_˝u
);

1179 
	`THREAD_DEBUG
("F‹kedÅhªad madêru¬abÀ: %∞—id=%lu)\n",
t
,t->
tid
);

1182  
tid
;

1183 
	}
}

1191 
	$és_dummy
 (* 
ö
, ** 
out
)

1193 
i
;

1194 
nk_és_key_t
 * 
keys
 = 
NULL
;

1197 
keys
 = 
	`mÆloc
((
nk_és_key_t
)*
TLS_MAX_KEYS
);

1198 i‡(!
keys
) {

1199 
	`THREAD_ERROR
("couldÇotállocate keys\n");

1203 
i
 = 0; i < 
TLS_MAX_KEYS
; i++) {

1204 i‡(
	`nk_és_key_¸óã
(&
keys
[
i
], 
NULL
) != 0) {

1205 
	`THREAD_ERROR
("CouldÇŸ cª©êTLS key (%u)\n", 
i
);

1206 
out_îr
;

1209 i‡(
	`nk_és_£t
(
keys
[
i
], (const *)(i + 100L)) != 0) {

1210 
	`THREAD_ERROR
("CouldÇŸ së TLS key (%u)\n", 
i
);

1211 
out_îr
;

1216 
i
 = 0; i < 
TLS_MAX_KEYS
; i++) {

1217 i‡(
	`nk_és_gë
(
keys
[
i
]) != (*)(i + 100L)) {

1218 
	`THREAD_ERROR
("Mism©ched TLS vÆ! GŸ %p, should bê%p\n", 
	`nk_és_gë
(
keys
[
i
]), (*)(i+100L));

1219 
out_îr
;

1222 i‡(
	`nk_és_key_dñëe
(
keys
[
i
]) != 0) {

1223 
	`THREAD_ERROR
("CouldÇŸ dñëêTLS key %u\n", 
i
);

1224 
out_îr
;

1228 i‡(
	`nk_és_key_¸óã
(&
keys
[0], 
NULL
) != 0) {

1229 
	`THREAD_ERROR
("2nd key create failed\n");

1230 
out_îr
;

1233 i‡(
	`nk_és_key_dñëe
(
keys
[0]) != 0) {

1234 
	`THREAD_ERROR
("2nd key delete failed\n");

1235 
out_îr
;

1238 
	`THREAD_INFO
("ThreadÜocal storageÅest succeeded\n");

1240 
out_îr
:

1241 
	`‰ì
(
keys
);

1242 
	}
}

1246 
	$nk_és_ã°
 ()

1248 
	`nk_thªad_°¨t
(
és_dummy
, 
NULL
, NULL, 1, 
TSTACK_DEFAULT
, NULL, 1);

1249 
	}
}

	@ticketlock.c

23 
	~<«utûus/«utûus.h
>

24 
	~<«utûus/tickëlock.h
>

28 
	$nk_tickë_lock_öô
 (
nk_tickë_lock_t
 * 
l
)

30 
l
->
vÆ
 = 0;

31 
	}
}

35 
	$nk_tickë_lock_deöô
 (
nk_tickë_lock_t
 * 
l
)

37 
l
->
vÆ
 = 0;

38 
	}
}

41 
ölöe
 
__Æways_ölöe


42 
	$nk_tickë_lock
 (
nk_tickë_lock_t
 * 
l
)

44 
	`NK_PROFILE_ENTRY
();

46 
asm
 volatile ("movw $1, %%ax\n\t"

52 : [
_u£rs
] "m" (
l
->
lock
.
u£rs
),

53 [
_tickë
] "m" (
l
->
lock
.
tickë
)

56 
	`NK_PROFILE_EXIT
();

57 
	}
}

60 
ölöe
 
__Æways_ölöe


61 
	$nk_tickë_u∆ock
 (
nk_tickë_lock_t
 * 
l
)

63 
	`NK_PROFILE_ENTRY
();

65 #i‚de‡
NAUT_CONFIG_XEON_PHI


66 
asm
 volatile ("mfence\n\t"

68 
asm
 volatile (

72 : [
_tickë
] "m" (
l
->
lock
.
tickë
)

75 
	`NK_PROFILE_EXIT
();

76 
	}
}

79 
ölöe
 
uöt32_t


80 
	$cmpxchg32
 (* 
m
, 
uöt32_t
 
ﬁd
, uöt32_à
√w
)

82 
uöt32_t
 
ªt
;

83 
asm
 volatile ("movl %[_old], %%eax\n\t"

86 : [
_out
] "Ù" (
ªt
)

87 : [
_ﬁd
] "r" (
ﬁd
),

88 [
_√w
] "r" (
√w
),

89 [
_m
] "m" (
m
)

91  
ªt
;

92 
	}
}

95 
ölöe
 
__Æways_ölöe


96 
	$nk_tickë_åylock
 (
nk_tickë_lock_t
 * 
l
)

98 
	`NK_PROFILE_ENTRY
();

100 
uöt16_t
 
me
 = 
l
->
lock
.
u£rs
;

101 
uöt16_t
 
míew
 = 
me
 + 1;

102 
uöt32_t
 
cmp
 = ((uöt32_tË
me
 << 16) + me;

103 
uöt32_t
 
cm≤ew
 = ((uöt32_tË
míew
 << 16Ë+ 
me
;

105 i‡(
	`cmpxchg32
(&(
l
->
vÆ
), 
cmp
, 
cm≤ew
) == cmp) {

109 
	`NK_PROFILE_EXIT
();

112 
	}
}

	@timer.c

24 
	~<«utûus/«utûus.h
>

25 
	~<«utûus/úq.h
>

26 
	~<«utûus/˝u.h
>

27 
	~<«utûus/≥r˝u.h
>

28 
	~<«utûus/mm.h
>

29 
	~<«utûus/timî.h
>

30 
	~<«utûus/scheduÀr.h
>

31 
	~<«utûus/•ölock.h
>

33 
	~<°ddef.h
>

35 #i‚de‡
NAUT_CONFIG_DEBUG_TIMERS


36 #unde‡
DEBUG_PRINT


37 
	#DEBUG_PRINT
(
fmt
, 
¨gs
...)

	)

40 
	#ERROR
(
fmt
, 
¨gs
...Ë
	`ERROR_PRINT
("timî: " fmt, ##¨gs)

	)

41 
	#DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("timî: " fmt, ##¨gs)

	)

42 
	#INFO
(
fmt
, 
¨gs
...Ë
	`INFO_PRINT
("timî: " fmt, ##¨gs)

	)

44 
•ölock_t
 
	g°©e_lock
;

45 
	#STATE_LOCK_CONF
 
uöt8_t
 
_°©e_lock_Êags


	)

46 
	#STATE_LOCK
(Ë
_°©e_lock_Êags
 = 
	`•ö_lock_úq_ßve
(&
°©e_lock
)

	)

47 
	#STATE_UNLOCK
(Ë
	`•ö_u∆ock_úq_ª°‹e
(&
°©e_lock
, 
_°©e_lock_Êags
);

	)

49 
li°_hód
 
	gtimî_li°
;

52 
	snk_timî
 {

53 
uöt64_t
 
	mÊags
;

54 
uöt64_t
 
	mtime_ns
;

55 
nk_thªad_queue_t
 *
	mwaôq
;

56 
uöt32_t
 
	m˝u
;

57 (*
	mˇŒback
)(*
	m¥iv
);

58 *
	m¥iv
;

59 
li°_hód
 
	mnode
;

60 vﬁ©ûê
uöt8_t
 
	msig«Àd
;

64 
nk_timî
 *
	$nk_Æloc_timî
()

66 
nk_timî
 *
t
 = 
	`mÆloc
((nk_timer));

68 i‡(!
t
) {

69 
	`ERROR
("Timerállocation failed\n");

73 
	`mem£t
(
t
,0,(
nk_timî
));

75 
t
->
waôq
 = 
	`nk_thªad_queue_¸óã
();

77 i‡(!
t
->
waôq
) {

78 
	`ERROR
("Timerállocation ofÅhread queue failed\n");

79 
	`‰ì
(
t
);

83  
t
;

84 
	}
}

86 
	$nk_‰ì_timî
(
nk_timî
 *
t
)

88 
	`nk_ˇn˚l_timî
(
t
);

89 
	`nk_thªad_queue_de°roy
(
t
->
waôq
);

90 
	`‰ì
(
t
);

91 
	}
}

93 
nk_£t_timî
(
nk_timî
 *
t
,

94 
uöt64_t
 
ns
,

95 
uöt64_t
 
Êags
,

96 (*
ˇŒback
)(*
p
),

97 *
p
,

98 
uöt32_t
 
˝u
)

100 
STATE_LOCK_CONF
;

102 
t
->
Êags
 = flags ;

103 
t
->
time_ns
 = 
	`nk_sched_gë_ªÆtime
(Ë+ 
ns
;

104 
t
->
ˇŒback
 = callback;

105 
t
->
¥iv
 = 
p
;

106 
t
->
˝u
 = cpu;

107 
t
->
sig«Àd
 = 0;

109 
	`STATE_LOCK
();

110 
	`li°_add
(&
t
->
node
, &
timî_li°
);

111 
	`STATE_UNLOCK
();

113 
	`DEBUG
("Timî %∞£t: fœgs=0x%Œx,Åime=%Œuns, cÆlback=%∞¥iv=%∞˝u=%lu, sig«Àd=%d\n", 
t
,Å->
Êags
,Å->
time_ns
,Å->
ˇŒback
,Å->
¥iv
,Å->
˝u
,Å->
sig«Àd
);

116 
	}
}

118 
	$nk_ˇn˚l_timî
(
nk_timî
 *
t
)

120 
STATE_LOCK_CONF
;

121 
li°_hód
 *
cur
;

123 
	`STATE_LOCK
();

127 
	`li°_f‹_óch
(
cur
,&
timî_li°
) {

128 i‡(
cur
==&(
t
->
node
)) {

132 i‡(
cur
==&(
t
->
node
)) {

133 
	`DEBUG
("C™˚lögÅimî %p\n",
t
);

134 
	`li°_dñ_öô
(
cur
);

137 
	`DEBUG
("NŸ c™˚lögÅimî %∞a†nŸ i¿a˘ivêli°\n",
t
);

139 
	`STATE_UNLOCK
();

140 
t
->
sig«Àd
 = 0;

142 
	}
}

144 
	$check
(*
°©e
)

146 
nk_timî
 *
t
 = 
°©e
;

147  
	`__sync_„tch_™d_add
(&
t
->
sig«Àd
,0);

148 
	}
}

150 
	$nk_waô_timî
(
nk_timî
 *
t
)

152 
	`DEBUG
("WaôÅimî %p\n",
t
);

153 !
	`__sync_„tch_™d_add
(&
t
->
sig«Àd
,0)) {

154 i‡(!(
t
->
Êags
 & 
TIMER_SPIN
)) {

155 
	`DEBUG
("GoingÅo sleep onÅhread queue\n");

156 
	`nk_thªad_queue_¶ìp_exãnded
(
t
->
waôq
, 
check
,Å);

158 
asm
 volatile ("pause");

160 
	`DEBUG
("Tryágain\n");

163 
	}
}

165 
	$_¶ìp
(
uöt64_t
 
ns
, 
•ö
)

167 
nk_timî
 * 
t
 = 
	`nk_Æloc_timî
();

169 i‡(!
t
) {

170 
	`ERROR
("FailedÅoállocateÅimer in sleep\n");

174 i‡(
	`nk_£t_timî
(
t
,

175 
	`nk_sched_gë_ªÆtime
(Ë+ 
ns
,

176 
•ö
 ? 
TIMER_SPIN
 : 0,

180 
	`ERROR
("FailedÅo setÅimer in sleep\n");

184 
rc
 = 
	`nk_waô_timî
(
t
);

186 
	`nk_‰ì_timî
(
t
);

188  
rc
;

189 
	}
}

191 
	$nk_¶ìp
(
uöt64_t
 
ns
Ë{  
	`_¶ìp
“s,0); 
	}
}

192 
	$nk_dñay
(
uöt64_t
 
ns
Ë{  
	`_¶ìp
“s,1); 
	}
}

197 
uöt64_t
 
	$nk_timî_h™dÀr
 ()

199 i‡(
	`my_˝u_id
()!=0) {

203 
STATE_LOCK_CONF
;

204 
nk_timî
 *
cur
, *
ãmp
;

205 
uöt64_t
 
now
 = 
	`nk_sched_gë_ªÆtime
();

206 
uöt64_t
 
óæõ°
 = -1;

208 
	`DEBUG
("Timer update\n");

210 
	`STATE_LOCK
();

212 
	`li°_f‹_óch_íåy_ß„
(
cur
, 
ãmp
, &
timî_li°
, 
node
) {

213 i‡(
now
 >
cur
->
time_ns
) {

214 
	`DEBUG
("FoundÉxpúedÅimî %p\n",
cur
);

215 
cur
->
sig«Àd
 = 1;

216 
	`li°_dñ_öô
(&
cur
->
node
);

217 i‡(!(
cur
->
Êags
 & 
TIMER_SPIN
)) {

219 
	`DEBUG
("WakingÅhreads\n");

220 
	`nk_thªad_queue_wake_Æl
(
cur
->
waôq
);

222 i‡(
cur
->
Êags
 & 
TIMER_CALLBACK
) {

224 
	`DEBUG
("Launching callback\n");

225 
	`smp_xˇŒ
(
cur
->
˝u
,

226 
cur
->
ˇŒback
,

227 
cur
->
¥iv
,

231 i‡(
cur
->
time_ns
 < 
óæõ°
) {

233 
óæõ°
 = 
cur
->
time_ns
;

238 
	`STATE_UNLOCK
();

240 
	`DEBUG
("Timî upd©e:É¨lõ° i†%Œu\n",
óæõ°
);

242  
óæõ°
;

243 
	}
}

246 
	$nk_timî_öô
()

248 
	`•ölock_öô
(&
°©e_lock
);

249 
	`INIT_LIST_HEAD
(&
timî_li°
);

251 
	`INFO
("Timers inited\n");

253 
	}
}

255 
	$nk_timî_deöô
()

257 
	`INFO
("Timers deinited\n");

259 
	}
}

	@vc.c

27 
	~<«utûus/«utûus.h
>

28 
	~<«utûus/thªad.h
>

29 
	~<«utûus/queue.h
>

30 
	~<«utûus/li°.h
>

31 
	~<dev/ps2.h
>

32 
	~<«utûus/vc.h
>

33 
	~<«utûus/ch¨dev.h
>

34 
	~<«utûus/¥ötk.h
>

35 
	~<dev/£rül.h
>

36 
	~<dev/vga.h
>

37 #ifde‡
NAUT_CONFIG_XEON_PHI


38 
	~<¨ch/k1om/xe⁄_phi.h
>

40 #ifde‡
NAUT_CONFIG_HVM_HRT


41 
	~<¨ch/hπ/hπ.h
>

44 #i‚de‡
NAUT_CONFIG_DEBUG_VIRTUAL_CONSOLE


45 #unde‡
DEBUG_PRINT


46 
	#DEBUG_PRINT
(
fmt
, 
¨gs
...)

	)

49 
	#ERROR
(
fmt
, 
¨gs
...Ë
	`ERROR_PRINT
("vc: " fmt, ##¨gs)

	)

50 
	#DEBUG
(
fmt
, 
¨gs
...Ë
	`DEBUG_PRINT
("vc: " fmt, ##¨gs)

	)

51 
	#INFO
(
fmt
, 
¨gs
...Ë
	`INFO_PRINT
("vc: " fmt, ##¨gs)

	)

53 
	gup
=0;

55 
•ölock_t
 
	g°©e_lock
;

57 
	#STATE_LOCK_CONF
 
uöt8_t
 
_°©e_lock_Êags


	)

58 
	#STATE_LOCK
(Ë
_°©e_lock_Êags
 = 
	`•ö_lock_úq_ßve
(&
°©e_lock
)

	)

59 
	#STATE_UNLOCK
(Ë
	`•ö_u∆ock_úq_ª°‹e
(&
°©e_lock
, 
_°©e_lock_Êags
);

	)

61 
	#BUF_LOCK_CONF
 
uöt8_t
 
_buf_lock_Êags


	)

62 
	#BUF_LOCK
(
c⁄s
Ë
_buf_lock_Êags
 = 
	`•ö_lock_úq_ßve
(&c⁄s->
buf_lock
)

	)

63 
	#BUF_UNLOCK
(
c⁄s
Ë
	`•ö_u∆ock_úq_ª°‹e
(&c⁄s->
buf_lock
, 
_buf_lock_Êags
);

	)

65 
	#QUEUE_LOCK_CONF
 
uöt8_t
 
_queue_lock_Êags


	)

66 
	#QUEUE_LOCK
(
c⁄s
Ë
_queue_lock_Êags
 = 
	`•ö_lock_úq_ßve
(&c⁄s->
queue_lock
)

	)

67 
	#QUEUE_UNLOCK
(
c⁄s
Ë
	`•ö_u∆ock_úq_ª°‹e
(&c⁄s->
queue_lock
, 
_queue_lock_Êags
);

	)

70 
li°_hód
 
	gvc_li°
;

73 
nk_vútuÆ_c⁄sﬁe
 *
	gcur_vc
 = 
NULL
;

76 
nk_vútuÆ_c⁄sﬁe
 *
	gdeÁu…_vc
 = 
NULL
;

77 
nk_vútuÆ_c⁄sﬁe
 *
	glog_vc
 = 
NULL
;

78 
nk_vútuÆ_c⁄sﬁe
 *
	gli°_vc
 = 
NULL
;

82 
	sch¨dev_c⁄sﬁe
 {

83 
	möôed
;

84 
nk_thªad_id_t
 
	mtid
;

85 
	m«me
[
DEV_NAME_LEN
];

86 
nk_ch¨_dev
 *
	mdev
;

87 
nk_vútuÆ_c⁄sﬁe
 *
	mcur_vc
;

88 
li°_hód
 
	mch¨dev_node
;

92 
li°_hód
 
	gch¨dev_c⁄sﬁe_li°
;

96 
ch¨dev_c⁄sﬁes_putch¨
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, 
d©a
);

97 
ch¨dev_c⁄sﬁes_¥öt
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, *
d©a
);

99 
nk_thªad_id_t
 
	gli°_tid
;

101 
	#Keycode_QUEUE_SIZE
 256

	)

102 
	#Sˇncode_QUEUE_SIZE
 512

	)

104 
	snk_vútuÆ_c⁄sﬁe
 {

105 
nk_vc_ty≥
 
	mty≥
;

106 
	m«me
[32];

108 
•ölock_t
 
	mqueue_lock
;

110 
•ölock_t
 
	mbuf_lock
;

111 
	uqueue
{

112 
nk_sˇncode_t
 
	ms_queue
[
Sˇncode_QUEUE_SIZE
];

113 
nk_keycode_t
 
	mk_queue
[
Keycode_QUEUE_SIZE
];

114 } 
	mkeybﬂrd_queue
;

115 
uöt16_t
 
	mBUF
[
VGA_WIDTH
 * 
VGA_HEIGHT
];

116 
uöt8_t
 
	mcur_x
, 
	mcur_y
, 
	mcur_©å
, 
	mfûl_©å
;

117 
uöt16_t
 
	mhód
, 
	mèû
;

118 (*
	møw_noqueue_ˇŒback
)(
	mnk_sˇncode_t
, *
	m¥iv
);

119 *
	møw_noqueue_ˇŒback_¥iv
;

120 
uöt32_t
 
	mnum_thªads
;

121 
li°_hód
 
	mvc_node
;

122 
nk_thªad_queue_t
 *
	mwaôög_thªads
;

126 
ölöe
 
	$nk_vc_is_a˘ive
()

128  
cur_vc
!=0;

129 
	}
}

131 
nk_vútuÆ_c⁄sﬁe
 * 
	$nk_gë_cur_vc
()

133  
cur_vc
;

134 
	}
}

136 
ölöe
 
	$c›y_di•œy_to_vc
(
nk_vútuÆ_c⁄sﬁe
 *
vc
)

138 #ifde‡
NAUT_CONFIG_X86_64_HOST


139 
	`vga_c›y_out
((*)
vc
->
BUF
,(vc->BUF));

141 #ifde‡
NAUT_CONFIG_XEON_PHI


142 
	`vga_c›y_out
((*)
vc
->
BUF
,(vc->BUF));

144 #ifde‡
NAUT_CONFIG_HVM_HRT


147 
	}
}

149 
ölöe
 
	$c›y_vc_to_di•œy
(
nk_vútuÆ_c⁄sﬁe
 *
vc
)

151 #ifde‡
NAUT_CONFIG_X86_64_HOST


152 
	`vga_c›y_ö
((*)
vc
->
BUF
,(vc->BUF));

154 #ifde‡
NAUT_CONFIG_XEON_PHI


155 
	`vga_c›y_ö
((*)
vc
->
BUF
,(vc->BUF));

157 #ifde‡
NAUT_CONFIG_HVM_HRT


160 
	}
}

163 
nk_vútuÆ_c⁄sﬁe
 *
nk_¸óã_vc
(*
«me
, 
nk_vc_ty≥
 
√w_vc_ty≥
, 
uöt8_t
 
©å
, (*
ˇŒback
)(
nk_sˇncode_t
, *
¥iv
), *
¥iv_d©a
)

165 
STATE_LOCK_CONF
;

166 
i
;

168 
nk_vútuÆ_c⁄sﬁe
 *
√w_vc
 = 
	`mÆloc
((nk_virtual_console));

170 i‡(!
√w_vc
) {

171 
	`ERROR
("FailedÅoállocateÇew console\n");

172  
NULL
;

174 
	`mem£t
(
√w_vc
, 0, (
nk_vútuÆ_c⁄sﬁe
));

175 
√w_vc
->
ty≥
 = 
√w_vc_ty≥
;

176 
	`°∫˝y
(
√w_vc
->
«me
,name,32);

177 
√w_vc
->
øw_noqueue_ˇŒback
 = 
ˇŒback
;

178 
√w_vc
->
øw_noqueue_ˇŒback_¥iv
 = 
¥iv_d©a
;

179 
√w_vc
->
cur_©å
 = 
©å
;

180 
√w_vc
->
fûl_©å
 = 
©å
;

181 
	`•ölock_öô
(&
√w_vc
->
queue_lock
);

182 
	`•ölock_öô
(&
√w_vc
->
buf_lock
);

183 
√w_vc
->
hód
 = 0;

184 
√w_vc
->
èû
 = 0;

185 
√w_vc
->
num_thªads
 = 0;

186 
√w_vc
->
waôög_thªads
 = 
	`nk_thªad_queue_¸óã
();

189 
i
 = 0; i < 
VGA_HEIGHT
*
VGA_WIDTH
; i++) {

190 
√w_vc
->
BUF
[
i
] = 
	`vga_make_íåy
(' ',Çew_vc->
cur_©å
);

193 
	`STATE_LOCK
();

194 
	`li°_add_èû
(&
√w_vc
->
vc_node
, &
vc_li°
);

195 
	`STATE_UNLOCK
();

196  
√w_vc
;

197 
	}
}

200 
	$_swôch_to_vc
(
nk_vútuÆ_c⁄sﬁe
 *
vc
)

202 i‡(!
vc
) {

205 i‡(
vc
!=
cur_vc
) {

206 
	`c›y_di•œy_to_vc
(
cur_vc
);

207 
cur_vc
 = 
vc
;

208 
	`c›y_vc_to_di•œy
(
cur_vc
);

209 #ifde‡
NAUT_CONFIG_X86_64_HOST


210 
	`vga_£t_curs‹
(
cur_vc
->
cur_x
, cur_vc->
cur_y
);

211 #ñi‡
NAUT_CONFIG_XEON_PHI


212 
	`phi_c⁄s_£t_curs‹
(
cur_vc
->
cur_x
, cur_vc->
cur_y
);

216 
	}
}

218 
	$_de°roy_vc
(
nk_vútuÆ_c⁄sﬁe
 *
vc
)

221 i‡(
vc
->
num_thªads
 || !
	`nk_queue_em±y_©omic
(vc->
waôög_thªads
)) {

222 
	`ERROR
("Cannot destroy virtual consoleÅhat hasÅhreads\n");

226 i‡(
vc
==
cur_vc
) {

227 
	`_swôch_to_vc
(
li°_vc
);

230 
	`li°_dñ
(&
vc
->
vc_node
);

231 
	`nk_thªad_queue_de°roy
(
vc
->
waôög_thªads
);

232 
	`‰ì
(
vc
);

234 
	}
}

236 
	$nk_de°roy_vc
(
nk_vútuÆ_c⁄sﬁe
 *
vc
)

238 
STATE_LOCK_CONF
;

239 
rc
;

241 
	`STATE_LOCK
();

242 
rc
=
	`_de°roy_vc
(
vc
);

243 
	`STATE_UNLOCK
();

244  
rc
;

245 
	}
}

248 
	$nk_böd_vc
(
nk_thªad_t
 *
thªad
, 
nk_vútuÆ_c⁄sﬁe
 * 
c⁄s
)

250 
STATE_LOCK_CONF
;

251 i‡(!
c⁄s
) {

254 
	`STATE_LOCK
();

255 
thªad
->
vc
 = 
c⁄s
;

256 
c⁄s
->
num_thªads
++;

257 
	`STATE_UNLOCK
();

259 
	}
}

263 
	$nk_ªÀa£_vc
(
nk_thªad_t
 *
thªad
)

265 
STATE_LOCK_CONF
;

267 i‡(!
thªad
 || !thªad->
vc
) {

270 
	`STATE_LOCK
();

271 
thªad
->
vc
->
num_thªads
--;

272 if(
thªad
->
vc
->
num_thªads
 == 0) {

273 if(
thªad
->
vc
 !
deÁu…_vc
) {

274 
	`_de°roy_vc
(
thªad
->
vc
);

277 
thªad
->
vc
 = 
NULL
;

278 
	`STATE_UNLOCK
();

280 
	}
}

282 
	$nk_swôch_to_vc
(
nk_vútuÆ_c⁄sﬁe
 *
vc
)

284 
rc
;

285 
STATE_LOCK_CONF
;

287 
	`STATE_LOCK
();

288 
rc
 = 
	`_swôch_to_vc
(
vc
);

289 
	`STATE_UNLOCK
();

291  
rc
;

292 
	}
}

294 
	$nk_swôch_to_¥ev_vc
()

296 
li°_hód
 *
cur_node
 = &
cur_vc
->
vc_node
;

297 
nk_vútuÆ_c⁄sﬁe
 *
èrgë
;

299 if(
cur_node
->
¥ev
 =&
vc_li°
) {

302 
èrgë
 = 
	`c⁄èöî_of
(
cur_node
->
¥ev
, 
nk_vútuÆ_c⁄sﬁe
, 
vc_node
);

303  
	`nk_swôch_to_vc
(
èrgë
);

304 
	}
}

306 
	$nk_swôch_to_√xt_vc
()

308 
li°_hód
 *
cur_node
 = &
cur_vc
->
vc_node
;

309 
nk_vútuÆ_c⁄sﬁe
 *
èrgë
;

311 if(
cur_node
->
√xt
 =&
vc_li°
) {

315 
èrgë
 = 
	`c⁄èöî_of
(
cur_node
->
√xt
, 
nk_vútuÆ_c⁄sﬁe
, 
vc_node
);

316  
	`nk_swôch_to_vc
(
èrgë
);

318 
	}
}

321 
	$_vc_s¸ﬁlup_•ecific
(
nk_vútuÆ_c⁄sﬁe
 *
vc
)

323 
i
;

325 #ifde‡
NAUT_CONFIG_XEON_PHI


326 i‡(
vc
==
cur_vc
) {

327 
	`phi_c⁄s_nŸify_s¸ﬁlup
();

331 
i
=0;

332 
i
<
VGA_WIDTH
*(
VGA_HEIGHT
-1);

333 
i
++) {

334 
vc
->
BUF
[
i
] = vc->BUF[i+
VGA_WIDTH
];

337 
i
 = 
VGA_WIDTH
*(
VGA_HEIGHT
-1);

338 
i
 < 
VGA_WIDTH
*
VGA_HEIGHT
;

339 
i
++) {

340 
vc
->
BUF
[
i
] = 
	`vga_make_íåy
(' ', vc->
fûl_©å
);

343 if(
vc
 =
cur_vc
) {

344 
	`c›y_vc_to_di•œy
(
vc
);

345 #ifde‡
NAUT_CONFIG_XEON_PHI


346 
	`phi_c⁄s_nŸify_ªdøw
();

351 
	}
}

353 
	$nk_vc_s¸ﬁlup_•ecific
(
nk_vútuÆ_c⁄sﬁe
 *
vc
)

355 
BUF_LOCK_CONF
;

356 
rc
;

357 i‡(!
vc
) {

360 
	`BUF_LOCK
(
vc
);

361 
rc
 = 
	`_vc_s¸ﬁlup_•ecific
(
vc
);

362 
	`BUF_UNLOCK
(
vc
);

363  
rc
;

364 
	}
}

366 
	$nk_vc_s¸ﬁlup
()

368 
rc
=0;

369 
nk_vútuÆ_c⁄sﬁe
 *
vc
 = 
	`gë_cur_thªad
()->vc;

371 i‡(!
vc
) {

372 
vc
 = 
deÁu…_vc
;

374 i‡(
vc
) {

375 
BUF_LOCK_CONF
;

376 
	`BUF_LOCK
(
vc
);

377 
rc
 = 
	`_vc_s¸ﬁlup_•ecific
(
vc
);

378 
	`BUF_UNLOCK
(
vc
);

381  
rc
;

382 
	}
}

384 
	$_vc_di•œy_ch¨_•ecific
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, 
uöt8_t
 
c
, uöt8_à
©å
, uöt8_à
x
, uöt8_à
y
)

386 i‡(!
vc
) {

390 
uöt16_t
 
vÆ
 = 
	`vga_make_íåy
 (
c
, 
©å
);

392 if(
x
 >
VGA_WIDTH
 || 
y
 >
VGA_HEIGHT
) {

395 
vc
->
BUF
[
y
 * 
VGA_WIDTH
 + 
x
] = 
vÆ
;

396 if(
vc
 =
cur_vc
) {

397 #ifde‡
NAUT_CONFIG_X86_64_HOST


398 
	`vga_wrôe_s¸ìn
(
x
,
y
,
vÆ
);

399 
	`vga_£t_curs‹
(
cur_vc
->
cur_x
, cur_vc->
cur_y
);

401 #ifde‡
NAUT_CONFIG_XEON_PHI


402 
	`vga_wrôe_s¸ìn
(
x
,
y
,
vÆ
);

403 
	`phi_c⁄s_£t_curs‹
(
cur_vc
->
cur_x
, cur_vc->
cur_y
);

409 
	}
}

411 
	$_vc_di•œy_ch¨
(
uöt8_t
 
c
, uöt8_à
©å
, uöt8_à
x
, uöt8_à
y
)

413 
nk_vútuÆ_c⁄sﬁe
 *
thªad_vc
 = 
	`gë_cur_thªad
()->
vc
;

414 i‡(!
thªad_vc
) {

415 
thªad_vc
 = 
deÁu…_vc
;

417 i‡(!
thªad_vc
) {

420  
	`_vc_di•œy_ch¨_•ecific
(
thªad_vc
,
c
,
©å
,
x
,
y
);

422 
	}
}

424 
	$nk_vc_di•œy_ch¨_•ecific
(
nk_vútuÆ_c⁄sﬁe
 *
vc
,

425 
uöt8_t
 
c
, uöt8_à
©å
, uöt8_à
x
, uöt8_à
y
)

427 
rc
 = -1;

429 i‡(
vc
) {

430 
BUF_LOCK_CONF
;

431 
	`BUF_LOCK
(
vc
);

432 
rc
 = 
	`_vc_di•œy_ch¨_•ecific
(
vc
, 
c
, 
©å
, 
x
, 
y
);

433 
	`BUF_UNLOCK
(
vc
);

435  
rc
;

436 
	}
}

438 
	$nk_vc_di•œy_ch¨
(
uöt8_t
 
c
, uöt8_à
©å
, uöt8_à
x
, uöt8_à
y
)

440 
rc
=0;

441 
nk_vútuÆ_c⁄sﬁe
 *
vc
 = 
	`gë_cur_thªad
()->vc;

443 i‡(!
vc
) {

444 
vc
 = 
deÁu…_vc
;

446 i‡(
vc
) {

447 
BUF_LOCK_CONF
;

448 
	`BUF_LOCK
(
vc
);

449 
rc
 = 
	`_vc_di•œy_ch¨
(
c
,
©å
,
x
,
y
);

450 
	`BUF_UNLOCK
(
vc
);

453  
rc
;

454 
	}
}

457 
	$_vc_£ços
(
uöt8_t
 
x
, uöt8_à
y
)

459 
rc
=0;

460 
nk_vútuÆ_c⁄sﬁe
 *
vc
 = 
	`gë_cur_thªad
()->vc;

462 i‡(!
vc
) {

463 
vc
 = 
deÁu…_vc
;

465 i‡(
vc
) {

466 
vc
->
cur_x
 = 
x
;

467 
vc
->
cur_y
 = 
y
;

468 #ifde‡
NAUT_CONFIG_X86_64_HOST


469 i‡(
vc
==
cur_vc
) {

470 
	`vga_£t_curs‹
(
cur_vc
->
cur_x
, cur_vc->
cur_y
);

475 
	}
}

478 
	$nk_vc_£ços
(
uöt8_t
 
x
, uöt8_à
y
)

480 
rc
=0;

481 
nk_vútuÆ_c⁄sﬁe
 *
vc
 = 
	`gë_cur_thªad
()->vc;

483 i‡(!
vc
) {

484 
vc
 = 
deÁu…_vc
;

486 i‡(
vc
) {

487 
BUF_LOCK_CONF
;

488 
	`BUF_LOCK
(
vc
);

489 
rc
 = 
	`_vc_£ços
(
x
,
y
);

490 
	`BUF_UNLOCK
(
vc
)

493  
rc
;

494 
	}
}

496 
	$_vc_£ços_•ecific
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, 
uöt8_t
 
x
, uöt8_à
y
)

498 
rc
=0;

500 i‡(
vc
) {

501 
vc
->
cur_x
 = 
x
;

502 
vc
->
cur_y
 = 
y
;

503 #ifde‡
NAUT_CONFIG_X86_64_HOST


504 i‡(
vc
==
cur_vc
) {

505 
	`vga_£t_curs‹
(
cur_vc
->
cur_x
, cur_vc->
cur_y
);

510  
rc
;

511 
	}
}

514 
	$nk_vc_£ços_•ecific
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, 
uöt8_t
 
x
, uöt8_à
y
)

516 
rc
=0;

518 i‡(
vc
) {

519 
BUF_LOCK_CONF
;

520 
	`BUF_LOCK
(
vc
);

521 
rc
 = 
	`_vc_£ços_•ecific
(
vc
,
x
,
y
);

522 
	`BUF_UNLOCK
(
vc
);

525  
rc
;

526 
	}
}

530 
	$_vc_putch¨_•ecific
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, 
uöt8_t
 
c
)

532 i‡(!
vc
) {

535 i‡(
c
 == '\n') {

536 
vc
->
cur_x
 = 0;

537 #ifde‡
NAUT_CONFIG_XEON_PHI


538 i‡(
vc
==
cur_vc
) {

539 
	`phi_c⁄s_nŸify_löe_døw
(
vc
->
cur_y
);

542 
vc
->
cur_y
++;

543 i‡(
vc
->
cur_y
 =
VGA_HEIGHT
) {

544 
	`_vc_s¸ﬁlup_•ecific
(
vc
);

545 
vc
->
cur_y
--;

547 i‡(
vc
==
cur_vc
) {

548 #ifde‡
NAUT_CONFIG_X86_64_HOST


549 
	`vga_£t_curs‹
(
vc
->
cur_x
,vc->
cur_y
);

550 #ñi‡
NAUT_CONFIG_XEON_PHI


551 
	`phi_c⁄s_£t_curs‹
(
vc
->
cur_x
,vc->
cur_y
);

556 
	`_vc_di•œy_ch¨_•ecific
(
vc
, 
c
, vc->
cur_©å
, vc->
cur_x
, vc->
cur_y
);

557 
vc
->
cur_x
++;

558 i‡(
vc
->
cur_x
 =
VGA_WIDTH
) {

559 
vc
->
cur_x
 = 0;

560 #ifde‡
NAUT_CONFIG_XEON_PHI


561 i‡(
vc
==
cur_vc
) {

562 
	`phi_c⁄s_nŸify_löe_døw
(
vc
->
cur_y
);

565 
vc
->
cur_y
++;

566 i‡(
vc
->
cur_y
 =
VGA_HEIGHT
) {

567 
	`_vc_s¸ﬁlup_•ecific
(
vc
);

568 
vc
->
cur_y
--;

571 i‡(
vc
==
cur_vc
) {

572 #ifde‡
NAUT_CONFIG_X86_64_HOST


573 
	`vga_£t_curs‹
(
vc
->
cur_x
, vc->
cur_y
);

574 #ñi‡
NAUT_CONFIG_XEON_PHI


575 
	`phi_c⁄s_£t_curs‹
(
vc
->
cur_x
,vc->
cur_y
);

579 
	}
}

582 
	$_vc_putch¨
(
uöt8_t
 
c
)

584 
nk_vútuÆ_c⁄sﬁe
 *
vc
;

585 
nk_thªad
 *
t
 = 
	`gë_cur_thªad
();

587 i‡(!
t
 || !(
vc
 =Å->vc)) {

588 
vc
 = 
deÁu…_vc
;

591 i‡(!
vc
) {

594  
	`_vc_putch¨_•ecific
(
vc
,
c
);

596 
	}
}

598 
	$nk_vc_putch¨
(
uöt8_t
 
c
)

600 i‡(
	`nk_vc_is_a˘ive
()) {

601 
nk_vútuÆ_c⁄sﬁe
 *
vc
;

602 
nk_thªad
 *
t
 = 
	`gë_cur_thªad
();

604 i‡(!
t
 || !(
vc
 =Å->vc)) {

605 
vc
 = 
deÁu…_vc
;

607 i‡(
vc
) {

608 
BUF_LOCK_CONF
;

609 
	`BUF_LOCK
(
vc
);

610 
	`_vc_putch¨_•ecific
(
vc
,
c
);

611 
	`BUF_UNLOCK
(
vc
);

612 
	`ch¨dev_c⁄sﬁes_putch¨
(
vc
, 
c
);

615 #ifde‡
NAUT_CONFIG_X86_64_HOST


616 
	`vga_putch¨
(
c
);

618 #ifde‡
NAUT_CONFIG_HVM_HRT


619 
	`hπ_putch¨
(
c
);

621 #ifde‡
NAUT_CONFIG_XEON_PHI


622 
	`phi_c⁄s_putch¨
(
c
);

626 #ifde‡
NAUT_CONFIG_VIRTUAL_CONSOLE_SERIAL_MIRROR_ALL


627 
	`£rül_putch¨
(
c
);

630  
c
;

631 
	}
}

634 
	$_vc_¥öt_•ecific
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, *
s
)

636 i‡(!
vc
) {

639 *
s
) {

640 
	`_vc_putch¨_•ecific
(
vc
, *
s
);

641 
s
++;

644 
	}
}

647 
	$vc_¥öt_•ecific
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, *
s
)

649 i‡(!
vc
) {

652 
BUF_LOCK_CONF
;

653 
	`BUF_LOCK
(
vc
);

654 
	`_vc_¥öt_•ecific
(
vc
,
s
);

655 
	`BUF_UNLOCK
(
vc
);

656 
	`ch¨dev_c⁄sﬁes_¥öt
(
vc
,
s
);

657 #ifde‡
NAUT_CONFIG_VIRTUAL_CONSOLE_SERIAL_MIRROR_ALL


658 
	`£rül_wrôe
(
s
);

661 
	}
}

663 
	$nk_vc_¥öt
(*
s
)

665 i‡(
	`nk_vc_is_a˘ive
()) {

666 
nk_vútuÆ_c⁄sﬁe
 *
vc
;

667 
nk_thªad
 * 
t
 = 
	`gë_cur_thªad
();

669 i‡(!
t
 || !(
vc
 =Å->vc)) {

670 
vc
 = 
deÁu…_vc
;

672 i‡(
vc
) {

673 
BUF_LOCK_CONF
;

674 
	`BUF_LOCK
(
vc
);

675 
	`_vc_¥öt_•ecific
(
vc
,
s
);

676 
	`BUF_UNLOCK
(
vc
);

677 
	`ch¨dev_c⁄sﬁes_¥öt
(
vc
, 
s
);

680 #ifde‡
NAUT_CONFIG_X86_64_HOST


681 
	`vga_¥öt
(
s
);

683 #ifde‡
NAUT_CONFIG_HVM_HRT


684 
	`hπ_¥öt
(
s
);

686 #ifde‡
NAUT_CONFIG_XEON_PHI


687 
	`phi_c⁄s_¥öt
(
s
);

690 #ifde‡
NAUT_CONFIG_VIRTUAL_CONSOLE_SERIAL_MIRROR_ALL


691 
	`£rül_wrôe
(
s
);

696 
	}
}

698 
	$nk_vc_puts
(*
s
)

700 
	`nk_vc_¥öt
(
s
);

701 
	`nk_vc_putch¨
('\n');

703 
	}
}

705 
	#PRINT_MAX
 1024

	)

707 
	$nk_vc_¥ötf
(*
fmt
, ...)

709 
buf
[
PRINT_MAX
];

711 
va_li°
 
¨gs
;

712 
i
;

714 
	`va_°¨t
(
¨gs
, 
fmt
);

715 
i
=
	`v¢¥ötf
(
buf
,
PRINT_MAX
,
fmt
,
¨gs
);

716 
	`va_íd
(
¨gs
);

717 
	`nk_vc_¥öt
(
buf
);

718  
i
;

719 
	}
}

721 
	$nk_vc_¥ötf_•ecific
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, *
fmt
, ...)

723 
buf
[
PRINT_MAX
];

725 
va_li°
 
¨gs
;

726 
i
;

728 
	`va_°¨t
(
¨gs
, 
fmt
);

729 
i
=
	`v¢¥ötf
(
buf
,
PRINT_MAX
,
fmt
,
¨gs
);

730 
	`va_íd
(
¨gs
);

731 
	`vc_¥öt_•ecific
(
vc
, 
buf
);

732  
i
;

733 
	}
}

735 
	$nk_vc_log
(*
fmt
, ...)

737 
buf
[
PRINT_MAX
];

739 
va_li°
 
¨gs
;

740 
i
;

742 
	`va_°¨t
(
¨gs
, 
fmt
);

743 
i
=
	`v¢¥ötf
(
buf
,
PRINT_MAX
,
fmt
,
¨gs
);

744 
	`va_íd
(
¨gs
);

746 i‡(!
log_vc
) {

749 
BUF_LOCK_CONF
;

750 
	`BUF_LOCK
(
log_vc
);

751 
	`_vc_¥öt_•ecific
(
log_vc
, 
buf
);

752 
	`BUF_UNLOCK
(
log_vc
);

753 
	`ch¨dev_c⁄sﬁes_¥öt
(
log_vc
, 
buf
);

755 #ifde‡
NAUT_CONFIG_VIRTUAL_CONSOLE_SERIAL_MIRROR


756 
	`£rül_wrôe
(
buf
);

759  
i
;

760 
	}
}

762 
	$_vc_£èâr_•ecific
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, 
uöt8_t
 
©å
)

764 
vc
->
cur_©å
 = 
©å
;

766 
	}
}

769 
	$nk_vc_£èâr_•ecific
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, 
uöt8_t
 
©å
)

771 i‡(
vc
) {

772 
BUF_LOCK_CONF
;

773 
	`BUF_LOCK
(
vc
);

774 
	`_vc_£èâr_•ecific
(
vc
,
©å
);

775 
	`BUF_UNLOCK
(
vc
);

779 
	}
}

781 
	$nk_vc_£èâr
(
uöt8_t
 
©å
)

783 
nk_vútuÆ_c⁄sﬁe
 *
vc
;

784 
nk_thªad
 *
t
 = 
	`gë_cur_thªad
();

786 i‡(!
t
 || !(
vc
 =Å->vc)) {

787 
vc
 = 
deÁu…_vc
;

789 i‡(
vc
) {

790 
BUF_LOCK_CONF
;

791 
	`BUF_LOCK
(
vc
);

792 
	`_vc_£èâr_•ecific
(
vc
,
©å
);

793 
	`BUF_UNLOCK
(
vc
);

796 
	}
}

798 
	$_vc_˛ór_•ecific
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, 
uöt8_t
 
©å
)

800 
i
;

801 
uöt16_t
 
vÆ
 = 
	`vga_make_íåy
 (' ', 
©å
);

803 
vc
->
cur_©å
 = 
©å
;

804 
vc
->
fûl_©å
 = 
©å
;

806 
i
 = 0; i < 
VGA_HEIGHT
*
VGA_WIDTH
; i++) {

807 
vc
->
BUF
[
i
] = 
vÆ
;

810 i‡(
vc
==
cur_vc
) {

811 
	`c›y_vc_to_di•œy
(
vc
);

812 #ifde‡
NAUT_CONFIG_XEON_PHI


813 
	`phi_c⁄s_nŸify_ªdøw
();

817 
vc
->
cur_x
=0;

818 
vc
->
cur_y
=0;

820 
	}
}

823 
	$nk_vc_˛ór_•ecific
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, 
uöt8_t
 
©å
)

825 i‡(
vc
) {

826 
BUF_LOCK_CONF
;

827 
	`BUF_LOCK
(
vc
);

828 
	`_vc_˛ór_•ecific
(
vc
,
©å
);

829 
	`BUF_UNLOCK
(
vc
);

832 
	}
}

834 
	$nk_vc_˛ór
(
uöt8_t
 
©å
)

836 
BUF_LOCK_CONF
;

837 
nk_thªad
 *
t
 = 
	`gë_cur_thªad
();

838 
nk_vútuÆ_c⁄sﬁe
 *
vc
;

840 i‡(!
t
 || !(
vc
 =Å->vc)) {

841 
vc
 = 
deÁu…_vc
;

844 i‡(!
vc
) {

848 
	`BUF_LOCK
(
vc
);

849 
	`_vc_˛ór_•ecific
(
vc
,
©å
);

850 
	`BUF_UNLOCK
(
vc
);

852 
	}
}

857 
ölöe
 
	$√xt_ödex_⁄_queue
(
nk_vc_ty≥
 
ty≥
, 
ödex
)

859 i‡(
ty≥
 =
RAW
) {

860  (
ödex
 + 1Ë% 
Sˇncode_QUEUE_SIZE
;

861 } i‡(
ty≥
 =
COOKED
) {

862  (
ödex
 + 1Ë% 
Keycode_QUEUE_SIZE
;

864 
	`ERROR
("Using index onáÑaw, unqueued VC\n");

867 
	}
}

870 
ölöe
 
	$is_queue_em±y
(
nk_vútuÆ_c⁄sﬁe
 *
vc
)

872  
vc
->
hód
 =vc->
èû
;

873 
	}
}

876 
ölöe
 
	$is_queue_fuŒ
(
nk_vútuÆ_c⁄sﬁe
 *
vc
)

878  
	`√xt_ödex_⁄_queue
(
vc
->
ty≥
, vc->
èû
Ë=vc->
hód
;

879 
	}
}

882 
	$nk_íqueue_sˇncode
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, 
nk_sˇncode_t
 
sˇn
)

884 
QUEUE_LOCK_CONF
;

886 
	`QUEUE_LOCK
(
vc
);

888 if(
vc
->
ty≥
 !
RAW
 || 
	`is_queue_fuŒ
(vc)) {

889 
	`DEBUG
("C™nŸÉnqueuêsˇncodê0x%x (queuêi†%s)\n",
sˇn
, 
	`is_queue_fuŒ
(
vc
) ? "full" : "not full");

890 
	`QUEUE_UNLOCK
(
vc
);

893 
vc
->
keybﬂrd_queue
.
s_queue
[vc->
èû
] = 
sˇn
;

894 
vc
->
èû
 = 
	`√xt_ödex_⁄_queue
(vc->
ty≥
, vc->tail);

895 
	`QUEUE_UNLOCK
(
vc
);

896 
	`nk_thªad_queue_wake_Æl
(
vc
->
waôög_thªads
);

899 
	}
}

901 
	$nk_íqueue_keycode
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, 
nk_keycode_t
 
key
)

903 
QUEUE_LOCK_CONF
;

905 
	`QUEUE_LOCK
(
vc
);

907 if(
vc
->
ty≥
 !
COOKED
 || 
	`is_queue_fuŒ
(vc)) {

908 
	`DEBUG
("C™nŸÉnqueuêkeycodê0x%x (queuêi†%s)\n",
key
,
	`is_queue_fuŒ
(
vc
) ? "full" : "not full");

909 
	`QUEUE_UNLOCK
(
vc
);

912 
vc
->
keybﬂrd_queue
.
k_queue
[vc->
èû
] = 
key
;

913 
vc
->
èû
 = 
	`√xt_ödex_⁄_queue
(vc->
ty≥
, vc->tail);

914 
	`QUEUE_UNLOCK
(
vc
);

915 
	`nk_thªad_queue_wake_Æl
(
vc
->
waôög_thªads
);

918 
	}
}

920 
nk_sˇncode_t
 
	$nk_dequeue_sˇncode
(
nk_vútuÆ_c⁄sﬁe
 *
vc
)

922 
QUEUE_LOCK_CONF
;

924 
	`QUEUE_LOCK
(
vc
);

926 if(
vc
->
ty≥
 !
RAW
 || 
	`is_queue_em±y
(vc)) {

927 
	`DEBUG
("C™nŸ dequeuêsˇncodê(queuêi†%s)\n",
	`is_queue_em±y
(
vc
) ? "empty" : "notÉmpty");

928 
	`QUEUE_UNLOCK
(
vc
);

929  
NO_SCANCODE
;

931 
nk_sˇncode_t
 
ªsu…
;

932 
ªsu…
 = 
vc
->
keybﬂrd_queue
.
s_queue
[vc->
hód
];

933 
vc
->
hód
 = 
	`√xt_ödex_⁄_queue
(vc->
ty≥
, vc->head);

934 
	`QUEUE_UNLOCK
(
vc
);

935  
ªsu…
;

937 
	}
}

939 
nk_keycode_t
 
	$nk_dequeue_keycode
(
nk_vútuÆ_c⁄sﬁe
 *
vc
)

941 
QUEUE_LOCK_CONF
;

943 
	`QUEUE_LOCK
(
vc
);

945 i‡(
vc
->
ty≥
 !
COOKED
 || 
	`is_queue_em±y
(vc)) {

946 
	`DEBUG
("C™nŸ dequeuêkeycodê(queuêi†%s)\n",
	`is_queue_em±y
(
vc
) ? "empty" : "notÉmpty");

947 
	`QUEUE_UNLOCK
(
vc
);

948  
NO_KEY
;

950 
nk_keycode_t
 
ªsu…
;

951 
ªsu…
 = 
vc
->
keybﬂrd_queue
.
k_queue
[vc->
hód
];

952 
vc
->
hód
 = 
	`√xt_ödex_⁄_queue
(vc->
ty≥
, vc->head);

953 
	`QUEUE_UNLOCK
(
vc
);

954  
ªsu…
;

956 
	}
}

958 
	$check
(*
°©e
)

960 
nk_vútuÆ_c⁄sﬁe
 *
vc
 = (nk_vútuÆ_c⁄sﬁê*Ë
°©e
;

965  !
	`is_queue_em±y
(
vc
);

966 
	}
}

968 
	$nk_vc_waô
()

970 
nk_vútuÆ_c⁄sﬁe
 *
vc
 = 
	`gë_cur_thªad
()->vc;

972 i‡(!
vc
) {

973 
vc
 = 
deÁu…_vc
;

976 
	`nk_thªad_queue_¶ìp_exãnded
(
vc
->
waôög_thªads
, 
check
, vc);

977 
	}
}

980 
nk_keycode_t
 
	$nk_vc_gë_keycode
(
waô
)

982 
nk_vútuÆ_c⁄sﬁe
 *
vc
 = 
	`gë_cur_thªad
()->vc;

984 i‡(!
vc
) {

985 
vc
 = 
deÁu…_vc
;

988 i‡(
vc
->
ty≥
 !
COOKED
) {

989 
	`ERROR
("IncorrectÅype of VC for get_keycode\n");

990  
NO_KEY
;

994 
nk_keycode_t
 
k
 = 
	`nk_dequeue_keycode
(
vc
);

995 i‡(
k
!=
NO_KEY
) {

996 
	`DEBUG
("Rëu∫ög keycodê0x%x\n",
k
);

997  
k
;

999 i‡(
waô
) {

1000 
	`nk_vc_waô
();

1002  
NO_KEY
;

1005 
	}
}

1007 
	$nk_vc_gëch¨_exãnded
(
waô
)

1009 
nk_keycode_t
 
key
;

1012 
key
 = 
	`nk_vc_gë_keycode
(
waô
);

1014 
key
) {

1015 
KEY_UNKNOWN
:

1016 
KEY_LCTRL
:

1017 
KEY_RCTRL
:

1018 
KEY_LSHIFT
:

1019 
KEY_RSHIFT
:

1020 
KEY_PRINTSCRN
:

1021 
KEY_LALT
:

1022 
KEY_RALT
:

1023 
KEY_CAPSLOCK
:

1024 
KEY_F1
:

1025 
KEY_F2
:

1026 
KEY_F3
:

1027 
KEY_F4
:

1028 
KEY_F5
:

1029 
KEY_F6
:

1030 
KEY_F7
:

1031 
KEY_F8
:

1032 
KEY_F9
:

1033 
KEY_F10
:

1034 
KEY_F11
:

1035 
KEY_F12
:

1036 
KEY_NUMLOCK
:

1037 
KEY_SCRLOCK
:

1038 
KEY_KPHOME
:

1039 
KEY_KPUP
:

1040 
KEY_KPMINUS
:

1041 
KEY_KPLEFT
:

1042 
KEY_KPCENTER
:

1043 
KEY_KPRIGHT
:

1044 
KEY_KPPLUS
:

1045 
KEY_KPEND
:

1046 
KEY_KPDOWN
:

1047 
KEY_KPPGDN
:

1048 
KEY_KPINSERT
:

1049 
KEY_KPDEL
:

1050 
KEY_SYSREQ
:

1051 
	`DEBUG
("Ign‹ög s≥cü»key 0x%x\n",
key
);

1055 
c
 = 
key
&0xff;

1056 i‡(
c
=='\r') {

1057 
c
='\n';

1059 
	`DEBUG
("Reguœ∏key 0x%x ('%c')\n", 
c
, c);

1060  
c
;

1064 
	}
}

1066 
	$nk_vc_gëch¨
()

1068  
	`nk_vc_gëch¨_exãnded
(1);

1069 
	}
}

1071 
	$nk_vc_gës
(*
buf
, 
n
, 
di•œy
)

1073 
i
;

1074 
c
;

1075 
i
=0;i<(
n
-1);i++) {

1076 
buf
[
i
] = 
	`nk_vc_gëch¨
();

1077 i‡(
di•œy
) {

1078 
	`nk_vc_putch¨
(
buf
[
i
]);

1080 i‡(
buf
[
i
] == '\n') {

1081 
buf
[
i
] = 0;

1082  
i
;

1085 
buf
[
n
-1]=0;

1086  
n
-1;

1087 
	}
}

1089 
nk_sˇncode_t
 
	$nk_vc_gë_sˇncode
(
waô
)

1091 
nk_vútuÆ_c⁄sﬁe
 *
vc
 = 
	`gë_cur_thªad
()->vc;

1093 i‡(!
vc
) {

1094 
vc
 = 
deÁu…_vc
;

1097 i‡(
vc
->
ty≥
 !
RAW
) {

1098 
	`ERROR
("IncorrectÅype of VC for get_scancode\n");

1099  
NO_SCANCODE
;

1103 
nk_sˇncode_t
 
s
 = 
	`nk_dequeue_sˇncode
(
vc
);

1104 i‡(
s
!=
NO_SCANCODE
) {

1105  
s
;

1107 i‡(
waô
) {

1108 
	`nk_vc_waô
();

1110  
NO_SCANCODE
;

1113 
	}
}

1115 
	$íqueue_sˇncode_as_keycode
(
nk_vútuÆ_c⁄sﬁe
 *
cur_vc
, 
uöt8_t
 
sˇn
)

1117 
nk_keycode_t
 
key
 = 
	`kbd_å™¶©e
(
sˇn
);

1118 if(
key
 !
NO_KEY
) {

1119 
	`nk_íqueue_keycode
(
cur_vc
, 
key
);

1122 
	}
}

1124 
	$nk_vc_h™dÀ_keybﬂrd
(
nk_sˇncode_t
 
sˇn
)

1126 i‡(!
up
) {

1129 
	`DEBUG
("I≈ut: %x\n",
sˇn
);

1130 
cur_vc
->
ty≥
) {

1131 
RAW_NOQUEUE
:

1132 
	`DEBUG
("DñivîögÉvíàtÿc⁄sﬁê%†vü cÆlback\n",
cur_vc
->
«me
);

1133 
cur_vc
->
	`øw_noqueue_ˇŒback
(
sˇn
, cur_vc->
øw_noqueue_ˇŒback_¥iv
);

1136 
RAW
:

1137  
	`nk_íqueue_sˇncode
(
cur_vc
, 
sˇn
);

1139 
COOKED
:

1140  
	`íqueue_sˇncode_as_keycode
(
cur_vc
, 
sˇn
);

1143 
	`ERROR
("v¯%†d€†nŸ havê®vÆidÅy≥\n",
cur_vc
->
«me
);

1147 
	}
}

1149 
	$nk_vc_h™dÀ_mou£
(
nk_mou£_evít_t
 *
m
)

1151 i‡(!
up
) {

1155 
	`DEBUG
("Discarding mouseÉvent\n");

1156 
	`DEBUG
("Mouse Packet: buttons: %s %s %s\n",

1157 
m
->
À·
 ? "down" : "up",

1158 
m
->
middÀ
 ? "down" : "up",

1159 
m
->
right
 ? "down" : "up");

1160 
	`DEBUG
("Mou£ Packë: dx: %d dy: %dÑes: %u\n", 
m
->
dx
, m->
dy
, m->
ªs
 );

1162 
	}
}

1164 
	gvc_li°_öôed
=0;

1166 
	$li°
(*
ö
, **
out
)

1168 
li°_hód
 *
cur
;

1169 
i
;

1172 i‡(!
li°_vc
) {

1173 
	`ERROR
("No virtual console forÜist..\n");

1177 i‡(
	`nk_thªad_«me
(
	`gë_cur_thªad
(),"vc-list")) {

1178 
	`ERROR_PRINT
("CannotÇame vc-list'sÅhread\n");

1182 i‡(
	`nk_böd_vc
(
	`gë_cur_thªad
(), 
li°_vc
)) {

1183 
	`ERROR
("Cannot bind virtual console forÜist\n");

1188 
	`__sync_„tch_™d_add
(&
vc_li°_öôed
,1);

1191 
	`nk_vc_˛ór
(0xf9);

1193 
	`nk_vc_¥öt
("List of VCs (spaceÅoÑegenerate)\n\n");

1195 
i
=0;

1196 
	`li°_f‹_óch
(
cur
,&
vc_li°
) {

1197 
	`nk_vc_¥ötf
("%¯: %s\n", 'a'+
i
, 
	`li°_íåy
(
cur
,
nk_vútuÆ_c⁄sﬁe
, 
vc_node
)->
«me
);

1198 
i
++;

1201 
c
 = 
	`nk_vc_gëch¨
(1);

1203 
i
=0;

1204 
	`li°_f‹_óch
(
cur
,&
vc_li°
) {

1205 i‡(
c
 =(
i
+'a')) {

1206 
	`nk_swôch_to_vc
(
	`li°_íåy
(
cur
,
nk_vútuÆ_c⁄sﬁe
, 
vc_node
));

1209 
i
++;

1212 
	}
}

1215 
	$nk_swôch_to_vc_li°
()

1217  
	`nk_swôch_to_vc
(
li°_vc
);

1218 
	}
}

1220 
	$°¨t_li°
()

1223 i‡(
	`nk_thªad_°¨t
(
li°
, 0, 0, 1, 
PAGE_SIZE_4KB
, &
li°_tid
, 0)) {

1224 
	`ERROR
("FailedÅoÜaunch VCÜist\n");

1228 !
	`__sync_„tch_™d_add
(&
vc_li°_öôed
,0)) {

1230 
	`nk_yõld
();

1233 
	`INFO
("ListÜaunched\n");

1236 
	}
}

1240 
	$_ch¨dev_c⁄sﬁes_¥öt
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, *
d©a
, 
uöt64_t
 
Àn
)

1242 
li°_hód
 *
cur
;

1244 
STATE_LOCK_CONF
;

1246 
	`STATE_LOCK
();

1248 
	`li°_f‹_óch
(
cur
,&
ch¨dev_c⁄sﬁe_li°
) {

1249 
ch¨dev_c⁄sﬁe
 *
c
 = 
	`li°_íåy
(
cur
,ch¨dev_c⁄sﬁe, 
ch¨dev_node
);

1250 i‡(
c
->
cur_vc
 =
vc
) {

1251 
uöt64_t
 
i
;

1253 
i
=0;i<
Àn
;i++) {

1254 i‡(
d©a
[
i
]=='\n') {

1255 
	`nk_ch¨_dev_wrôe
(
c
->
dev
,1,"\r",
NK_DEV_REQ_BLOCKING
);

1257 
	`nk_ch¨_dev_wrôe
(
c
->
dev
,1,&
d©a
[
i
],
NK_DEV_REQ_BLOCKING
);

1262 
	`STATE_UNLOCK
();

1263 
	}
}

1265 
	$ch¨dev_c⁄sﬁes_¥öt
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, *
d©a
)

1267 
	`_ch¨dev_c⁄sﬁes_¥öt
(
vc
,
d©a
,
	`°æí
(data));

1268 
	}
}

1270 
	$ch¨dev_c⁄sﬁes_putch¨
(
nk_vútuÆ_c⁄sﬁe
 *
vc
, 
d©a
)

1272 
	`_ch¨dev_c⁄sﬁes_¥öt
(
vc
,&
d©a
,1);

1273 
	}
}

1275 
	$ch¨dev_c⁄sﬁe_h™dÀ_öput
(
ch¨dev_c⁄sﬁe
 *
c
, 
uöt8_t
 
d©a
)

1277 i‡(
c
->
cur_vc
->
ty≥
 =
COOKED
) {

1278  
	`nk_íqueue_keycode
(
c
->
cur_vc
,
d©a
);

1283 
	}
}

1291 
	$ch¨dev_c⁄sﬁe
(*
ö
, **
out
)

1293 
uöt8_t
 
d©a
[3];

1294 
my«me
[80];

1295 
uöt8_t
 
cur
=0;

1298 
ch¨dev_c⁄sﬁe
 *
c
 = (ch¨dev_c⁄sﬁê*)
ö
;

1300 
c
->
dev
 = 
	`nk_ch¨_dev_föd
(c->
«me
);

1302 i‡(!
c
->
dev
) {

1303 
	`ERROR
("U«bÀÅÿ›í ch¨ devi˚ %†-Çÿch¨dev c⁄sﬁê°¨ãd\n",
c
->
«me
);

1307 
	`°r˝y
(
my«me
,
c
->
«me
);

1308 
	`°rˇt
(
my«me
,"-console");

1310 i‡(
	`nk_thªad_«me
(
	`gë_cur_thªad
(),
my«me
)) {

1311 
	`ERROR_PRINT
("CannotÇame chardev console'sÅhread\n");

1316 
	`__sync_„tch_™d_add
(&
c
->
öôed
,1);

1319 
buf
[80];

1321 
	`¢¥ötf
(
buf
,80,"\r\n*** C⁄sﬁê%†//Öªv=``1Çext=``2Üi°=``3 ***\r\n",
my«me
);

1323 
	`nk_ch¨_dev_wrôe
(
c
->
dev
,
	`°æí
(
buf
),buf,
NK_DEV_REQ_BLOCKING
);

1325 
	`¢¥ötf
(
buf
,80,"\r\n*** %†***\r\n",
c
->
cur_vc
->
«me
);

1326 
	`nk_ch¨_dev_wrôe
(
c
->
dev
,
	`°æí
(
buf
),buf,
NK_DEV_REQ_BLOCKING
);

1329 
cur
 = 0;

1331 i‡(
	`nk_ch¨_dev_ªad
(
c
->
dev
,1,&
d©a
[
cur
],
NK_DEV_REQ_BLOCKING
)!=1) {

1332 
	`ERROR
("FAILED TO READ CHARDEV %s\n",
c
->
«me
);

1336 i‡(
cur
==0) {

1337 i‡(
d©a
[
cur
]!='`') {

1338 
	`ch¨dev_c⁄sﬁe_h™dÀ_öput
(
c
,
d©a
[0]);

1340 
cur
++;

1345 i‡(
cur
==1) {

1346 i‡(
d©a
[
cur
]!='`') {

1347 
	`ch¨dev_c⁄sﬁe_h™dÀ_öput
(
c
,
d©a
[0]);

1348 
	`ch¨dev_c⁄sﬁe_h™dÀ_öput
(
c
,
d©a
[1]);

1349 
cur
=0;

1351 
cur
++;

1356 i‡(
cur
==2) {

1357 
li°_hód
 *
cur_node
 = &
c
->
cur_vc
->
vc_node
;

1358 
li°_hód
 *
√xt_node
 = &
c
->
cur_vc
->
vc_node
;

1359 
do_d©a
=0;

1362 
d©a
[
cur
]) {

1364 i‡(
cur_node
->
¥ev
 !&
vc_li°
) {

1365 
√xt_node
 = 
cur_node
->
¥ev
;

1369 i‡(
cur_node
->
√xt
 !&
vc_li°
) {

1370 
√xt_node
 = 
cur_node
->
√xt
;

1375 
li°_hód
 *
cur
;

1376 
i
;

1377 
which
;

1378 
	`°r˝y
(
buf
,"\r\nList of VCs \r\n\r\n");

1379 
	`nk_ch¨_dev_wrôe
(
c
->
dev
,
	`°æí
(
buf
),buf,
NK_DEV_REQ_BLOCKING
);

1380 
i
=0;

1381 
	`li°_f‹_óch
(
cur
,&
vc_li°
) {

1382 
	`¢¥ötf
(
buf
,80,"%¯: %s\r\n", 'a'+
i
, 
	`li°_íåy
(
cur
,
nk_vútuÆ_c⁄sﬁe
, 
vc_node
)->
«me
);

1383 
	`nk_ch¨_dev_wrôe
(
c
->
dev
,
	`°æí
(
buf
),buf,
NK_DEV_REQ_BLOCKING
);

1384 
i
++;

1387 i‡(
	`nk_ch¨_dev_ªad
(
c
->
dev
,1,&
which
,
NK_DEV_REQ_BLOCKING
)!=1) {

1388 
	`nk_ch¨_dev_wrôe
(
c
->
dev
,7,"\r\nERROR\n\n",
NK_DEV_REQ_BLOCKING
);

1389 
√xt_node
 = 
cur_node
;

1392 
i
=0;

1393 
	`li°_f‹_óch
(
cur
,&
vc_li°
) {

1394 i‡(
which
 =(
i
+'a')) {

1395 
√xt_node
 = 
cur
;

1398 
i
++;

1403 
do_d©a
 = 1;

1404 
√xt_node
 = 
cur_node
;

1407 
c
->
cur_vc
 = 
	`c⁄èöî_of
(
√xt_node
, 
nk_vútuÆ_c⁄sﬁe
, 
vc_node
);

1409 i‡(
do_d©a
) {

1410 
	`ch¨dev_c⁄sﬁe_h™dÀ_öput
(
c
,
d©a
[0]);

1411 
	`ch¨dev_c⁄sﬁe_h™dÀ_öput
(
c
,
d©a
[1]);

1412 
	`ch¨dev_c⁄sﬁe_h™dÀ_öput
(
c
,
d©a
[2]);

1414 
buf
[80];

1416 
	`¢¥ötf
(
buf
,80,"\r\n*** %†***\r\n",
c
->
cur_vc
->
«me
);

1418 
	`nk_ch¨_dev_wrôe
(
c
->
dev
,
	`°æí
(
buf
),buf,
NK_DEV_REQ_BLOCKING
);

1421 
cur
 = 0;

1426 
	}
}

1431 
	$nk_vc_°¨t_ch¨dev_c⁄sﬁe
(*
ch¨dev
)

1433 
ch¨dev_c⁄sﬁe
 *
c
 = 
	`mÆloc
((*c));

1435 i‡(!
c
) {

1436 
	`ERROR
("C™nŸáŒoˇã ch¨dev c⁄sﬁêf‹ %s\n",
ch¨dev
);

1440 
	`mem£t
(
c
,0,(*c));

1441 
	`°∫˝y
(
c
->
«me
,
ch¨dev
,
DEV_NAME_LEN
);

1442 
c
->
«me
[
DEV_NAME_LEN
-1] = 0;

1443 
c
->
cur_vc
 = 
deÁu…_vc
;

1446 
	`__sync_„tch_™d_™d
(&
c
->
öôed
,0);

1448 i‡(
	`nk_thªad_°¨t
(
ch¨dev_c⁄sﬁe
, 
c
, 0, 1, 
PAGE_SIZE_4KB
, &c->
tid
, 0)) {

1449 
	`ERROR
("FaûedÅÿœunch ch¨dev c⁄sﬁêh™dÀ∏f‹ %s\n",
c
->
«me
);

1450 
	`‰ì
(
c
);

1454 !
	`__sync_„tch_™d_add
(&
c
->
öôed
,0)) {

1455 
	`nk_yõld
();

1459 
STATE_LOCK_CONF
;

1461 
	`STATE_LOCK
();

1462 
	`li°_add_èû
(&
c
->
ch¨dev_node
, &
ch¨dev_c⁄sﬁe_li°
);

1463 
	`STATE_UNLOCK
();

1465 
	`INFO
("ch¨dev c⁄sﬁê%†œunched\n",
c
->
«me
);

1468 
	}
}

1471 
	$nk_vc_öô
()

1473 
	`INFO
("init\n");

1474 
	`•ölock_öô
(&
°©e_lock
);

1475 
	`INIT_LIST_HEAD
(&
vc_li°
);

1476 
	`INIT_LIST_HEAD
(&
ch¨dev_c⁄sﬁe_li°
);

1478 
deÁu…_vc
 = 
	`nk_¸óã_vc
("deÁu…", 
COOKED
, 0x0f, 0, 0);

1479 if(!
deÁu…_vc
) {

1480 
	`ERROR
("Cannot create default console...\n");

1484 
log_vc
 = 
	`nk_¸óã_vc
("sy°em-log", 
COOKED
, 0x0a, 0, 0);

1485 if(!
log_vc
) {

1486 
	`ERROR
("Cannot createÜog console...\n");

1491 
li°_vc
 = 
	`nk_¸óã_vc
("vc-li°", 
COOKED
, 0xf9, 0, 0);

1492 if(!
li°_vc
) {

1493 
	`ERROR
("Cannot create vcÜist console...\n");

1497 i‡(
	`°¨t_li°
()) {

1498 
	`ERROR
("Cannot create vcÜistÅhread\n");

1502 
cur_vc
 = 
deÁu…_vc
;

1503 
	`c›y_di•œy_to_vc
(
cur_vc
);

1505 #ifde‡
NAUT_CONFIG_X86_64_HOST


1506 
	`vga_gë_curs‹
(&(
cur_vc
->
cur_x
),&(cur_vc->
cur_y
));

1507 
	`vga_öô_s¸ìn
();

1508 
	`vga_£t_curs‹
(
cur_vc
->
cur_x
,cur_vc->
cur_y
);

1509 #ñi‡
NAUT_CONFIG_XEON_PHI


1510 
	`phi_c⁄s_gë_curs‹
(&(
cur_vc
->
cur_x
), &(cur_vc->
cur_y
));

1511 
	`phi_c⁄s_˛ór_s¸ìn
();

1512 
	`phi_c⁄s_£t_curs‹
(
cur_vc
->
cur_x
, cur_vc->
cur_y
);

1515 
up
=1;

1518 
	}
}

1521 
	$nk_vc_deöô
()

1523 
li°_hód
 *
cur
;

1525 
	`nk_thªad_de°roy
(
li°_tid
);

1528 
cur_vc
 = 0;

1530 
	`li°_f‹_óch
(
cur
,&
vc_li°
) {

1531 i‡(
	`nk_de°roy_vc
(
	`li°_íåy
(
cur
,
nk_vútuÆ_c⁄sﬁe
, 
vc_node
))) {

1532 
	`ERROR
("FailedÅo destroyáll VCs\n");

1540 
	}
}

	@vmm.c

24 
	~<«utûus/«utûus.h
>

25 
	~<«utûus/vmm.h
>

26 
	~"∑œcios.h
"

28 
	gv3_vm_öfo
;

30 
v3_vm_öfo
 * 
v3_¸óã_vm
(* 
cfg
, * 
¥iv_d©a
, * 
«me
, 
˝u_mask
);

31 
v3_°¨t_vm
(
v3_vm_öfo
 * 
vm
, 
˝u_mask
);

32 
v3_°›_vm
(
v3_vm_öfo
 * 
vm
);

33 
v3_∑u£_vm
(
v3_vm_öfo
 * 
vm
);

34 
v3_c⁄töue_vm
(
v3_vm_öfo
 * 
vm
);

35 
v3_ª£t_vm
(
v3_vm_öfo
 *
vm
);

36 íum {
	mV3_VM_RESET_ALL
,
	mV3_VM_RESET_HRT
,
	mV3_VM_RESET_ROS
,
	mV3_VM_RESET_CORE_RANGE
} 
	tv3_vm_ª£t_ty≥
;

37 
v3_ª£t_vm_exãnded
(
v3_vm_öfo
 *
vm
, 
v3_vm_ª£t_ty≥
 
t
, *
d©a
);

39 
v3_ßve_vm
(
v3_vm_öfo
 * 
vm
, * 
°‹e
, * 
uæ
, 
›ts
);

40 
v3_lﬂd_vm
(
v3_vm_öfo
 * 
vm
, * 
°‹e
, * 
uæ
, 
›ts
);

42 
v3_£nd_vm
(
v3_vm_öfo
 * 
vm
, * 
°‹e
, * 
uæ
, 
›ts
);

43 
v3_ª˚ive_vm
(
v3_vm_öfo
 * 
vm
, * 
°‹e
, * 
uæ
, 
›ts
);

45 
v3_move_vm_c‹e
(
v3_vm_öfo
 * 
vm
, 
vc‹e_id
, 
èrgë_˝u
);

46 
v3_move_vm_mem
(
v3_vm_öfo
 * 
vm
, *
g∑
, 
èrgë_˝u
);

48 
v3_‰ì_vm
(
v3_vm_öfo
 * 
vm
);

50 
v3_gë_°©e_sizes_vm
(
v3_vm_öfo
 *
vm
,

51 *
num_vc‹es
,

52 *
num_ªgi⁄s
);

54 
	gv3_vm_ba£_°©e
;

55 
	gv3_vm_c‹e_°©e
;

56 
	gv3_vm_mem_°©e
;

58 
v3_gë_°©e_vm
(
v3_vm_öfo
 *
vm
,

59 
v3_vm_ba£_°©e
 *
ba£
,

60 
v3_vm_c‹e_°©e
 *
c‹e
,

61 
v3_vm_mem_°©e
 *
mem
);

64 *
	$nk_vmm_°¨t_vm
(*
«me
, *
image
, 
˝u_mask
)

66 
v3_vm_öfo
 *
vm
;

68 
	`∑œcios_öf‹m_√w_vm_¥e
(
«me
);

70 
	`INFO_PRINT
("Sèπög \"%s\" VMáà%p\n",
image
);

71 
vm
 = 
	`v3_¸óã_vm
(
image
, 0, 
«me
, 
˝u_mask
);

73 i‡(
vm
) {

74 
	`∑œcios_öf‹m_√w_vm_po°
(
«me
,
vm
);

75 i‡(
	`v3_°¨t_vm
(
vm
, 
˝u_mask
)) {

76 
	`ERROR_PRINT
("ÁûedÅÿ°¨àVM \"%s\"\n",
«me
);

78 
	`INFO_PRINT
("suc˚ssfuŒy sèπed VM \"%s\"\n",
«me
);

81 
	`ERROR_PRINT
("ÁûedÅÿ¸óã VM \"%s\"\n",
«me
);

84  
vm
;

85 
	}
}

88 
	$nk_vmm_°›_vm
(*
vm
)

90  
	`v3_°›_vm
((
v3_vm_öfo
*)
vm
);

91 
	}
}

93 
	$nk_vmm_‰ì_vm
(*
vm
)

95  
	`v3_‰ì_vm
((
v3_vm_öfo
*)
vm
);

96 
	}
}

98 
	$nk_vmm_∑u£_vm
(*
vm
)

100  
	`v3_∑u£_vm
((
v3_vm_öfo
*)
vm
);

101 
	}
}

103 
	$nk_vmm_c⁄töue_vm
(*
vm
)

105  
	`v3_c⁄töue_vm
((
v3_vm_öfo
*)
vm
);

106 
	}
}

108 
	$nk_vmm_ª£t_vm
(*
vm
)

110  
	`v3_ª£t_vm
((
v3_vm_öfo
*)
vm
);

111 
	}
}

113 
	$nk_vmm_move_vm_c‹e
(*
vm
, 
vc‹e
, 
pc‹e
)

115  
	`v3_move_vm_c‹e
((
v3_vm_öfo
*)
vm
,
vc‹e
,
pc‹e
);

116 
	}
}

118 
	$nk_vmm_move_vm_mem
(*
vm
, *
g∑
, 
pc‹e
)

120  
	`v3_move_vm_mem
((
v3_vm_öfo
*)
vm
,
g∑
,
pc‹e
);

121 
	}
}

124 
	$nk_vmm_öô
()

126 
	`INFO_PRINT
("VMM init\n");

128  
	`∑œcios_vmm_öô
("none");

129 
	}
}

131 
	$nk_vmm_deöô
()

133 
	`INFO_PRINT
("VMM deinit\n");

135  
	`∑œcios_vmm_exô
();

136 
	}
}

	@
1
.
1
/usr/include
48
419
acpi.c
backtrace.c
barrier.c
blkdev.c
chardev.c
condvar.c
cpu.c
cpuid.c
dev.c
doprnt.c
fmtout.c
fprintk.c
fpu.c
fs.c
hashtable.c
idle.c
idt.c
instrument.c
irq.c
isocore.c
libccompat.c
loader.c
mb_utils.c
msr.c
naut_string.c
nemo.c
netdev.c
numa.c
paging.c
pmc.c
printk.c
queue.c
random.c
rbtree.c
realmode.c
rwlock.c
scheduler.c
setjmp.c
sfi.c
shell.c
smp.c
spinlock.c
testfs.c
thread.c
ticketlock.c
timer.c
vc.c
vmm.c
