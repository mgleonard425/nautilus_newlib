From b7e3bec9af6f853eab93c42ef29f110f4383d23a Mon Sep 17 00:00:00 2001
From: Peter Dinda <pdinda@northwestern.edu>
Date: Thu, 13 Jul 2017 16:13:19 -0500
Subject: [PATCH 04/10] Deeper integration of optional garbage collection, plus
 enhancements to BDWGC port

- Garbage collection now available shortly after kmem initialization
- Multicore
- Malloc/free are now wrappers, allowing for global inclusion of garbage collection
- Improved handling of nautilus thread stacks and tls
- Global garbage collection and test function available from shell
- Failover from BDWGC allocation to core kmem allocation if BDWGC allocation fails
- Support for forcing buddy-style alignments for BDWGC allocations

WARNING: Garbage collection adn BDWGC integration in Nautilus are highly
experimental features.   If you don't know if you need them, you do not.
---
 Kconfig                                 |  12 +++
 include/gc/bdwgc/bdwgc.h                |   3 +
 include/nautilus/mm.h                   |  22 +++++-
 src/gc/bdwgc/bdwgc.c                    |  18 ++++-
 src/gc/bdwgc/include/bdwgc_internal.h   |  11 ++-
 src/gc/bdwgc/include/private/gcconfig.h |   2 +-
 src/gc/bdwgc/malloc.c                   |   2 +
 src/gc/bdwgc/mallocx.c                  |  17 ++++-
 src/gc/bdwgc/naut_stop_world.c          |  36 +++++----
 src/gc/bdwgc/naut_threads.c             |   6 +-
 src/gc/bdwgc/os_dep.c                   |   4 +-
 src/gc/bdwgc/tests/test.c               |  19 ++++-
 src/gc/bdwgc/thread_local_alloc.c       |  17 +++--
 src/nautilus/mm/kmem.c                  |   6 +-
 src/nautilus/shell.c                    | 129 ++++++++++++++++++++++----------
 15 files changed, 222 insertions(+), 82 deletions(-)

diff --git a/Kconfig b/Kconfig
index cb15a7a..5dbb121 100644
--- a/Kconfig
+++ b/Kconfig
@@ -414,6 +414,9 @@ menu "Garbage Collection Options"
       If enabled, a conservative garbage collector is
       used to garbage collect the kernel/HRT.  mallocs() pass to the
       GC, frees() are ignored, and mallocs can trigger global GC
+      WARNING: Garbage collection in Nautilus is a highly experimental feature.   If you
+      don't know if you need this, you do not.
+
 
    choice 
     prompt "Select Garbage Collector"
@@ -426,9 +429,18 @@ menu "Garbage Collection Options"
       depends on GARBAGE_COLLECTION
       help
         If enabled, the BDWGC garbage colector is used.
+        WARNING: BDWGC integration in Nautilus is a highly experimental feature.   If you
+        don't know if you need this, you do not.
 
    endchoice
  
+   config ALIGN_BDWGC
+       bool "Force allocations in the BDWGC garbage collector to be aligned to their own size"
+       default n
+       depends on ENABLE_BDWGC
+       help
+         If enabled, BDWGC allocations will be aligned to their own size, as in the buddy system allocator
+
    config DEBUG_BDWGC
        bool "Debug the BDWGC garbage collector"
        default n
diff --git a/include/gc/bdwgc/bdwgc.h b/include/gc/bdwgc/bdwgc.h
index 0568cea..ed424da 100644
--- a/include/gc/bdwgc/bdwgc.h
+++ b/include/gc/bdwgc/bdwgc.h
@@ -30,6 +30,9 @@
 int  nk_gc_bdwgc_init();
 void nk_gc_bdwgc_deinit();
 
+// force a GC -r returns 0 if successful
+int  nk_gc_bdwgc_collect();
+
 void *nk_gc_bdwgc_thread_state_init(struct nk_thread *thread);
 void  nk_gc_bdwgc_thread_state_deinit(struct nk_thread *thread);
 
diff --git a/include/nautilus/mm.h b/include/nautilus/mm.h
index d6780bc..e98a0e4 100644
--- a/include/nautilus/mm.h
+++ b/include/nautilus/mm.h
@@ -86,11 +86,29 @@ struct mem_region;
 struct mem_region * kmem_get_base_zone(void);
 struct mem_region * kmem_get_region_by_addr(ulong_t addr);
 void kmem_add_memory(struct mem_region * mem, ulong_t base_addr, size_t size);
-void * malloc(size_t size);
-void free(void * addr);
+
+// These functions operate the core memory allocator directly
+// You want to use the malloc()/free() wrappers defined below 
+// unless you know  what you are doing
+void * kmem_malloc(size_t size);
+void   kmem_free(void * addr);
 
 int  kmem_sanity_check();
 
+#ifdef NAUT_CONFIG_ENABLE_BDWGC
+void * GC_memalign(size_t, size_t);
+void * GC_malloc(size_t);
+#ifdef NAUT_CONFIG_ALIGN_BDWGC
+#define malloc(s) ({ size_t __a = 1ULL<<(sizeof(size_t)*8UL - __builtin_clzl(s) - 1); __a <<= !!((s)&(~__a));  GC_memalign(__a,s); })
+#else
+#define malloc(s) GC_malloc(s)
+#endif
+#define free(a) 
+#else
+#define malloc(s) kmem_malloc(s)
+#define free(a) kmem_free(a)
+#endif
+
 
 /* arch specific */
 void arch_detect_mem_map (mmap_info_t * mm_info, mem_map_entry_t * memory_map, unsigned long mbd);
diff --git a/src/gc/bdwgc/bdwgc.c b/src/gc/bdwgc/bdwgc.c
index 60be14b..cab53ce 100644
--- a/src/gc/bdwgc/bdwgc.c
+++ b/src/gc/bdwgc/bdwgc.c
@@ -126,8 +126,16 @@ void nk_gc_bdwgc_thread_state_deinit(struct nk_thread *t)
 
 int  nk_gc_bdwgc_init()
 {
-    //    GC_COND_INIT();
-    BDWGC_INFO("inited\n");
+    // We cannot do a GC until threads are up... 
+    GC_set_dont_precollect(1);
+    // Fail to the kernel allocator if we cannot allocate
+    GC_set_oom_fn(kmem_malloc); 
+    // Initialize
+    GC_INIT();
+    // Give us an intial heap so we don't do a collection
+    // until we have threads up
+    GC_expand_hp(64*1024*1024);
+    BDWGC_INFO("inited - initial heap size: %lu (%lu unmapped bytes)\n",GC_get_heap_size(),GC_get_unmapped_bytes());
     return 0;
 }
 void nk_gc_bdwgc_deinit()
@@ -135,6 +143,12 @@ void nk_gc_bdwgc_deinit()
     BDWGC_INFO("deinited\n");
 }
 
+int nk_gc_bdwgc_collect()
+{
+    GC_gcollect();
+    return 0;
+}
+
 #ifdef NAUT_CONFIG_TEST_BDWGC
 int  nk_gc_bdwgc_test()
 {
diff --git a/src/gc/bdwgc/include/bdwgc_internal.h b/src/gc/bdwgc/include/bdwgc_internal.h
index 1e82ed5..817c4fc 100644
--- a/src/gc/bdwgc/include/bdwgc_internal.h
+++ b/src/gc/bdwgc/include/bdwgc_internal.h
@@ -46,12 +46,17 @@
 #define BDWGC_ERROR(fmt, args...) ERROR_PRINT("bdwgc: gc_state=%p: " fmt, !get_cur_thread() ? 0 : get_cur_thread()->gc_state, ##args)
 
 
-#define BDWGC_SPECIFIC_THREAD_STATE(t) ((bdwgc_thread_state*)(t->gc_state))
+#define BDWGC_SPECIFIC_THREAD_TLFS(t) ((t) ? (t)->gc_state ? &(((bdwgc_thread_state*)((t)->gc_state))->tlfs) : 0 : 0)
+#define BDWGC_THREAD_TLFS() (BDWGC_SPECIFIC_THREAD_TLFS(get_cur_thread()))
+
+#define BDWGC_SPECIFIC_THREAD_STATE(t) ((t) ? (bdwgc_thread_state*)((t)->gc_state) : 0)
 #define BDWGC_THREAD_STATE() (BDWGC_SPECIFIC_THREAD_STATE(get_cur_thread()))
 
-#define BDWGC_SPECIFIC_STACK_BOTTOM(t) ((void*)((uint64_t)(t)->stack + (t)->stack_size - sizeof(uint64_t)))
-#define BDWGC_STACK_BOTTOM() (BDWGC_SPECIFIC_STACK_BOTTOM(get_cur_thread()))
+#define BDWGC_SPECIFIC_STACK_TOP(t) ((t) ? ((void*)((uint64_t)(t)->rsp)) : 0 )
+#define BDWGC_STACK_TOP() (BDWGC_SPECIFIC_STACK_TOP(get_cur_thread()))
 
+#define BDWGC_SPECIFIC_STACK_BOTTOM(t) ((t) ? ((void*)((uint64_t)(t)->stack + (t)->stack_size - 0)) : 0)
+#define BDWGC_STACK_BOTTOM() (BDWGC_SPECIFIC_STACK_BOTTOM(get_cur_thread()))
 
 /* A generic pointer to which we can add        */
 /* byte displacements and which can be used     */
diff --git a/src/gc/bdwgc/include/private/gcconfig.h b/src/gc/bdwgc/include/private/gcconfig.h
index 46043a4..c52085f 100644
--- a/src/gc/bdwgc/include/private/gcconfig.h
+++ b/src/gc/bdwgc/include/private/gcconfig.h
@@ -2881,7 +2881,7 @@ extern char _data_end[];
 #   define GET_MEM(bytes) (struct hblk*)ps3_get_mem(bytes)
 # elif defined(NAUT)
 #   include <nautilus/mm.h>
-#   define GET_MEM(bytes) HBLKPTR(malloc((size_t)(bytes) + GC_page_size) \
+#   define GET_MEM(bytes) HBLKPTR(kmem_malloc((size_t)(bytes) + GC_page_size) \
                                           + GC_page_size-1)
 # else
     ptr_t GC_unix_get_mem(GC_word bytes);
diff --git a/src/gc/bdwgc/malloc.c b/src/gc/bdwgc/malloc.c
index bf74c1a..076ca1f 100644
--- a/src/gc/bdwgc/malloc.c
+++ b/src/gc/bdwgc/malloc.c
@@ -243,6 +243,8 @@ GC_API void * GC_CALL GC_generic_malloc(size_t lb, int k)
     size_t lg;
     DCL_LOCK_STATE;
 
+    BDWGC_DEBUG("malloc %lu bytes\n",lb);
+
     if(SMALL_OBJ(lb)) {
         lg = GC_size_map[lb];
         opp = (void **)&(GC_objfreelist[lg]);
diff --git a/src/gc/bdwgc/mallocx.c b/src/gc/bdwgc/mallocx.c
index 3a0c40a..4fd8cfb 100644
--- a/src/gc/bdwgc/mallocx.c
+++ b/src/gc/bdwgc/mallocx.c
@@ -452,14 +452,24 @@ GC_API void * GC_CALL GC_memalign(size_t align, size_t lb)
     size_t new_lb;
     size_t offset;
     ptr_t result;
+    
+    BDWGC_DEBUG("Allocating %lu bytes with alignment %lu\n",lb,align);
 
-    if (align <= GRANULE_BYTES) return GC_malloc(lb);
+    if (align <= GRANULE_BYTES) {
+	result = GC_malloc(lb);
+	BDWGC_DEBUG("Less than or equal to granule %lu - returning %p\n", GRANULE_BYTES,result);
+	return result;
+    }
     if (align >= HBLKSIZE/2 || lb >= HBLKSIZE/2) {
         if (align > HBLKSIZE) {
-          return (*GC_get_oom_fn())(LONG_MAX-1024); /* Fail */
+	    result = (*GC_get_oom_fn())(lb);
+	    BDWGC_DEBUG("Unable to handle alignment>%lu - handed to OOM fn - returning %p\n",HBLKSIZE,result);
+	    return result;
         }
-        return GC_malloc(lb <= HBLKSIZE? HBLKSIZE : lb);
+        result = GC_malloc(lb <= HBLKSIZE? HBLKSIZE : lb);
             /* Will be HBLKSIZE aligned.        */
+	BDWGC_DEBUG("Request alignment is set to %lu - SUCCEED - returning %p\n",HBLKSIZE,result);
+	return result;
     }
     /* We could also try to make sure that the real rounded-up object size */
     /* is a multiple of align.  That would be correct up to HBLKSIZE.      */
@@ -475,6 +485,7 @@ GC_API void * GC_CALL GC_memalign(size_t align, size_t lb)
     }
     result = (void *) ((ptr_t)result + offset);
     GC_ASSERT((word)result % align == 0);
+    BDWGC_DEBUG("Long path is returning %p\n", result);
     return result;
 }
 
diff --git a/src/gc/bdwgc/naut_stop_world.c b/src/gc/bdwgc/naut_stop_world.c
index 2077a84..3524220 100644
--- a/src/gc/bdwgc/naut_stop_world.c
+++ b/src/gc/bdwgc/naut_stop_world.c
@@ -51,9 +51,8 @@
 
 GC_INNER void GC_stop_world(void)
 {
-  BDWGC_DEBUG("Stopping the world from thread %p tid %lu\n", get_cur_thread(),get_cur_thread()->tid);
-  // kick everyone else out into an interrupt handler here... 
-  cli();
+    BDWGC_DEBUG("Stopping the world from thread %p tid %lu\n", get_cur_thread(),get_cur_thread()->tid);
+    nk_sched_stop_world();
 }
 
 
@@ -62,7 +61,7 @@ GC_INNER void GC_stop_world(void)
 GC_INNER void GC_start_world(void)
 {
     BDWGC_DEBUG("Starting the world from %p (tid %lu)\n", get_cur_thread(),get_cur_thread()->tid);
-  sti();
+    nk_sched_start_world();
 }
 
 
@@ -76,7 +75,7 @@ static void push_thread_stack(nk_thread_t *t, void *state)
   
   traced_stack_sect = BDWGC_SPECIFIC_THREAD_STATE(t) -> traced_stack_sect;
 
-  lo = t -> stack;
+  lo = BDWGC_SPECIFIC_STACK_TOP(t);
   hi = BDWGC_SPECIFIC_STACK_BOTTOM(t);
   
   if (traced_stack_sect != NULL
@@ -87,21 +86,28 @@ static void push_thread_stack(nk_thread_t *t, void *state)
     //    traced_stack_sect = traced_stack_sect->prev;
   }
   
-  BDWGC_DEBUG("Pushing stack for thread (%p, tid=%u), range = [%p,%p)\n", t, t->tid, lo, hi);
-      
-  if (0 == lo) panic("GC_push_all_stacks: sp not set!");
-  //GC_push_all_stack_sections(lo, hi, traced_stack_sect);
-  GC_push_all_stack_sections(lo, hi, NULL);
-  total_size += hi - lo; /* lo <= hi */
-      
+  if (lo==hi) { 
+      BDWGC_DEBUG("Skipping stack as it is empty\n");
+  } else {
+      BDWGC_DEBUG("Pushing stack for thread (%p, tid=%u), range = [%p,%p)\n", t, t->tid, lo, hi);
+      //GC_push_all_stack_sections(lo, hi, traced_stack_sect);
+      GC_push_all_stack_sections(lo, hi, NULL);
+      total_size += hi - lo; /* lo <= hi */
+  }
 }
 
 /* We hold allocation lock.  Should do exactly the right thing if the   */
 /* world is stopped.  Should not fail if it isn't.                      */
 GC_INNER void GC_push_all_stacks(void)
-{
-  BDWGC_DEBUG("Pushing stacks from thread %p\n", get_cur_thread());
-  nk_sched_map_threads(-1,push_thread_stack,0);
+{									
+    if (!get_cur_thread()) { 
+	BDWGC_ERROR("We are doing a garbage collection before threads are active..\n");
+	panic("Garbage collection before threads active!\n");
+	return;
+    } else {
+	BDWGC_DEBUG("Pushing stacks from thread %p\n", get_cur_thread());
+	nk_sched_map_threads(-1,push_thread_stack,0);
+    }
 }
 
 
diff --git a/src/gc/bdwgc/naut_threads.c b/src/gc/bdwgc/naut_threads.c
index 28c985c..09f0899 100644
--- a/src/gc/bdwgc/naut_threads.c
+++ b/src/gc/bdwgc/naut_threads.c
@@ -108,7 +108,7 @@ void GC_push_thread_structures(void)
 
 
 
-static void mark_thread_local_fls(nk_thread_t *t, void *state)
+static void mark_thread_local_fls(struct nk_thread *t, void *state)
 {
   if (t->gc_state == NULL) {
     BDWGC_DEBUG("Initializing gc_state for %p (tid %d)\n", t, t->tid);
@@ -153,7 +153,7 @@ GC_INNER void GC_init_parallel(void)
   
   /* Initialize thread local free lists if used.      */
   LOCK();
-  GC_init_thread_local(&(BDWGC_THREAD_STATE()->tlfs));
+  GC_init_thread_local(BDWGC_THREAD_TLFS());
   UNLOCK();
 }
 
@@ -335,7 +335,7 @@ GC_INNER void GC_thr_init(void)
 # if defined(GC_ASSERTIONS)
     void GC_check_tls_for(GC_tlfs p);
 
-    static void check_thread_tls (nk_thread_t *t)
+    static void check_thread_tls (struct nk_thread * t, void * state)
     {
        GC_check_tls_for(&(BDWGC_SPECIFIC_THREAD_STATE(t) -> tlfs));
     }
diff --git a/src/gc/bdwgc/os_dep.c b/src/gc/bdwgc/os_dep.c
index 64056db..531bd32 100644
--- a/src/gc/bdwgc/os_dep.c
+++ b/src/gc/bdwgc/os_dep.c
@@ -1159,7 +1159,7 @@ GC_INNER word GC_page_size = 0;
 #   define STACKBOTTOM (ptr_t)pthread_get_stackaddr_nppthread_get_stackaddr_np(pthread_self())
 # elif defined(NAUT)
 #   include <nautilus/thread.h>
-#   define STACKBOTTOM ((ptr_t)(get_cur_thread()->stack + get_cur_thread()->stack_size - sizeof(uint64_t)))
+#   define STACKBOTTOM (get_cur_thread() ? ((ptr_t)(get_cur_thread()->stack + get_cur_thread()->stack_size - sizeof(uint64_t))) : 0)
 # endif
 
   ptr_t GC_get_main_stack_base(void)
@@ -1763,7 +1763,7 @@ void GC_register_data_segments(void)
       /* Try a little harder to find malloc heap.                       */
         size_t req_size = 10000;
         do {
-          void *p = malloc(req_size);
+          void *p = kmem_malloc(req_size);
           if (0 == p) {
             free(new_l);
             return;
diff --git a/src/gc/bdwgc/tests/test.c b/src/gc/bdwgc/tests/test.c
index ac8e2da..e6c8401 100644
--- a/src/gc/bdwgc/tests/test.c
+++ b/src/gc/bdwgc/tests/test.c
@@ -1373,6 +1373,8 @@ int bdwgc_test_leak_detector()
 }
 #endif
 
+uint64_t heap_at_start, unmapped_at_start;
+
 #define NUMBER_ROUND_UP(v, bound) ((((v) + (bound) - 1) / (bound)) * (bound))
 
 void check_heap_stats(void)
@@ -1485,6 +1487,12 @@ void check_heap_stats(void)
                   " (heapsize: %lu, expected: %lu)\n",
             (unsigned long)(GC_get_heap_size() + GC_get_unmapped_bytes()),
             (unsigned long)max_heap_sz);
+	GC_printf("NOTE THAT THIS IS PROBABLY OK IN NAUTILUS\n"
+		  "  We are continuously using GC, and started with a heap\n"
+		  "  of %lu bytes with %lu bytes unmapped (total %lu bytes), so we\n"
+		  "  expect that the total will be >%lu\n",
+		  heap_at_start, unmapped_at_start, heap_at_start+unmapped_at_start, max_heap_sz);
+
         FAIL;
     }
 #   ifdef THREADS
@@ -1627,7 +1635,16 @@ int test_bdwgc_main(void)
     int code = 0;
     int i;
     
-    GC_COND_INIT();
+
+    // Already initialized at boot - we are not a process
+    //    GC_COND_INIT();
+
+
+    heap_at_start = GC_get_heap_size();
+    unmapped_at_start = GC_get_unmapped_bytes();
+
+    GC_printf("Starting test - heap size = %lu (preallocated at %lu), unmapped = %lu\n", heap_at_start,64*1024*1024,unmapped_at_start);
+
     n_tests = 0;
     BDWGC_DEBUG("MAIN_BREAK_1\n");
     
diff --git a/src/gc/bdwgc/thread_local_alloc.c b/src/gc/bdwgc/thread_local_alloc.c
index 602e6c9..edfaa8e 100644
--- a/src/gc/bdwgc/thread_local_alloc.c
+++ b/src/gc/bdwgc/thread_local_alloc.c
@@ -136,24 +136,25 @@ GC_bool GC_is_thread_tsd_valid(void *tsd);
 
 GC_API void * GC_CALL GC_malloc(size_t bytes)
 {
-  //  BDWGC_DEBUG("Allocating %d bytes for thread %p\n", bytes, get_cur_thread());
+    BDWGC_DEBUG("Allocating %d bytes for thread %p\n", bytes, get_cur_thread());
     size_t granules = ROUNDED_UP_GRANULES(bytes);
     void *result;
 
-    //if (EXPECT(0 == &(get_cur_thread()-> gc_state -> tlfs), FALSE)) {
-    if (0 == (void *)&(BDWGC_THREAD_STATE() -> tlfs))
+    if (!BDWGC_THREAD_TLFS())
       {
-        BDWGC_DEBUG("ENTER CORE MALLOC %p (tid %d)\n", get_cur_thread(), get_cur_thread()->tid);
+        BDWGC_DEBUG("ENTER CORE MALLOC %p\n", get_cur_thread());
         result =  GC_core_malloc(bytes);
-        sti();
+        BDWGC_DEBUG("core malloc is returning %p\n", result);
         return result; 
       }
     
     GC_ASSERT(GC_is_initialized);
 
+    BDWGC_DEBUG("FAST_MALLOC_GRANS\n");
+
     GC_FAST_MALLOC_GRANS(result,
                          granules,
-                         BDWGC_THREAD_STATE() -> tlfs.normal_freelists,
+                         BDWGC_THREAD_TLFS()->normal_freelists,
                          DIRECT_GRANULES,
                          NORMAL,
                          GC_core_malloc(bytes),
@@ -163,6 +164,8 @@ GC_API void * GC_CALL GC_malloc(size_t bytes)
       GC_err_printf("GC_malloc(%u) = %p : %u\n",
                         (unsigned)bytes, result, (unsigned)GC_gc_no);
 #   endif
+
+    BDWGC_DEBUG("Malloc is returning %p\n",result);
     return result;
 }
 
@@ -170,7 +173,7 @@ GC_API void * GC_CALL GC_malloc(size_t bytes)
 GC_API void * GC_CALL GC_malloc_atomic(size_t bytes)
 {
     size_t granules = ROUNDED_UP_GRANULES(bytes);
-    void *tsd = &(BDWGC_THREAD_STATE() -> tlfs); 
+    void *tsd = BDWGC_THREAD_TLFS();
     void *result;
     void **tiny_fl;
 
diff --git a/src/nautilus/mm/kmem.c b/src/nautilus/mm/kmem.c
index a3bb337..a5f30ff 100644
--- a/src/nautilus/mm/kmem.c
+++ b/src/nautilus/mm/kmem.c
@@ -8,7 +8,7 @@
  * led by Sandia National Laboratories that includes several national 
  * laboratories and universities. You can find out more at:
  * http://www.v3vee.org  and
- * http://xtack.sandia.gov/hobbes
+ * http://xstack.sandia.gov/hobbes
  *
  * Copyright (c) 2015, Kyle C. Hale <kh@u.northwestern.edu>
  * Copyright (c) 2015, The V3VEE Project  <http://www.v3vee.org> 
@@ -452,7 +452,7 @@ nk_kmem_init (void)
  *       Failure: NULL
  */
 void *
-malloc (size_t size)
+kmem_malloc (size_t size)
 {
     void *block = 0;
     struct kmem_block_hdr *hdr = NULL;
@@ -540,7 +540,7 @@ malloc (size_t size)
  *       kmem_alloc().
  */
 void
-free (void * addr)
+kmem_free (void * addr)
 {
     struct kmem_block_hdr *hdr;
     struct buddy_mempool * zone;
diff --git a/src/nautilus/shell.c b/src/nautilus/shell.c
index aed30da..08bd0ee 100644
--- a/src/nautilus/shell.c
+++ b/src/nautilus/shell.c
@@ -459,6 +459,71 @@ static int handle_blktest(char * buf)
     return 0;
 }
 
+static int test_stop()
+{
+    int i;
+
+#define N 16
+    
+    for (i=0;i<N;i++) { 
+	nk_vc_printf("Stopping world iteration %d\n",i);
+	nk_sched_stop_world();
+	nk_vc_printf("Executing during stopped world iteration %d\n",i);
+	nk_sched_start_world();
+    }
+
+    return 0;
+
+}
+
+#ifdef NAUT_CONFIG_ISOCORE
+
+static void isotest(void *arg)
+{
+    // note trying to do anything in here with NK
+    // features, even a print, is unlikely to work due to
+    // relocation, interrupts off, etc.   
+    //serial_print("Hello from isocore, my arg is %p\n", arg);
+    serial_putchar('H');
+    serial_putchar('I');
+    serial_putchar('!');
+    serial_putchar('\n');
+    while (1) { }  // does actually get here in testing
+}
+
+static int test_iso()
+{
+    void (*code)(void*) = isotest;
+    uint64_t codesize = PAGE_SIZE_4KB; // we are making pretend here
+    uint64_t stacksize = PAGE_SIZE_4KB;
+    void *arg = (void*)0xdeadbeef;
+
+    nk_vc_printf("Testing isolated core - this will not return!\n");
+
+    return nk_isolate(code, 
+		      codesize,
+		      stacksize,
+		      arg);
+}
+
+
+#endif
+
+#ifdef NAUT_CONFIG_GARBAGE_COLLECTION
+static int handle_collect(char *buf)
+{
+#ifdef NAUT_CONFIG_ENABLE_BDWGC
+    nk_vc_printf("Doing BDWGC global garbage collection\n");
+    int rc = nk_gc_bdwgc_collect();
+    nk_vc_printf("BDWGC global garbage collection done result: %d\n",rc);
+    return 0;
+#else
+    nk_vc_printf("No garbage collector is enabled...\n");
+    return 0;
+#endif
+}
+#endif
+
 static int handle_test(char *buf)
 {
     char what[80];
@@ -471,6 +536,17 @@ static int handle_test(char *buf)
 	return test_threads();
     }
 
+    if (!strncasecmp(what,"stop",4)) { 
+	return test_stop();
+    }
+
+#ifdef NAUT_CONFIG_ISOCORE
+    if (!strncasecmp(what,"iso",3)) { 
+	test_iso();
+	return 0;
+    }
+#endif
+
 #ifdef NAUT_CONFIG_TEST_BDWGC
     if (!strncasecmp(what,"bdwgc",5)) { 
 	nk_vc_printf("Testing BDWGC garbage collector\n");
@@ -524,36 +600,6 @@ static int handle_benchmarks(char * buf)
     return 0;
 }
 
-#ifdef NAUT_CONFIG_ISOCORE
-
-static void isotest(void *arg)
-{
-    // note trying to do anything in here with NK
-    // features, even a print, is unlikely to work due to
-    // relocation, interrupts off, etc.   
-    //serial_print("Hello from isocore, my arg is %p\n", arg);
-    serial_putchar('H');
-    serial_putchar('I');
-    serial_putchar('!');
-    serial_putchar('\n');
-    while (1) { }  // does actually get here in testing
-}
-
-static int handle_isotest(char *buf)
-{
-    void (*code)(void*) = isotest;
-    uint64_t codesize = PAGE_SIZE_4KB; // we are making pretend here
-    uint64_t stacksize = PAGE_SIZE_4KB;
-    void *arg = (void*)0xdeadbeef;
-
-    return nk_isolate(code, 
-		      codesize,
-		      stacksize,
-		      arg);
-}
-
-
-#endif
 
 static int handle_meminfo(char *buf)
 {
@@ -656,13 +702,7 @@ static int handle_cmd(char *buf, int n)
   }
 #endif
 
-#ifdef NAUT_CONFIG_ISOCORE
-  if (!strncasecmp(buf,"isotest",4)) { 
-    handle_isotest(buf);
-    return 0;
-  }
-#endif
-  
+ 
   if (!strncasecmp(buf,"help",4)) { 
     nk_vc_printf("help\nexit\nvcs\ncores [n]\ntime [n]\nthreads [n]\n");
     nk_vc_printf("devs | fses | ofs | cat [path]\n");
@@ -670,6 +710,9 @@ static int handle_cmd(char *buf, int n)
     nk_vc_printf("regs [t]\npeek [bwdq] x | mem x n [s] | poke [bwdq] x y\nin [bwd] addr | out [bwd] addr data\nrdmsr x [n] | wrmsr x y\ncpuid f [n] | cpuidsub f s\n");
     nk_vc_printf("meminfo [detail]\n");
     nk_vc_printf("reap\n");
+#ifdef NAUT_CONFIG_GARBAGE_COLLECTION
+    nk_vc_printf("collect\n");
+#endif
     nk_vc_printf("burn a name size_ms tpr priority\n");
     nk_vc_printf("burn s name size_ms tpr phase size deadline priority\n");
     nk_vc_printf("burn p name size_ms tpr phase period slice\n");
@@ -678,8 +721,7 @@ static int handle_cmd(char *buf, int n)
     nk_vc_printf("bench\n");
     nk_vc_printf("blktest dev r|w start count\n");
     nk_vc_printf("blktest dev r|w start count\n");
-    nk_vc_printf("isotest\n");
-    nk_vc_printf("test threads|bdwgc|...\n");
+    nk_vc_printf("test threads|stop|iso|bdwgc|...\n");
     nk_vc_printf("vm name [embedded image]\n");
     nk_vc_printf("run path\n");
     return 0;
@@ -742,10 +784,17 @@ static int handle_cmd(char *buf, int n)
   }
 
   if (!strncasecmp(buf,"reap",4)) { 
-      nk_sched_reap(1); // unconditional reap
+    nk_sched_reap(1); // unconditional reap
     return 0;
   }
 
+#ifdef NAUT_CONFIG_GARBAGE_COLLECTION
+  if (!strncasecmp(buf,"collect",7)) { 
+      handle_collect(buf); 
+      return 0;
+  }
+#endif
+
   if (sscanf(buf,"regs %lu",&tid)==1) { 
       nk_thread_t *t = nk_find_thread_by_tid(tid);
       if (!t) {
-- 
1.9.1

